package test.java.com.hp.fc.usa.nmc.na.tests;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.Assert;
import org.testng.Reporter;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.print.attribute.standard.MediaSize.NA;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import test.java.com.hp.fc.usa.nmc.na.listener.GenerateCustomReport;
import test.java.com.hp.fc.usa.nmc.na.pages.ResourceIdentityPoolAdvanceSearchPage;
import test.java.com.hp.fc.usa.nmc.na.pages.ResourceIdentitySearchResultsPage;


@Listeners(GenerateCustomReport.class)
public class ResourceIdentityAdvanceReportTest extends TestExecutor{

	WebElement table =null;
	List<WebElement> rows = null;
	
	@BeforeMethod(enabled = true, groups = {"BAT", "ART"})
	public void startTest() throws IOException, InterruptedException{
		initialize();
		
		driver.get("http://"+System.getProperty("naIpAddress"));
		
		if(common.checkExistenceOfOverridelink())
		{
			common.getObjectById("overridelink").click();
			Thread.sleep(3000);			
		}
		//driver.navigate().to("javascript:document.getElementById('overridelink').click();");
		
		login.loginAsUser("admin");
		if(!isLoggedIn){
			System.out.println("Invalid Username/password");
			Assert.assertTrue( false,"Not able to login to NA Server");
			// report error
		}
		driver.manage().window().maximize();
		
	}
	
		
// verify created 'Resource ID'  available in ( AdvancedSearch  > Resource Identity Search Results )
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchResourceIdShownInReport_059(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235192   "+"<br>");
		Reporter.log("===============Start testAdvanceSearchResourceIdShownInReport_059========================"+"<br>");
		
		Reporter.log("Step 1 : create Resource Identity Pool and add a resource 'ID' to it" +"<br>");
		String resoucePool = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resoucePool,idName,null),"Not able to add id to the pool ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : Select 'Search For' as Resource Identity  & Click on 'search' "  +"<br>");		
		System.out.println("value is"+common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields));
		common.selectOption(advanceSearch.selectedFields, "Resource Identity");		
		common.search();
		common.pageSizeOption("All");
		
		Reporter.log("Step 4 : Verify above created  Resource ID <"+idName+"> displayed or not? :: Expected :should be displayed  "  +"<br>");
		Assert.assertTrue(driver.findElements(By.linkText(idName)).size()>0,"Not able to find the resource Id");
		
		Reporter.log("===============End testAdvanceSearchResourceIdShownInReport_059========================"+"<br>");
	}

	
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 	
	1. Select 'Description'  as 'contains' and enter "Newly created id Name"
	*/
	@Test (enabled = true, groups= {"ART"})	
	public void testAdvanceSearchSearchCriteriaResourceIdShownInReport_060(){
		Reporter.log("ALM Global ID For this test Case:QCTP1B235219   "+"<br>");
		
		Reporter.log("===============Start testAdvanceSearchSearchCriteriaResourceIdShownInReport_060========================"+"<br>");
		
		
		Reporter.log("Step 1 : create Resource Identity Pool and add a resource 'ID' to it " +"<br>");
		String resoucePool = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resoucePool,idName,null),"Not able to add id to the pool ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select 'Description' in Search Criteria > Select filter as 'contains' > Enter above created resource 'ID'"+"<br>"); 
		NAUtils.enterAdvanceSearchCriteriaAndText(true,advanceSearch.description, "contains", idName);
	
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' only  & Click on 'search' "  +"<br>");
		System.out.println("value is"+common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields));
		common.selectOption(advanceSearch.selectedFields, "Resource Identity");
		common.search();
		common.pageSizeOption("All");
		
		Reporter.log("Step 5 : Verify  created  Resource ID <"+idName+"> displayed or not? :: Expected :should be displayed  "  +"<br>");
		Assert.assertTrue(driver.findElements(By.linkText(idName)).size()>0,"Not able to find the resource Id");
		
		Reporter.log("===============End testAdvanceSearchSearchCriteriaResourceIdShownInReport_060========================"+"<br>");
		
	}
	

		/*Perform Advance Search for 'Resource Identity pool' with below Search Criteria:
		Search Criteria: 	
		1. Select two  newly created 'Pools' 
		*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchTwoPoolsShownInReport_061(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235181  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchTwoPoolsShownInReport_061========================"+"<br>");
		
		Reporter.log("Step 1 : create Resource Identity Pool and add two resource 'ID's to it"+"<br>");
		
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(2);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select 'pool' in Search Criteria dropdown field > Select above created pools>"+"<br>"); 
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Pool' only  & Click on 'search' "  +"<br>");
		System.out.println("value is"+common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields));
		common.selectOption(advanceSearch.selectedFields, "Pool");
		common.sleepInSeconds(10);
		
		common.search();
		common.pageSizeOption("All");
		
		ResourceIdentitySearchResultsPage results = new ResourceIdentitySearchResultsPage();
		
		table =  driver.findElement(By.xpath(results.resourceIdentityResultsTable));
		rows = table.findElements(By.tagName("tr"));
		boolean isPresent = false;
		
		System.out.println("size is "+rows.size());
		
		for(int i=2;i<rows.size();i++){
			System.out.println("value is "+common.getObjectByXpath(results.resourceIdentityResultsTable+"/tbody/tr["+i+"]/td[2]").getText());
		}
		
		for(int j=0;j<poolNames.length;j++){
			for(int i=2;i<=rows.size();i++){
				if(common.getObjectByXpath(results.resourceIdentityResultsTable+"/tbody/tr["+i+"]/td[2]").getText().trim().equals(poolNames[j])){
					Assert.assertTrue(true,"Resource Pool found ");
					isPresent = true;
					break;
				}else{
					isPresent = false;
				}
			}
			//System.out.println("ispresent "+isPresent+" rows size"+rows.size());
			if(!isPresent){
				Assert.assertTrue(false, "Resouce Pool not present");
			}
			
		}
		
				
		//Assert.assertTrue("Not able to find the resource Id", listedPools.);
		//Assert.assertTrue("Not able to find the resource Id", driver.findElements(By.linkText(idName)).size()>0);
		
		Reporter.log("===============End testAdvanceSearchTwoPoolsShownInReport_061========================"+"<br>");
	}
	
	
	/*Perform Advance Search for 'Resource Identity pool' with below Search Criteria:
	Search Criteria: 	
	1. Select  Five newly created 'Pools' 
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchFivePoolsShownInReport_062(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235205  "+"<br>");
		
		Reporter.log("===============Start testAdvanceSearchFivePoolsShownInReport_062========================"+"<br>");
		
		Reporter.log("Step 1 : create five Resource Identity Pools and add five resource 'ID' to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(5);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		Reporter.log("Step 3 : select 'pool' in Search Criteria dropdown field > Select above created pools >"+"<br>"); 
		
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Pool' only  & Click on 'search' "  +"<br>");
		System.out.println("value is"+common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields));
		common.selectOption(advanceSearch.selectedFields, "Pool");
		common.sleepInSeconds(10);
		
		common.search();
		common.pageSizeOption("All");
		
		ResourceIdentitySearchResultsPage results = new ResourceIdentitySearchResultsPage();
		
		table =  driver.findElement(By.xpath(results.resourceIdentityResultsTable));
		rows = table.findElements(By.tagName("tr"));
		boolean isPresent = false;
		
		System.out.println("size is "+rows.size());
		
		for(int i=2;i<rows.size();i++){
			System.out.println("value is "+common.getObjectByXpath(results.resourceIdentityResultsTable+"/tbody/tr["+i+"]/td[2]").getText());
		}
		
		for(int j=0;j<poolNames.length;j++){
			for(int i=2;i<=rows.size();i++){
				if(common.getObjectByXpath(results.resourceIdentityResultsTable+"/tbody/tr["+i+"]/td[2]").getText().trim().equals(poolNames[j])){
					Assert.assertTrue(true,"Resource Pool found ");
					isPresent = true;
					break;
				}else{
					isPresent = false;
				}
			}
			System.out.println("ispresent "+isPresent+" rows size"+rows.size());
			if(!isPresent){
				Assert.assertTrue(false,"Resouce Pool not present");
			}
			
		}
		
		Reporter.log("===============End testAdvanceSearchFivePoolsShownInReport_062========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 	
	1. Select Partition as 'Default Site'  
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchDefaultSiteShowsUpInReport_063(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235199  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchDefaultSiteShowsUpInReport_063========================"+"<br>");
		
		Reporter.log("Step 1: Create  Resouce Identity pool with Partition as 'Default Site' and add a resource ID to it "+"<br>");
		String resoucePool = common.generateRandomString(); 
		NAUtils.createResourceIdentityPools(resoucePool,"Default Site",null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resoucePool,idName,null),"Not able to add id to the pool ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log(" "+"<br>");
		
		Reporter.log("Step 3 : select 'partition' in Search Criteria dropdown field > Select above created partition as 'Default Site' "+"<br>"); 
		NAUtils.selectAdvanceSearchListItem(advanceSearch.partition, "Default Site");
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'partition' >  Click on 'search' "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",advanceSearch.partition});
		
		
		common.search();
		common.pageSizeOption("All");
		
		Reporter.log("Step 5 : Verify  created  Resource ID <"+idName+"> displayed or not? :: Expected :should be displayed  "  +"<br>");
		Assert.assertTrue(driver.findElements(By.linkText(idName)).size()>0,"Not able to see the resource id ");
		
		Reporter.log("===============End testAdvanceSearchDefaultSiteShowsUpInReport_063========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 	
	1. Select three Security Partition 
	2. Also Select Default Site Partition 
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchDefaultSiteAndThreePartitionsShowsUpInReport_064(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235216 "+"<br>");
		Reporter.log("===============Start testAdvanceSearchDefaultSiteAndThreePartitionsShowsUpInReport_064========================"+"<br>");
		Reporter.log("Step 1 : create three 'securityPartitions' & one Default Site Patition"+"<br>");	
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(3);
		String[] securityPartitions = new String[4];
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 3);
		securityPartitions[3] = "Default Site";
		
		Reporter.log("Step 2 : create four Resource Identity Pools and add four Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(4);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] resourceIds = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String, String> getPoolNamesAndPartition  = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNamesAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 4 : select 'partition' in Search Criteria dropdown field > Select above created three securityPartitions &  one partition as 'Default Site' "+"<br>"); 
		
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'partition' >  Click on 'search'  and verify  'Resource ID'"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",advanceSearch.partition});
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String resourceId: resourceIds){
			System.out.println("resource id is "+resourceId);
			Assert.assertTrue(driver.findElements(By.linkText(resourceId)).size()>0,"Not able to see the resource id ");
		}
		
		
		Reporter.log("===============End testAdvanceSearchDefaultSiteAndThreePartitionsShowsUpInReport_064========================"+"<br>");
		
	}
			
	/*Perform Advance Search for 'Resource ID's' with below Search Criteria:
	Search Criteria: 	
	1. Select  Status as 'Available'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchStatusAvailableShowsUpInReport_065(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235210 "+"<br>");
		Reporter.log("===============Start testAdvanceSearchStatusAvailableShowsUpInReport_065========================"+"<br>");
		
		Reporter.log("Step 1: Create  Resouce Identity pool with Partition as 'Default Site' and add a resource ID to it "+"<br>");
		String resoucePool = common.generateRandomString(); 
		NAUtils.createResourceIdentityPools(resoucePool,"Default Site",null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resoucePool,idName,"Available"),"Not able to add id to the pool ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
	
		Reporter.log("Step 3 : select 'status' as 'Available' in Search Criteria dropdown field "+"<br>"); 
		
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'status' >  Click on 'search'  and Verify as 'Resource ID' is  available  "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",advanceSearch.status});
		
		// Step 4
		System.out.println("***********Step 4**********");
		common.search();
		common.pageSizeOption("All");
		
		Assert.assertTrue(driver.findElements(By.linkText(idName)).size()>0,"Not able to see the resource id ");
		
		Reporter.log("===============End testAdvanceSearchStatusAvailableShowsUpInReport_065========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource ID's' with below Search Criteria:
	Search Criteria: 	
	1. Select  Status as 'In Use'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchStatusInUseShowsUpInReport_066(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235180  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchStatusInUseShowsUpInReport_066========================"+"<br>");
		
		Reporter.log("Step 1: Create  Resouce Identity pool with Partition as 'Default Site' and add a resource ID to it "+"<br>");
		String resoucePool = common.generateRandomString(); 
		NAUtils.createResourceIdentityPools(resoucePool,"Default Site",null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resoucePool,idName,"In Use"),"Not able to add id to the pool ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select 'status' as 'Available' in Search Criteria dropdown field "+"<br>"); 
		
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'status' >  Click on 'search'  and Verify as 'Resource ID' is  In Use  "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",advanceSearch.status});
		common.search();
		common.pageSizeOption("All");
		
		Assert.assertTrue(driver.findElements(By.linkText(idName)).size()>0,"Not able to see the resource id ");
		
		Reporter.log("===============End testAdvanceSearchStatusInUseShowsUpInReport_066========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource ID's' with below Search Criteria:
	Search Criteria: 	
	1. Select  CustomField as 'contains' enter "Newly created CustomField value"
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchCustomAttributeShowsUpInReport_067(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235227  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchCustomAttributeShowsUpInReport_067========================"+"<br>");
		
		Reporter.log("Step1 : Created Resource identity pool with custom and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select Created  'customField' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created customField value "+"<br>"); 
		
		for(String customField:customFields){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customField, "contains", customFieldsAndValues.get(customField));
		}
		
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'customField' >  Click on 'search'  and Verify 'Resource ID' "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		for(String customField:customFields){
			common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",customField});
		}
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}
		
		
		Reporter.log("===============End testAdvanceSearchCustomAttributeShowsUpInReport_067========================"+"<br>");
		
	}
	
	/*Perform Advance Search for  Four 'Resource ID's' with below Search Criteria:
	Search Criteria: 	
	1. Select Four CustomFields as 'contains' enter Newly created CustomField values
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchFourCustomAttributeShowsUpInReport_069(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235183  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchFourCustomAttributeShowsUpInReport_069========================"+"<br>");
		
		Reporter.log("Step1 : Created four Resource identity pools with four customs and add four Resource IDs to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(4);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select Created  'customFields' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created customField value "+"<br>"); 
		for(String customField:customFields){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customField, "contains", customFieldsAndValues.get(customField));
		}
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'customField' >  Click on 'search'  and Verify 'Resource ID' "  +"<br>");	
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		for(String customField:customFields){
			common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",customField});
		}
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D");
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}
		
		
		Reporter.log("===============End testAdvanceSearchFourCustomAttributeShowsUpInReport_069========================"+"<br>");
		
	}
		 
	/*Perform Advance Search for  Two 'Resource ID's' with below Search Criteria:
	Search Criteria: 	
	1. Select Two CustomFields as 'contains' enter Newly created CustomField values
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchTwoCustomAttributeShowsUpInReport_070(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235182  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchTwoCustomAttributeShowsUpInReport_070========================"+"<br>");
		
		Reporter.log("Step1 : Created two Resource identity pools with two customs and add two Resource IDs to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(2);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select Created  'customFields' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created customField value "+"<br>"); 
		for(String customField:customFields){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customField, "contains", customFieldsAndValues.get(customField));
		}
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'customField' >  Click on 'search'  and Verify 'Resource ID' "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		for(String customField:customFields){
			common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",customField});
		}
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B");
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}
		
		
		Reporter.log("===============End testAdvanceSearchTwoCustomAttributeShowsUpInReport_070========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for  Three 'Resource ID's' with below Search Criteria:
	Search Criteria: 	
	1. Select Three CustomFields as 'contains' enter Newly created CustomField values
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchThreeCustomAttributeShowsUpInReport_071(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235218  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchThreeCustomAttributeShowsUpInReport_071========================"+"<br>");
		
		Reporter.log("Step1 : Created three Resource identity pools with three customs and add three Resource IDs to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(3);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select Created  'customFields' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created customField value "+"<br>"); 
		for(String customField:customFields){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customField, "contains", customFieldsAndValues.get(customField));
		}
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'customField' >  Click on 'search'  and Verify 'Resource ID' "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		for(String customField:customFields){
			common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",customField});
		}
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C");
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}
		
		
		Reporter.log("===============End testAdvanceSearchThreeCustomAttributeShowsUpInReport_071========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for  Five 'Resource ID's' with below Search Criteria:
	Search Criteria: 	
	1. Select Five CustomFields as 'contains' Newly enter created CustomField values
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchFiveCustomAttributeShowsUpInReport_072(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235220  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchFiveCustomAttributeShowsUpInReport_072========================"+"<br>");
		
		Reporter.log("Step1 : Created five Resource identity pools with five customs and add five Resource IDs to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(5);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select Created  'customFields' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created customField value "+"<br>"); 
		for(String customField:customFields){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customField, "contains", customFieldsAndValues.get(customField));
		}
		
		
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'customField' >  Click on 'search'  and Verify 'Resource ID' "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		for(String customField:customFields){
			common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity",customField});
		}
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E");
				
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}
		
		
		Reporter.log("===============End testAdvanceSearchFiveCustomAttributeShowsUpInReport_072========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'contains enter "Newly created ID name"
	2. 'Status' as 'available'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchContainsRIDAndStatusShowsUpInReport_073(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235198  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchContainsRIDAndStatusShowsUpInReport_073========================"+"<br>");
		
		Reporter.log("Step 1 : Created  Resource identity pool and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "Available"),"Not able to create Multiple pools with Ids ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select 'status' as 'Available' in Search Criteria dropdown field "+"<br>"); 		
		NAUtils.selectAvailableOrInUse("Status", "Available");
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>"); 
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "contains", id);
		}
		
		
		Reporter.log("Step 5 : Select 'Customize Output' as 'Resource Identity' & 'Status' >  Click on 'search'  and Verify 'Resource ID' "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}

		
		Reporter.log("===============End testAdvanceSearchContainsRIDAndStatusShowsUpInReport_073========================"+"<br>");
		
	}
	
	  
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'contains' enter "Newly created ID name"
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchContainsRIDWithOutStatusShowsUpInReport_074(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235185  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchContainsRIDWithOutStatusShowsUpInReport_074========================"+"<br>");
		
		Reporter.log("Step 1 : Created  Resource identity pool and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>"); 
		//NAUtils.selectAvailableOrInUse("Status", "Available");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "contains", id);
		}
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'Status' >  Click on 'search'  and Verify 'Resource ID' "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}

		
		Reporter.log("===============End testAdvanceSearchContainsRIDWithOutStatusShowsUpInReport_074========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'Does not Contains' enter "Newly created ID name"
	2. Status' as 'Available'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchDoesNotContainsRIDStatusShowsUpInReport_075(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235204  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchDoesNotContainsRIDStatusShowsUpInReport_075========================"+"<br>");
		
		Reporter.log("Step 1 : Created  Resource identity pool and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");			
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select 'status' as 'Available' in Search Criteria dropdown field "+"<br>"); 		
		NAUtils.selectAvailableOrInUse("Status", "Available");
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'does not contain' > Enter above created Resource ID "+"<br>"); 
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "does not contain", id);
		}
		
		
		Reporter.log("Step 5 : Select 'Customize Output' as 'Resource Identity' & 'Status' >  Click on 'search'& Verify Resource ID should not be displayed "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status"});
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()<=0,"Not able to see the resource id ");
		}

		
		Reporter.log("===============End testAdvanceSearchDoesNotContainsRIDStatusShowsUpInReport_075========================"+"<br>");
		
	}
		
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'matches' enter "Newly created ID name"
	2. Status' as 'In Use'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchMatchesRIDStatusShowsUpInReport_076(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235215  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchMatchesRIDStatusShowsUpInReport_076========================"+"<br>");
		
		Reporter.log("Step 1 : Created  Resource identity pool and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");			
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select 'status' as 'In Use' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAvailableOrInUse("Status", "In Use");
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'matches' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "matches", id);
		}
		
		
		Reporter.log("Step 5 : Select 'Customize Output' as 'Resource Identity' & 'Status' >  Click on 'search' & Verify 'Resource ID'  "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status"});
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}

		
		Reporter.log("===============End testAdvanceSearchMatchesRIDStatusShowsUpInReport_076========================"+"<br>");
		
	}
	
		
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'equals' enter "Newly created ID name"
	2. Status' as 'In Use'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchEqualsRIDStatusShowsUpInReport_077(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235213  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchEqualsRIDStatusShowsUpInReport_077========================"+"<br>");
		
		Reporter.log("Step 1 : Created  Resource identity pool and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");			
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select 'status' as 'In Use' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAvailableOrInUse("Status", "In Use");
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'equals' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "equals", id);
		}
		
		
		
		Reporter.log("Step 5 : Select 'Customize Output' as 'Resource Identity' & 'Status' >  Click on 'search' & Verify 'Resource ID'  "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}

		
		Reporter.log("===============End testAdvanceSearchEqualsRIDStatusShowsUpInReport_077========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource ID' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'contains' enter "Newly created ID name"
	2. Status' as 'In Use'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchContainsRIDPoolStatusShowsUpInReport_078(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235226  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchContainsRIDPoolStatusShowsUpInReport_078========================"+"<br>");
		
		Reporter.log("Step 1 : Created  Resource identity pool and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		prerequisites();
		
		Reporter.log("Step 3 : select 'status' as 'In Use' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAvailableOrInUse("Status", "In Use");
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "contains", id);
		}
		
		
		Reporter.log("Step 5 : Select 'Customize Output' as 'Resource Identity' , 'Status' , 'Pool'>  Click on 'search' & Verify 'Resource ID'  "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status","Pool"});
		
	
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to see the resource id ");
		}

		
		Reporter.log("===============End testAdvanceSearchContainsRIDPoolStatusShowsUpInReport_078========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'contains' enter "Newly created ID name"
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchWithOutSelectingPoolNameShowsUpInReport_079(){
		Reporter.log("ALM Global ID For this test Case:QCTP1B235189   "+"<br>");
		Reporter.log("===============Start testAdvanceSearchWithOutSelectingPoolNameShowsUpInReport_079========================"+"<br>");
		
		
		Reporter.log("Step 1 : Created  Resource identity pool and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		Reporter.log("Step 3 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "contains", id);
		}
		
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity'&'Pool'>  Click on 'search' & Verify  'Resource Identity Pool'  "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(int i=0;i<poolNames.length;i++){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(poolNames[i]))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue((webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(poolNames[i]), "Pool")).toString().equals(poolNames[i]),"Not able to see the pool name");
		}
		
		
		Reporter.log("===============End testAdvanceSearchWithOutSelectingPoolNameShowsUpInReport_079========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'does not contain' enter "Newly created ID name"
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDAndPoolAndStatusShowsUpInReport_080(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235217  "+"<br>");
		System.out.println("===============Start testAdvanceSearchRIDAndPoolAndStatusShowsUpInReport_080========================");
		
		Reporter.log("Step 1 : Created  Resource identity pool and add a Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 3 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'does not contain' > Enter above created Resource ID "+"<br>");
		
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "does not contain", id);
		}
		
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity'&'Pool'>  Click on 'search' & Verify 'Resource Identity Pool' is not displayed "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(int i=0;i<poolNames.length;i++){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(poolNames[i]))).size()<=0,"Not able to see the resource id ");
			//Assert.assertTrue("Not able to see the pool name", (webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(poolNames[i]), "Pool")).toString().equals(poolNames[i]));
		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDAndPoolAndStatusShowsUpInReport_080========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'matches' enter "Newly created ID name"
	2. Status as 'In Use'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDAndFourPoolMatchesAndStatusShowsUpInReport_081(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235224 "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDAndFourPoolMatchesAndStatusShowsUpInReport_081========================"+"<br>");
		
		
		Reporter.log("Step 1 : Created  Four  Resource identity pool and add  Four Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(4);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 3 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'matches' > Enter above created Resource ID "+"<br>");
		
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "matches", id);
		}
		
		Reporter.log("Step 4 : select 'Pool' as 'Upon Created pools' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAdvanceSearchListItems("Pool", poolNames);
		
		Reporter.log("Step 5 : select 'status' as 'In Use' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAvailableOrInUse("Status", "In Use");
		
		NAUtils.changeResourceIdentityOperationName("matches");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E or F");
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity','Pool'&'Status'>  Click on 'search' & Verify 'Resource Identity Pool' "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool","Status"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(int i=0;i<poolNames.length;i++){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(poolNames[i]))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue((webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(poolNames[i]), "Pool")).toString().equals(poolNames[i]),"Not able to see the pool name");
		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDAndFourPoolMatchesAndStatusShowsUpInReport_081========================"+"<br>");
		
	}
	
	
	
	/*Perform Advance Search for Three  'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'equals' enter "Newly created ID name"
	2. Status as 'In Use'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDAndThreePoolMatchesAndStatusShowsUpInReport_082(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235195  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDAndThreePoolMatchesAndStatusShowsUpInReport_082========================"+"<br>");
		
		
		Reporter.log("Step 1 : Created  Three  Resource identity pool and add  Three Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(3);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 3 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'equals' > Enter above created Resource ID "+"<br>");
		
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "equals", id);
		}
		
		Reporter.log("Step 4 : select 'Pool' as 'Upon Created pools' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAdvanceSearchListItems("Pool", poolNames);
		
		Reporter.log("Step 5 : select 'status' as 'In Use' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAvailableOrInUse("Status", "In Use");
		
		NAUtils.changeResourceIdentityOperationName("equals");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E");
		
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity','Pool'&'Status'>  Click on 'search' & Verify 'Resource Identity Pool' "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool","Status"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(int i=0;i<poolNames.length;i++){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(poolNames[i]))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue((webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(poolNames[i]), "Pool")).toString().equals(poolNames[i]),"Not able to see the pool name");
		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDAndThreePoolMatchesAndStatusShowsUpInReport_082========================"+"<br>");
		
	}
	
	/*Perform Advance Search for Five 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'does not contain' enter "Newly created ID name"
	2. Status as 'In Use'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDAndFivePoolMatchesAndStatusShowsUpInReport_083(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235221   "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDAndFivePoolMatchesAndStatusShowsUpInReport_083========================"+"<br>");
		
		Reporter.log("Step 1 : Created  Five  Resource identity pool and add  Three Resource ID to it   "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(5);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Assert.assertTrue(createMultiplePoolsWithIds(getPoolNameAndIds, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 3 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'does not contain' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "does not contain", id);
		}
		
		Reporter.log("Step 4 : select 'Pool' as 'Upon Created pools' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAdvanceSearchListItems("Pool", poolNames);
		
		Reporter.log("Step 5 : select 'status' as 'In Use' in Search Criteria dropdown field "+"<br>"); 	
		NAUtils.selectAvailableOrInUse("Status", "In Use");
		
		NAUtils.changeResourceIdentityOperationName("does not contain");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D");
		
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity','Pool'&'Status'>  Click on 'search' & Verify 'Resource Identity Pool' "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool","Status"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(int i=0;i<poolNames.length;i++){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(poolNames[i]))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue((webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(poolNames[i]), "Pool")).toString().equals(poolNames[i]),"Not able to see the pool name");
		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDAndFivePoolMatchesAndStatusShowsUpInReport_083========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'contains' enter "Newly created ID name"
	2. Select newly created 'Partition'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDAndPartitionNameStatusShowsUpInReport_084(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235214  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDAndPartitionNameStatusShowsUpInReport_084========================"+"<br>");
		
		Reporter.log("Step 1 : create 'securityPartitions' "+"<br>");	
		String[] securityPartitions = addMultipleSecurityPartitions(1);
		
		Reporter.log("Step 2 : create  Resource Identity Pool and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		Reporter.log("Step 3 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
				
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "contains", id);
		}
		
		Reporter.log("Step 4 : Select 'Customize Output' as 'Resource Identity' & 'partition' >  Click on 'search'  and verify 'Resource Identity Pool'"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDAndPartitionNameStatusShowsUpInReport_084========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'contains' enter "Newly created ID name"
	2. Select newly created 'Pool' 
	3. Select newly created 'Partition'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDPoolAndPartitionShowsUpInReport_085(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235211  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDPoolAndPartitionShowsUpInReport_085========================"+"<br>");
		
		Reporter.log("Step 1 : create 'securityPartition' "+"<br>");	
		String[] securityPartitions = addMultipleSecurityPartitions(1);
		
		Reporter.log("Step 2 : create  Resource Identity Pool and add a Resource 'ID' to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		Reporter.log("Step 4 : select 'partition' & PoolName in Search Criteria dropdown field > Select above created securityPartitions & Pool name  "+"<br>"); 
				
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		
		Reporter.log("Step 5 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "contains", id);
		}
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' ,'partition','Pool' >  Click on 'search'  and verify  'Resource Identity Pool & Partition'"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Pool"});
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDPoolAndPartitionShowsUpInReport_085========================"+"<br>");
		
		
	}
	
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource Identity as 'contains' enter "Newly created ID name"
	2. Select newly created 'Pool' 
	3. Select 'Status' as 'Available'
	4. Select above created 'Partition'
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDPoolPartitionAndStatusShowsUpInReport_086(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235208  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDPoolPartitionAndStatusShowsUpInReport_086========================"+"<br>");
		
		Reporter.log("Step 1 : create 'securityPartitions' "+"<br>");	
		String[] securityPartitions = addMultipleSecurityPartitions(1);
		
		Reporter.log("Step 2 : create  Resource Identity Pool and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select 'partition' , PoolName ,Status  in Search Criteria dropdown field > Select above created securityPartitions , Pool name & Status as 'Availale'   "+"<br>"); 				
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		
		Reporter.log("Step 5 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "contains", id);
		}
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' ,'partition','Pool'& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Pool","Status"});
		
		// Step 4
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDPoolPartitionAndStatusShowsUpInReport_086========================"+"<br>");
		
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select two Resource Identities as 'does not contain' enter "Newly created ID name"
	2. Select two newly created 'Pool's 
	3. Select 'Status' as 'Available'
	4. Select above created 'Partition'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDPoolTwoPartitionAndStatusShowsUpInReport_087(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235193  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDPoolTwoPartitionAndStatusShowsUpInReport_087========================"+"<br>");
		
		Reporter.log("Step 1 : create two 'securityPartitions' "+"<br>");	
		String[] securityPartitions = addMultipleSecurityPartitions(2);
		
		Reporter.log("Step 2 : create two  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'does not contain' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "does not contain", id);
		}
		
		Reporter.log("Step 5 : select 'partition' , PoolName ,Status  in Search Criteria dropdown field > Select above created securityPartitions , Pool name & Status as 'Availale'   "+"<br>"); 	
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		
		NAUtils.changeResourceIdentityOperationName("does not contain");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E");
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' ,'partition','Pool'& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Pool","Status"});
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDPoolTwoPartitionAndStatusShowsUpInReport_087========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select three Resource Identities as 'matches' enter "Newly created ID name"
	2. Select three newly created 'Pool's 
	3. Select 'Status' as 'Available'
	4. Select above created 'Partition'
	*/
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDPoolThreePartitionAndStatusShowsUpInReport_088(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235206 "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDPoolThreePartitionAndStatusShowsUpInReport_088========================"+"<br>");
		
		Reporter.log("Step 1 : create three 'securityPartitions' "+"<br>");
		String[] securityPartitions = addMultipleSecurityPartitions(3);
		
		Reporter.log("Step 2 : create three  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'matches' > Enter above created Resource ID "+"<br>");
		
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "matches", id);
		}
		
		Reporter.log("Step 5 : select 'partition' , PoolName ,Status  in Search Criteria dropdown field > Select above created securityPartitions , Pool name & Status as 'Availale'   "+"<br>"); 	
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		
		NAUtils.changeResourceIdentityOperationName("matches");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E or F ");
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' ,'partition','Pool'& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Pool","Status"});
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDPoolThreePartitionAndStatusShowsUpInReport_088========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select five Resource Identities as 'matches' enter "Newly created ID name"
	2. Select five newly created 'Pool's 
	3. Select 'Status' as 'Available'
	4. Select four 'Partitions' created and one as 'Default Site'
	5.select 'Create Date' check box(Select 'since' as '1 hour ago' and 'until' as '24 hours ago') 
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDFivePoolFourPartitionCreateDateAndStatusShowsUpInReport_089(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235200   "+"<br>");
		Reporter.log("===============End testAdvanceSearchRIDFivePoolFourPartitionCreateDateAndStatusShowsUpInReport_089========================"+"<br>");
		
		
		Reporter.log("Step 1 : create Four 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(4);
		String[] securityPartitions = new String[5];
		
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 4);
		securityPartitions[4] = "Default Site";
		
		
		Reporter.log("Step 2 : create Five  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'matches' > Enter above created Resource ID "+"<br>");
		
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "matches", id);
		}
		Reporter.log("Step 5 : select pool in Search Criteria dropdown field > Select created pools > select Partitions in Search Criteria dropdown field > Select created Partitions > select Status in Search Criteria dropdown field > Select  Status as 'Available'>select Create Date in Search Criteria dropdown field > Select  CreateDate as Select (Select 'since' as '1 hour ago' and 'until' as '24 hours ago')> Search"+"<br>");
		
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.enterAdvanceSearchCriteriaAndText(true,advanceSearch.createDate, "since", "1 hour ago");
		NAUtils.enterAdvanceSearchCriteriaAndText(true,advanceSearch.createDate, "until", "24 hours ago");
		
		NAUtils.changeResourceIdentityOperationName("matches");
		
		
		driver.findElement(By.name("expression")).clear();
	//	driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E and F and G and H and I "); updated on 11th Feb 2015
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E or F or G or H or I ");
		
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' ,'partition','Pool'& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Pool","Status"});
		
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDFivePoolFourPartitionCreateDateAndStatusShowsUpInReport_089========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select five Resource Identities as 'matches' enter "Newly created ID name"
	2. Select five newly created 'Pool's 
	3. Select 'Status' as 'Available'
	4. Select four 'Partitions' created and one as 'Default Site'
	5. Select Description as 'Contains'
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDTwoPoolsFivePartitionsDefaultSiteDescriptionAndStatusShowsUpInReport_090(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235225 "+"<br>");
		Reporter.log("===============End testAdvanceSearchRIDTwoPoolsFivePartitionsDefaultSiteDescriptionAndStatusShowsUpInReport_090========================"+"<br>");
		
		Reporter.log("Step 1 : create Four 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(4);
		String[] securityPartitions = new String[5];
		
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 4);
		securityPartitions[4] = "Default Site";
		
		
		Reporter.log("Step 2 : create Five  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'matches' > Enter above created Resource ID "+"<br>");
		
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "matches", id);
		}
		
		Reporter.log("Step 5 : select pool in Search Criteria dropdown field > Select created pools > select Partitions in Search Criteria dropdown field > Select created Partitions > select Status in Search Criteria dropdown field > Select  Status as 'Available'>select Desciption in Search Criteria dropdown field > Select  Desciption  as 'contains' Enter the Text as 'created by Automation for pool'> Search"+"<br>");
		Reporter.log("Step 5 : select 'partition' , PoolName ,Desciption  in Search Criteria dropdown field > Select above created securityPartitions , Pool name & select 'Desciption' as 'contains'  > Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		NAUtils.enterAdvanceSearchCriteriaAndText(true,advanceSearch.description, "contains", "created by Automation for pool");
		
		NAUtils.changeResourceIdentityOperationName("matches");
				
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E and F and G and H or I");
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' ,'partition','Pool'& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Pool","Status"});
		
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDTwoPoolsFivePartitionsDefaultSiteDescriptionAndStatusShowsUpInReport_090========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select five Resource Identities as 'matches' enter "Newly created ID name"
	2. Select five newly created 'Pool's 
	3. Select 'Status' as 'Available'
	4. Select four 'Partitions' created and one as 'Default Site'
	5. Select 'Last Modified Date' check box(Select 'since' as '1 week ago' and 'until' as '2 months ago') 
	*/
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDFivePoolsThreePartitionsLastModifiedAndStatusShowsUpInReport_091(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235212  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDFivePoolsThreePartitionsLastModifiedAndStatusShowsUpInReport_091========================"+"<br>");
	
		Reporter.log("Step 1 : create Four 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(4);
		String[] securityPartitions = new String[5];
		
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 4);
		securityPartitions[4] = "Default Site";
		
		Reporter.log("Step 2 : create Five  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "contains", id);
		}
		Reporter.log("Step 5 : select pool in Search Criteria dropdown field > Select created pools > select Partitions in Search Criteria dropdown field > Select created Partitions > select Status in Search Criteria dropdown field > Select  Status as 'Available'>select Last Modified Date in Search Criteria dropdown field > Select  Last Modified Date as Select ('since' as '1 week ago' and 'until' as '2 months ago')> Search"+"<br>");


		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		
		NAUtils.enterAdvanceSearchCriteriaAndText(true,advanceSearch.lastModifiedDate, "since", "1 week ago");
		NAUtils.enterAdvanceSearchCriteriaAndText(true,advanceSearch.lastModifiedDate, "until", "2 months ago");
		
		
		NAUtils.changeResourceIdentityOperationName("contains");
				
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E and F and G and H and I or J");
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' ,'partition','Pool'& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Pool","Status"});
		
		
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDFivePoolsThreePartitionsLastModifiedAndStatusShowsUpInReport_091========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource Identity as 'does not equal' enter "Newly created ID name"
	2. Select 'Status' as 'In Use'
	3. Select 'Partition' as 'Default Site'
	4. Select 'Last Modified By as 'Contains' & enter the text as 'admin'
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDPartitionDefaultSiteChangedByAndStatusShowsUpInReport_092(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235196  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDPartitionDefaultSiteChangedByAndStatusShowsUpInReport_092========================"+"<br>");
		
		Reporter.log("Step 1 : create one 'securityPartitions' "+"<br>");
		String[] securityPartitions = new String[1];
		
		securityPartitions[0] = "Default Site";
		
		Reporter.log("Step 2 : create one  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'does not equal' > Enter above created Resource ID "+"<br>");
		
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "does not equal", id);
		}
		
		Reporter.log("Step 5 : select Partitions in Search Criteria dropdown field > Select created Partitions > select Status in Search Criteria dropdown field > Select  Status as 'In Use'>select Last Modified By in Search Criteria dropdown field > Select  Last Modified By as 'Contains'  Enter the text as 'admin'> Search"+"<br>");


		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		NAUtils.enterAdvanceSearchCriteriaAndText(true,advanceSearch.lastModifiedBy, "contains", "admin");
		
		NAUtils.changeResourceIdentityOperationName("contains");
				
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B and C and D");
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' ,'partition','& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Status"});
		
		// Step 4
		
		common.search();
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDPartitionDefaultSiteChangedByAndStatusShowsUpInReport_092========================");
		
	}
	
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select three Resource Identity as 'matches' enter "Newly created ID name"
	2. Select 'Status' as 'In Use'
	3. Select two 'Partitions' created and one as 'Default Site'
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDThreePartitionsDefaultSiteChangedByAndStatusShowsUpInReport_093(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235194  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDThreePartitionsDefaultSiteChangedByAndStatusShowsUpInReport_093========================"+"<br>");
		
		Reporter.log("Step 1 : create two 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(2);
		String[] securityPartitions = new String[3];
		
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 2);
		securityPartitions[2] = "Default Site";
		
		Reporter.log("Step 2 : create one  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "In Use"),"Not able to create Multiple pools with partition ");
		
	
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select  'Resource Identity' in Search Criteria dropdown field > Select filter as 'matches' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,"Resource Identity", "matches", id);
		}
		
		Reporter.log("Step 5 : select Partitions in Search Criteria dropdown field > Select created Partitions > select Status in Search Criteria dropdown field > Select  Status as 'In Use'> Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		
		NAUtils.changeResourceIdentityOperationName("matches");
				
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C and D and E");
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' 'partition','& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Status"});
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDThreePartitionsDefaultSiteChangedByAndStatusShowsUpInReport_093========================"+"<br>");
		
	}

	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select five Resource Identity as 'matches' enter "Newly created ID name"
	2. Select 'Status' as 'In Use'
	3. Select five 'Partitions' created .
	*/
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDFivePartitionsDefaultSiteChangedByAndStatusShowsUpInReport_094(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235202 "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDFivePartitionsDefaultSiteChangedByAndStatusShowsUpInReport_094========================"+"<br>");
	
		Reporter.log("Step 1 : create five 'securityPartitions' "+"<br>");
		String[] securityPartitions = addMultipleSecurityPartitions(5);
				
		Reporter.log("Step 2 : create five  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'matches' > Enter above created Resource ID "+"<br>");
		for(String id: idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(false,advanceSearch.resourceIdentity, "matches", id);
		}
		Reporter.log("Step 5 : select Partition in Search Criteria dropdown field > Select created Partitions > select Status in Search Criteria dropdown field > Select  Status as 'In Use'> Search"+"<br>");


		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		
		NAUtils.changeResourceIdentityOperationName("matches");
				
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E and F and G");
		
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' 'partition','& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Partition","Status"});
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue( driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to see the resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDFivePartitionsDefaultSiteChangedByAndStatusShowsUpInReport_094========================"+"<br>");
		
	}
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Created pool
	2. Select 'Status' as 'In Use'
	3. Select created  'Partition'  .
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchPoolPartitionAndStatusShowsUpInReport_095(){
		Reporter.log("ALM Global ID For this test Case:QCTP1B235222  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchPoolPartitionAndStatusShowsUpInReport_095========================"+"<br>");
		Reporter.log("Step 1 : create one 'securityPartitions' "+"<br>");
		String[] securityPartitions = addMultipleSecurityPartitions(1);
		
		Reporter.log("Step 2 : create one  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");		
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "In Use"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select pool in Search Criteria dropdown field > Select created pools >select Partition in Search Criteria dropdown field > Select created Partition > select Status in Search Criteria dropdown field > Select  Status as 'In Use'> Search"+"<br>");
		
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A and B and C");
		
		Reporter.log("Step 5 : Select 'Customize Output' as 'Pool' 'partition','& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Pool","Partition","Status"});
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Pool").equals(pool),"Not able to see the partition");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Status").equals("In Use"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchPoolPartitionAndStatusShowsUpInReport_095========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Three  pools Created 
	2. Select 'Status' as 'Available'
	3. Select Three 'Partition' Created  .
	*/
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchFourPoolPartitionDefaultSiteAndStatusShowsUpInReport_096(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235203  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchFourPoolPartitionDefaultSiteAndStatusShowsUpInReport_096========================");
	
		Reporter.log("Step 1 : create three 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(3);
		String[] securityPartitions = new String[4];
		
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 3);
		securityPartitions[3] = "Default Site";
			
		
		Reporter.log("Step 2 : create Three  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		Reporter.log("Step 4 : select pool in Search Criteria dropdown field > Select created pools >select Partitions in Search Criteria dropdown field > Select created Partitions > select Status in Search Criteria dropdown field > Select  Status as 'Available'> Search"+"<br>");
		
		
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A and B and C");
		
		Reporter.log("Step 5 : Select 'Customize Output' as 'Pool' 'partition','& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Pool","Partition","Status"});
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Pool").equals(pool),"Not able to see the partition");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Status").equals("Available"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchFourPoolPartitionDefaultSiteAndStatusShowsUpInReport_096========================");
		
	}
	
	
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Three  pools Created 
	2. Select 'Status' as 'Available'
	3. Select two 'Partitions' created and one as 'Default Site'
	4. Select 'Created Date'check box(Select 'since' as '8 hours ago' and 'until' as '6 months ago')
	*/
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchThreePoolThreePartitionsDefaultSiteCreateDateAndStatusShowsUpInReport_097(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235223  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchThreePoolThreePartitionsDefaultSiteCreateDateAndStatusShowsUpInReport_097========================"+"<br>");
	
		Reporter.log("Step 1 : create two 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(2);
		String[] securityPartitions = new String[3];
		
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 2);
		securityPartitions[2] = "Default Site";
		
		Reporter.log("Step 2 : create Three  Resource Identity Pools and add a Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(securityPartitions.length);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames, securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "Available"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select poos in Search Criteria dropdown field > Select created pools >select Partitions in Search Criteria dropdown field > Select created Partitions > select Status in Search Criteria dropdown field > Select  Status as 'Available'> Select 'Create Date' in Search Criteria dropdown field > Create Date as ( Select 'since' as '8 hours ago' and 'until' as '6 months ago') > Search"+"<br>");
		
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "since", "8 hours ago");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "until", "6 months ago");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A and B and C and D or E");
		
	
		Reporter.log("Step 5 : Select 'Customize Output' as 'Pool' 'partition','& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Partition ,Status'"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Pool","Partition","Status"});
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Pool").equals(pool),"Not able to see the partition");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Status").equals("Available"),"Not able to see the pool Name ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable, pool, "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchThreePoolThreePartitionsDefaultSiteCreateDateAndStatusShowsUpInReport_097========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Created pool
	2. Select 'Status' as 'Available'
	3. Select two 'Partitions' created and one as 'Default Site'
	4. Select 'Created Date'check box(Select 'since' as '8 hours ago' and 'until' as '6 months ago')
	5. Select Created customfield as 'contains ' & Enter the Customfield value
	*/
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDAndCustomAttributeShowsUpInReport_098(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235230  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDAndCustomAttributeShowsUpInReport_098========================"+"<br>");
		
		Reporter.log("Step 1 : create one 'securityPartitions' "+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Reporter.log("Step 2 : create one  Resource Identity Pools with customfield  and add a Resource 'ID's to it"+"<br>");
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
	
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		for(String id:idNames){
			NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", id);
		}
		Reporter.log("Step 5 : select Created  'Customfiled' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created custom Field value "+"<br>");
		for(String customField:customFields){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customField, "contains", customFieldsAndValues.get(customField));
		}
		
		Reporter.log("Step 6 : select Last Modified By  in Search Criteria dropdown field > Last Modified By as 'Contains' & Enter the text as 'admin' > Search"+"<br>");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedBy, "contains", "admin");
		
		NAUtils.changeResourceIdentityOperationName("contains");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A and B and C");
		
		
		Reporter.log("Step 7 : Select 'Customize Output' as 'Resource Identity' 'CustomField','& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Customfiled '"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, idsAndCustomFields.get(id)).equals(customFieldsAndValues.get(idsAndCustomFields.get(id))),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDAndCustomAttributeShowsUpInReport_098========================"+"<br>");
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select Resource identity as 'contains'
	2. Select Three pools created 
	3. Select Last modified By as 'contains' and Enter the text as 'admin'	
	4. Select Three  custom field  1) First custom field as  'does not contain' 2) second custom filed as ' equals' 3) Third custom filed as ' matches'  >  
	*/
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDPoolThreeCustomAttributeCreateByAndStatusShowsUpInReport_099(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235207  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDPoolThreeCustomAttributeCreateByAndStatusShowsUpInReport_099========================"+"<br>");
		
		
		Reporter.log("Step 1 : create three  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(3);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		String [] criterias = {"does not contain","equals","matches"};
		
		Reporter.log("Step 3 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
		
		Reporter.log("Step 4 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'does not contain' 2) second custom filed as ' equals' 3) third custom filed as ' matches'  >  " +"<br>");	
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], criterias[j], customFieldsAndValues.get(customFields[i]));
		}
		
		Reporter.log("Step 5 : select pool in Search Criteria dropdown field > Select created pools > now select 'Last Modified By' in Search Criteria dropdown field > Last Modified By as 'Contains' & Enter the text as 'admin' > Search"+"<br>");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedBy, "contains", "admin");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.changeResourceIdentityOperationName("contains");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D and E and F");
		
	
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity' 'CustomField','& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Customfiled '"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, idsAndCustomFields.get(id)).equals(customFieldsAndValues.get(idsAndCustomFields.get(id))),"Not able to see the partition");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDPoolThreeCustomAttributeCreateByAndStatusShowsUpInReport_099========================"+"<br>");
		
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'contains' & Enter the text as 'First time Created ID'   .
	2. Select Four pools created 
	3. Select Description  as 'contains' and Enter the text as 'created by Automation for'	
	4. Select Four  custom field  1) First custom field as  'does not contain' 2) second custom filed as ' equals' 3) Third custom filed as ' matches'  4) fourth custom filed as 'does not equal'   
	5. Select Status as 'Available'
	*/
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDTwoPoolFourCustomAttributeDescriptionAndStatusShowsUpInReport_100(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235186  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDTwoPoolFourCustomAttributeDescriptionAndStatusShowsUpInReport_100========================"+"<br>");
		
		Reporter.log("Step 1 : create Four  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(4);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "Available"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");	
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		String [] criterias = {"does not contain","equals","matches","does not equal"};
		Reporter.log("Step 3 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
		
		
		Reporter.log("Step 4 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'does not contain' 2) second custom filed as ' equals' 3) third custom filed as ' matches'  > 4) fourth custom filed as 'does not equal' " +"<br>");
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], criterias[j], customFieldsAndValues.get(customFields[i]));
		}
		
		Reporter.log("Step 5 : select pool in Search Criteria dropdown field > Select created pools > select Status in Search Criteria dropdown field > Select Status as 'Available' > now select 'Discription'  in Search Criteria dropdown field > Discription as 'Contains' & Enter the text as 'created by Automation for' > Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.description, "contains", "created by Automation for");
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		NAUtils.changeResourceIdentityOperationName("contains");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E and F and G and H");
		
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity', 'CustomField' , 'Description' '& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Customfiled '"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status","Description"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, idsAndCustomFields.get(id)).equals(customFieldsAndValues.get(idsAndCustomFields.get(id))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, "Description").contains("created by Automation for"),"Not able to see the description");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDTwoPoolFourCustomAttributeDescriptionAndStatusShowsUpInReport_100========================"+"<br>");
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'contains' & Enter the text as 'First time Created ID'   .
	2. Select Five pools created 
	3. Select five  custom field 1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value' 4)  fourth custom field as  'Contains' Enter the Text as 'created custom field value' 5)  fivth custom field as  'Contains' Enter the Text as 'created custom field value' 
	4. Select Status as 'In Use'
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDFivePoolThreeCustomAttributCreatedByChangedByAndStatusShowsUpInReport_101(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235184  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDFivePoolThreeCustomAttributCreatedByChangedByAndStatusShowsUpInReport_101========================"+"<br>");
		
		Reporter.log("Step 1 : create Five  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(5);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePoolsWithCustom(getPoolNameAndIds, idsAndCustomFields, customFieldsAndValues, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 2 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
	
		//String [] criterias = {"does not contain","equals","matches","does not equal","equals"};
		Reporter.log("Step 3 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
			
		Reporter.log("Step 4 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value' 4)  fourth custom field as  'Contains' Enter the Text as 'created custom field value' 5)  fivth custom field as  'Contains' Enter the Text as 'created custom field value'  >  " +"<br>");
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], "contains", customFieldsAndValues.get(customFields[i]));
		}
		Reporter.log("Step 5 : select pool in Search Criteria dropdown field > Select created pools > select Status in Search Criteria dropdown field > Select Status as 'In Use' >  select 'Created By'  in Search Criteria dropdown field > Created By as 'Contains' & Enter the text as 'admin' > now select 'Last Modified By'  in Search Criteria dropdown field > Last Modified  By as 'Contains' & Enter the text as 'admin' > Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createdByUserName, "contains", "admin");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedBy, "contains", "admin");
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		NAUtils.changeResourceIdentityOperationName("contains");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E or F and G and H and I and J");
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity', 'CustomField' , 'Description','pool','Created By','Last Modified By' '& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Customfiled '"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status","Description","Pool","Created By","Last Modified By"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String id:idNames){
			Assert.assertTrue(driver.findElements(By.linkText(id)).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, idsAndCustomFields.get(id)).equals(customFieldsAndValues.get(idsAndCustomFields.get(id))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, "Description").contains("created by Automation for"),"Not able to see the description");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, "Created By").equals("admin"),"Not able to see the description");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, "Last Modified By").equals("admin"),"Not able to see the description");
			Assert.assertTrue( webTable.getCellElement(searchResult.resourceIdentityResultsTable,id, "Status").equals("In Use"),"Not able to see the description");
			
		}
		
		Reporter.log("===============End testAdvanceSearchRIDFivePoolThreeCustomAttributCreatedByChangedByAndStatusShowsUpInReport_101========================"+"<br>");
		
		
	}
	

	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'does not equal' & Enter the text as 'First time Created ID'   .
	2. Select Five pools created 
	3. Select four 'Partitions' created and one as 'Default Site'
	4. Select five  custom field 1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value' 4)  fourth custom field as  'Contains' Enter the Text as 'created custom field value' 5)  fivth custom field as  'Contains' Enter the Text as 'created custom field value' 
	5. Select 'Created Date as (Select 'Since' as 'Anytime' & 'Until' as 'Anytime')
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDThreePoolsThreePartitionsDefaultSiteFiveCustomAttributCreateDateAndStatusShowsUpInReport_102(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235191  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDThreePoolsThreePartitionsDefaultSiteFiveCustomAttributCreateDateAndStatusShowsUpInReport_102========================"+"<br>");
		
		Reporter.log("Step 1 : create Four 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(4);
		String[] securityPartitions = new String[5];
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 4);
		securityPartitions[4] = "Default Site";
		Reporter.log("Step 2 : create Five  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(5);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
				
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePools(getPoolNameAndIds, getPoolNameAndPartition, idsAndCustomFields, customFieldsAndValues, null),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		//String [] criterias = {"does not contain","equals","matches","does not equal","equals"};
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'does not equal' > Enter above created Resource ID "+"<br>");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "does not equal", idNames[0]);
			
		Reporter.log("Step 5 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value' 4)  fourth custom field as  'Contains' Enter the Text as 'created custom field value' 5)  fivth custom field as  'Contains' Enter the Text as 'created custom field value'  >  " +"<br>");
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], "contains", customFieldsAndValues.get(customFields[i]));
		}
		
		Reporter.log("Step 6 : select pool in Search Criteria dropdown field > Select created pools > select Partition in Search Criteria dropdown field > Select Created Partitions >  select 'Created Date' in Criteria dropdown field > Select 'Created Date as (Select 'Since' as 'Anytime' & 'Until' as 'Anytime')'> Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "since", "Anytime");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "Until", "Anytime");
		NAUtils.changeResourceIdentityOperationName("does not equal");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E or F and G and H and I or J");
		
		Reporter.log("Step 7 : Select 'Customize Output' as 'Resource Identity', 'CustomField' , 'Description','pool','Created By' '& 'Status' >  Click on 'search'  and verify  'Resource Identity Pool and Customfiled '"  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status","Description","Pool","Created By"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), idsAndCustomFields.get(getPoolNameAndIds.get(pool))).equals(customFieldsAndValues.get(idsAndCustomFields.get(getPoolNameAndIds.get(pool)))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the description");
			
		}
		
		Reporter.log("===============End testAdvanceSearchRIDThreePoolsThreePartitionsDefaultSiteFiveCustomAttributCreateDateAndStatusShowsUpInReport_102========================"+"<br>");
		
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'does not equal' & Enter the text as 'First time Created ID'   .
	2. Select four pools created 
	3. Select four 'Partitions' created 
	4. Select four  custom field 1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value' 4)  fourth custom field as  'Contains' Enter the Text as 'created custom field value' 5)  fivth custom field as  'Contains' Enter the Text as 'created custom field value' 
	5. Select 'Last Modified  Date as (Select 'Since' as 'Anytime' & 'Until' as '24 hours ago')
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDFourPartitionsTwoCustomAttributLastModifiedDateChangedByAndStatusShowsUpInReport_103(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235228  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDFourPartitionsTwoCustomAttributLastModifiedDateChangedByAndStatusShowsUpInReport_103========================"+"<br>");
		
		Reporter.log("Step 1 : create Four 'securityPartitions' "+"<br>");
		String[] securityPartitions = addMultipleSecurityPartitions(4);
		
		Reporter.log("Step 2 : create Four  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(4);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
				
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePools(getPoolNameAndIds, getPoolNameAndPartition, idsAndCustomFields, customFieldsAndValues, null),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
			
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		String [] criterias = {"matches","contains","matches","contains"};
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
		Reporter.log("Step 5 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value' 4)  fourth custom field as  'Contains' Enter the Text as 'created custom field value'   >  " +"<br>");	
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], "contains", customFieldsAndValues.get(customFields[i]));
		}
		Reporter.log("Step 6 : select pool in Search Criteria dropdown field > Select created pools > select Status in Search Criteria dropdown field > Select Status as 'Available' >  select 'Partition'  in Search Criteria dropdown field > Select Created Partitions > now select 'Last Modified Date'  in Search Criteria dropdown field > Last Modified  Date(Select  'since' as 'Anytime' & 'until' as '24 hours ago'> Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedDate, "since", "Anytime");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedDate, "Until", "24 hours ago");
		Reporter.log("Step 7 : Check if upon 'step 4' 'Resource Identity' in Search Criteria dropdown field > Select filter as 'does not equal' > Enter above created Resource ID "+"<br>");
		NAUtils.changeResourceIdentityOperationName("does not equal");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E or F and G and H and I or J");
		
		Reporter.log("Step 8 : Select 'Customize Output' as 'Resource Identity', 'CustomField' , 'Description','pool','Created By','Last Modified By' '& 'Status' >  Click on 'search'  and verify  'Resource Identities' , 'Customfileds', 'pool', Status as 'Avialable' & Last Modified By as 'admin'"  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status","Description","Pool","Created By","Last Modified By"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue( driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the pool");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), idsAndCustomFields.get(getPoolNameAndIds.get(pool))).equals(customFieldsAndValues.get(idsAndCustomFields.get(getPoolNameAndIds.get(pool)))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the description");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Last Modified By").equals("admin"),"Not able to see the description");
		}
		
		Reporter.log("===============End testAdvanceSearchRIDFourPartitionsTwoCustomAttributLastModifiedDateChangedByAndStatusShowsUpInReport_103========================"+"<br>");
		
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'contains' & Enter the text as 'First time Created ID'   .
	2. Select three pools created 
	3. Select three 'Partitions' created 
	4. Select Three  custom field 1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value' 4)  fourth custom field as  'Contains' Enter the Text as 'created custom field value' 5)  fivth custom field as  'Contains' Enter the Text as 'created custom field value' 
	5. Select 'Create  Date as (Select 'Since' as '48 hours ago' & 'Until' as '2 weeks ago')
	6. Select Status as 'Available'
	*/
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDFourPartitionsDefaultSiteThreeCustomAttributChangedByCreatedDateAndStatusShowsUpInReport_104(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235188  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDFourPartitionsDefaultSiteThreeCustomAttributChangedByCreatedDateAndStatusShowsUpInReport_104========================"+"<br>");
		
		Reporter.log("Step 1 : create two 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(2);
		String[] securityPartitions = new String[3];
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 2);
		securityPartitions[2] = "Default Site";
		
		Reporter.log("Step 2 : create Three  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(3);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
				
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePools(getPoolNameAndIds, getPoolNameAndPartition, idsAndCustomFields, customFieldsAndValues, null),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		String [] criterias = {"matches","contains","equals"};
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
		Reporter.log("Step 5 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value'    >  " +"<br>");
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], "contains", customFieldsAndValues.get(customFields[i]));
		}
		
		Reporter.log("Step 6 :  select Partition in Search Criteria dropdown field > Select created Partitions >select Status in Search Criteria dropdown field > Select Status as 'Available' > select Last Modified By in Search Criteria dropdown field > Select created Last Modified as 'contains' & enter the text as 'admin' >  now select 'Created Date'  in Search Criteria dropdown field > Created  Date(Select  'since' as '48 hours ago' & 'until' as '2 Weeks ago'> Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "Available");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedBy, "contains", "admin");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "since", "48 hours ago");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "Until", "2 weeks ago");
		NAUtils.changeResourceIdentityOperationName("contains");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D and E and F and G and H or I");
		
		Reporter.log("Step 8 : Select 'Customize Output' as 'Resource Identity', 'CustomField' , 'Description','pool','Created By','Last Modified By' '& 'Status' >  Click on 'search'  and verify  'Resource Identities' , 'Customfileds', , Status as 'Avialable' & Last Modified By as 'admin' & Partitions "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status","Partition","Last Modified By"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), idsAndCustomFields.get(getPoolNameAndIds.get(pool))).equals(customFieldsAndValues.get(idsAndCustomFields.get(getPoolNameAndIds.get(pool)))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("Available"),"Not able to see the Status");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Last Modified By").equals("admin"),"Not able to see the description");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the Partition");

		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDFourPartitionsDefaultSiteThreeCustomAttributChangedByCreatedDateAndStatusShowsUpInReport_104========================"+"<br>");
		
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'contains' & Enter the text as 'First time Created ID'   .
	2. Select two pools created 
	3. Select two 'Partitions' created 
	4. Select Two  custom field 1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) third custom filed as 'Contains' Enter the Text as 'created custom field value' 4)  fourth custom field as  'Contains' Enter the Text as 'created custom field value' 5)  fivth custom field as  'Contains' Enter the Text as 'created custom field value' 
	5. select Last Modified Date in Search Criteria dropdown field >  Last Modified Date as (Select 'since' as '24 hours ago' & 'until' as '2 months ago')
	6. select 'Created Date'  in Search Criteria dropdown field > Created  Date(Select  'since' as '24 hours ago ' & 'until' as '1 month ago'>
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDTwoPartitionsTwoCustomAttributeCreatedDateLastModifiedDateAndStatusShowsUpInReport_105(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235209  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDTwoPartitionsTwoCustomAttributeCreatedDateLastModifiedDateAndStatusShowsUpInReport_105========================");
		Reporter.log("Step 1 : create two 'securityPartitions' "+"<br>");
		String[] securityPartitions = addMultipleSecurityPartitions(2);
		
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(2);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Reporter.log("Step 2 : create two  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
				
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePools(getPoolNameAndIds, getPoolNameAndPartition, idsAndCustomFields, customFieldsAndValues, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");		
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
			
		Reporter.log("Step 5 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value'  >  " +"<br>");
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], "contains", customFieldsAndValues.get(customFields[i]));
		}
		
		Reporter.log("Step 6 :  select Partition in Search Criteria dropdown field > Select created Partitions >select Status in Search Criteria dropdown field > Select Status as 'In Use' > select Last Modified Date in Search Criteria dropdown field >  Last Modified Date as (Select 'since' as '24 hours ago' & 'until' as '2 months ago') >  now select 'Created Date'  in Search Criteria dropdown field > Created  Date(Select  'since' as '24 hours ago ' & 'until' as '1 month ago'> Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedDate, "since", "24 hours ago");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedDate, "Until", "2 months ago");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "since", "24 hours ago");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "Until", "1 month ago");
		NAUtils.changeResourceIdentityOperationName("contains");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C and D and E and F or G or H or I");
		
		
		Reporter.log("Step 7 : Select 'Customize Output' as 'Resource Identity', 'CustomField' , 'Description','Last Modified By' '& 'Status' >  Click on 'search'  and verify  'Resource Identities' , 'Customfileds', , Status as 'Avialable' & Last Modified By as 'admin' & Partitions "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status","Partition","Last Modified By"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), idsAndCustomFields.get(getPoolNameAndIds.get(pool))).equals(customFieldsAndValues.get(idsAndCustomFields.get(getPoolNameAndIds.get(pool)))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the Status");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Last Modified By").equals("admin"),"Not able to see the description");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the Partition");

		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDTwoPartitionsTwoCustomAttributeCreatedDateLastModifiedDateAndStatusShowsUpInReport_105========================");
		
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'contains' & Enter the text as 'First time Created ID'   .
	2. Select five pools created 
	3. Select four 'Partitions' created and one as 'Default Site'
	4. Select five  custom field 1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) second custom filed  as 'Contains' Enter the Text as 'created custom field value'  4) four custom filed  as 'Contains' Enter the Text as 'created custom field value'   5) Five custom filed  as 'Contains' Enter the Text as 'created custom field value'  ' 
	5. select Last Modified By as does not contain'
	6. select 'created By'  as 'does not contain'>
	7. Select 'Status' as 'In Use'
	*/
	
	
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDFivePartitionsDefaultSiteFourCustomAttributeLastModifiedByAndStatusShowsUpInReport_106(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235190 "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDFivePartitionsDefaultSiteFourCustomAttributeLastModifiedByAndStatusShowsUpInReport_106========================"+"<br>");
		
		Reporter.log("Step 1 : create Four 'securityPartitions' "+"<br>");
		String[] securityPartitionsTemp = addMultipleSecurityPartitions(4);
		String[] securityPartitions = new String[5];
		System.arraycopy(securityPartitionsTemp, 0, securityPartitions, 0, 4);
		securityPartitions[4] = "Default Site";
		
		Reporter.log("Step 2 : create five  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(5);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
				
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePools(getPoolNameAndIds, getPoolNameAndPartition, idsAndCustomFields, customFieldsAndValues, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");		
				
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
		
		Reporter.log("Step 5 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) Third custom filed  as 'Contains' Enter the Text as 'created custom field value'  4) four custom filed  as 'Contains' Enter the Text as 'created custom field value'   5) Five custom filed  as 'Contains' Enter the Text as 'created custom field value'   >  " +"<br>");
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], "contains", customFieldsAndValues.get(customFields[i]));
		}
		
		Reporter.log("Step 6 :  select Partition in Search Criteria dropdown field > Select created Partitions >select Status in Search Criteria dropdown field > Select Status as 'In Use' > select Last Modified By in Search Criteria dropdown field >  Last Modified By  as 'does not contains'>  select Last Created By in Search Criteria dropdown field >  Select Created By  as 'does not contains' Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createdByUserName, "does not contain", "admin1");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.lastModifiedBy, "does not contain", "admin1");
		NAUtils.changeResourceIdentityOperationName("contains");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E or F and G and H and I");
		
	
		Reporter.log("Step 7 : Select 'Customize Output' as 'Resource Identity', 'CustomField' , 'Description','Last Modified By' '& 'Status' >  Click on 'search'  and verify  'Resource Identities' , 'Customfileds', , Status as 'In Use' & Last Modified By as 'admin' & Partitions "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Status","Partition","Last Modified By"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), idsAndCustomFields.get(getPoolNameAndIds.get(pool))).equals(customFieldsAndValues.get(idsAndCustomFields.get(getPoolNameAndIds.get(pool)))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the Status");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Last Modified By").equals("admin"),"Not able to see the created by");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the Partition");

		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDFivePartitionsDefaultSiteFourCustomAttributeLastModifiedByAndStatusShowsUpInReport_106========================"+"<br>");
		
		
	}
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'contains' & Enter the text as 'First time Created ID'   .
	2. Select three pools created 
	3. Select three 'Partitions' created 
	4. Select three  custom field 1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) second custom filed  as 'Contains' Enter the Text as 'created custom field value'  4) four custom filed  as 'Contains' Enter the Text as 'created custom field value'   5) Five custom filed  as 'Contains' Enter the Text as 'created custom field value'  ' 
	5. select 'created By'  as 'contain' & Enter the text as 'admin'>
	6. Select 'Status' as 'In Use'
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDThreePoolsThreePartitionsThreeCustomAttributeCreatedByAndStatusShowsUpInReport_107(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235187 "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDThreePoolsThreePartitionsThreeCustomAttributeCreatedByAndStatusShowsUpInReport_107========================"+"<br>");
		Reporter.log("Step 1 : create Three 'securityPartitions' "+"<br>");
		String[] securityPartitions = addMultipleSecurityPartitions(3);
		
		Reporter.log("Step 2 : create Three  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(3);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
				
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePools(getPoolNameAndIds, getPoolNameAndPartition, idsAndCustomFields, customFieldsAndValues, "In Use"),"Not able to create Multiple pools with partition ");
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");	
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
		Reporter.log("Step 5 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) Third custom filed  as 'Contains' Enter the Text as 'created custom field value'  >  " +"<br>");
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], "contains", customFieldsAndValues.get(customFields[i]));
		}
		
		Reporter.log("Step 6 :  select Partition in Search Criteria dropdown field > Select created Partitions >select Status in Search Criteria dropdown field > Select Status as 'In Use' > select Pool  in Search Criteria dropdown field >  select created pools >  select  Created By in Search Criteria dropdown field >  Select Created By  as 'contains' and Enter the text as 'admin' > Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAvailableOrInUse(advanceSearch.status, "In Use");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createdByUserName, "contains", "admin");
		NAUtils.changeResourceIdentityOperationName("contains");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D and E and F and G and H");
		
		
		Reporter.log("Step 7 : Select 'Customize Output' as 'Resource Identity', 'pool', 'CustomField' , 'Created By' '& 'Status' >  Click on 'search'  and verify  'Resource Identities' , 'Customfileds', , Status as 'In Use' & Created By as 'admin' & Partitions "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool","Status","Partition","Created By"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), idsAndCustomFields.get(getPoolNameAndIds.get(pool))).equals(customFieldsAndValues.get(idsAndCustomFields.get(getPoolNameAndIds.get(pool)))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool),"Pool" ).equals(pool),"Not able to see the Pool");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the Status");
			Assert.assertTrue( webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Created By").equals("admin"),"Not able to see created by ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the Partition");

		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDThreePoolsThreePartitionsThreeCustomAttributeCreatedByAndStatusShowsUpInReport_107========================"+"<br>");
		
	}

	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'contains' & Enter the text as 'First time Created ID'   .
	2. Select Five pools created 
	3. Select Five 'Partitions' created 
	4. Select Five  custom field 1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) second custom filed  as 'Contains' Enter the Text as 'created custom field value'  4) four custom filed  as 'Contains' Enter the Text as 'created custom field value'   5) Five custom filed  as 'Contains' Enter the Text as 'created custom field value'  ' 
	5. select 'created Date' as  (Select 'since' as 'Anytime' & 'until' as 'Anytime')
	
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDFivePoolsFivePartitionsFiveCustomAttributeCreateDateAndStatusShowsUpInReport_108(){
		Reporter.log("ALM Global ID For this test Case:QCTP1B235197  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDFivePoolsFivePartitionsFiveCustomAttributeCreateDateAndStatusShowsUpInReport_108========================"+"<br>");
		Reporter.log("Step 1 : create Five 'securityPartitions' "+"<br>");
		String[] securityPartitions = addMultipleSecurityPartitions(5);
		
		Reporter.log("Step 2 : create five  Resource Identity Pools with customfield  and add Resource 'ID's to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(5);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
				
		Map<String,String> customFieldsAndValues = addMultipleCustomFieldsAndValues(getPoolNameAndIds.size());
		String[] customFields = customFieldsAndValues.keySet().toArray(new String[customFieldsAndValues.size()]);
		
		Map<String, String> idsAndCustomFields = getidsAndCustomFields(idNames, customFields);
		
		Assert.assertTrue(createMultiplePools(getPoolNameAndIds, getPoolNameAndPartition, idsAndCustomFields, customFieldsAndValues, "In Use"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");		
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
		
		Reporter.log("Step 5 : Select  custom fileds in Search Criteria dropdown field  as  1) First custom field as  'Contains' Enter the Text as 'created custom field value' 2) second custom filed  as 'Contains' Enter the Text as 'created custom field value' 3) Third custom filed  as 'Contains' Enter the Text as 'created custom field value'  4) Four custom filed  as 'Contains' Enter the Text as 'created custom field value'   5) Five custom filed  as 'Contains' Enter the Text as 'created custom field value'   >  " +"<br>");
		for(int i=0,j=0;i<customFields.length;i++,j++){
			NAUtils.enterAdvanceSearchCriteriaAndText(true,customFields[i], "contains", customFieldsAndValues.get(customFields[i]));
		}
		
		Reporter.log("Step 6 :  select Partition in Search Criteria dropdown field > Select created Partitions > select Pool  in Search Criteria dropdown field >  select created pools >  select  Created Date in Search Criteria dropdown field >  Select CreateDate (Select 'since' as 'Anytime' & 'until' as 'Anytime') > Search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "since", "Anytime");
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.createDate, "Until", "Anytime");
		NAUtils.changeResourceIdentityOperationName("contains");
		
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D or E or F and G and H and I and J");
		
		Reporter.log("Step 7 : Select 'Customize Output' as 'Resource Identity','pool', 'CustomField','Created By' '& 'Status' >  Click on 'search'  and verify  'Resource Identities' , 'Customfileds', , Status as 'In Use' & Created By as 'admin' & Partitions "  +"<br>");
		
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool","Status","Partition","Created By"});
		common.selectOptions(advanceSearch.selectedFields, customFields);
		
		// Step 4
		
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), idsAndCustomFields.get(getPoolNameAndIds.get(pool))).equals(customFieldsAndValues.get(idsAndCustomFields.get(getPoolNameAndIds.get(pool)))),"Not able to see the custom field");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the Pool");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the Status");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Created By").equals("admin"),"Not able to see created by ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the Partition");

		}
		
		
		Reporter.log("===============End testAdvanceSearchRIDFivePoolsFivePartitionsFiveCustomAttributeCreateDateAndStatusShowsUpInReport_108========================"+"<br>");
		
	}
	
	
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'contains' & Enter the text as 'First time Created ID'   .
	2. Select  created  pool. 
	3. Select 'Partitions' as 'Default Site'
	4. select Status as 'In Use'	
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDContainsPartitionDefaultPoolAndStatusShowsUpInReport_109(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235229  "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDContainsPartitionDefaultPoolAndStatusShowsUpInReport_109========================"+"<br>");
		
		Reporter.log("Step 1 : create one 'securityPartition' as 'Deafault Site' "+"<br>");
		String[] securityPartitions = {"Default Site"};
		
		Reporter.log("Step 2 : create one  Resource Identity Pool  and add Resource 'ID' to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "In Use"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'contains' > Enter above created Resource ID "+"<br>");
				
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "contains", idNames[0]);
			
		
		Reporter.log("Step 5 :  select Partition in Search Criteria dropdown field > Select  Partition  as 'Default Site'> select Pool  in Search Criteria dropdown field >  select created pools >select Status  in Search Criteria dropdown field >  select Status as 'In Use' > search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAvailableOrInUse("Status", "In Use");
		NAUtils.changeResourceIdentityOperationName("contains");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A and B and C and D");
		
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity','pool', Partition '& 'Status' >  Click on 'search'  and verify  'Resource Identities', 'Pool', 'Status' as 'In Use'  & Partitions "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool","Status","Partition"});
		
		
		// Step 6
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the Pool");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the Status");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the Partition");

		}
		
		Reporter.log("===============End testAdvanceSearchRIDContainsPartitionDefaultPoolAndStatusShowsUpInReport_109========================"+"<br>");
		
		
	}
	/*Perform Advance Search for 'Resource Identity Pool' with below Search Criteria:
	Search Criteria: 
	1. Select  Resource identity as 'does not contain' & Enter the text as 'First time Created ID'   .
	2. Select  created  pool. 
	3. Select 'Partitions' as 'Default Site'
	4. select Status as 'In Use'	
	*/
	
	@Test (enabled = true, groups= {"ART"})
	public void testAdvanceSearchRIDDoesNotContainPartitionDefaultPoolAndStatusShowsUpInReport_110(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235201 "+"<br>");
		Reporter.log("===============Start testAdvanceSearchRIDDoesNotContainPartitionDefaultPoolAndStatusShowsUpInReport_110========================"+"<br>");
		
		Reporter.log("Step 1 : create one 'securityPartition' as 'Deafault Site' "+"<br>");
		String[] securityPartitions = {"Default Site"};
		
		
		Reporter.log("Step 2 : create one  Resource Identity Pool  and add Resource 'ID' to it"+"<br>");
		Map<String,String> getPoolNameAndIds = getPoolNameAndIds(1);
		String[] poolNames = getPoolNameAndIds.keySet().toArray(new String[getPoolNameAndIds.size()]);
		String[] idNames = getPoolNameAndIds.values().toArray(new String[getPoolNameAndIds.size()]);
		
		Map<String,String> getPoolNameAndPartition = getPoolNameAndPartition(poolNames,securityPartitions);
		
		Assert.assertTrue(createMultiplePoolsWithPartition(getPoolNameAndIds, getPoolNameAndPartition, "In Use"),"Not able to create Multiple pools with partition ");
		
		
		Reporter.log("Step 3 : Navigate > Reports > AdvancedSearch"  +"<br>");
		Navigate.Reports.AdvancedSearch();
		ResourceIdentityPoolAdvanceSearchPage advanceSearch = new ResourceIdentityPoolAdvanceSearchPage();
		ResourceIdentitySearchResultsPage searchResult =  new ResourceIdentitySearchResultsPage();
		prerequisites();
		
		
		Reporter.log("Step 4 : select 'Resource Identity' in Search Criteria dropdown field > Select filter as 'does not contain' > Enter above created Resource ID "+"<br>");		
		NAUtils.enterAdvanceSearchCriteriaAndText(true, advanceSearch.resourceIdentity, "does not contain", idNames[0]);
		
		Reporter.log("Step 5 :  select Partition in Search Criteria dropdown field > Select  Partition  as 'Default Site'> select Pool  in Search Criteria dropdown field >  select created pools >select Status  in Search Criteria dropdown field >  select Status as 'In Use' > search"+"<br>");
		NAUtils.selectAdvanceSearchListItems(advanceSearch.partition, securityPartitions);
		NAUtils.selectAdvanceSearchListItems(advanceSearch.poolName, poolNames);
		NAUtils.selectAvailableOrInUse("Status", "In Use");
		NAUtils.changeResourceIdentityOperationName("does not contain");
		
		driver.findElement(By.name("expression")).clear();
		driver.findElement(By.name("expression")).sendKeys("A or B or C or D");
		
		
		Reporter.log("Step 6 : Select 'Customize Output' as 'Resource Identity','pool', Partition '& 'Status' >  Click on 'search'  and verify  'Resource Identities', 'Pool', 'Status' as 'In Use'  & Partitions "  +"<br>");
		common.deselectOptions(advanceSearch.selectedFields, advanceSearch.defaultSelectedFields);
		common.selectOptions(advanceSearch.selectedFields, new String[]{"Resource Identity","Pool","Status","Partition"});
		
		
		// Step 6
		common.search();
		common.pageSizeOption("All");
		
		for(String pool:poolNames){
			Assert.assertTrue(driver.findElements(By.linkText(getPoolNameAndIds.get(pool))).size()>0,"Not able to find resource id ");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Pool").equals(pool),"Not able to see the Pool");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Status").equals("In Use"),"Not able to see the Status");
			Assert.assertTrue(webTable.getCellElement(searchResult.resourceIdentityResultsTable,getPoolNameAndIds.get(pool), "Partition").equals(getPoolNameAndPartition.get(pool)),"Not able to see the Partition");

		}
		
		Reporter.log("===============End testAdvanceSearchRIDDoesNotContainPartitionDefaultPoolAndStatusShowsUpInReport_110========================"+"<br>");
		
	}
	
	
	
	public String[] addMultipleSecurityPartitions(int numberOfSecurityPartitions){
		
		String[] securityPartitions = new String[numberOfSecurityPartitions];
		for(int i=0;i<numberOfSecurityPartitions;i++){
			securityPartitions[i] = NAUtils.addNewSecurityPartition();
		}
		return securityPartitions;
	}
	
	public Map<String, String> addMultipleCustomFieldsAndValues(int numberOfCustomFields){
		
		Map<String, String> customFieldValues = new HashMap<String, String>();
		String customField;
		for(int i=0;i<numberOfCustomFields;i++){
			customField = common.generateRandomString();
			Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(customField),"Not able to create custom Fields ");
			customFieldValues.put(customField, common.generateRandomString());
		}
		return customFieldValues;
	}
	
	public Map<String, String> getPartitionAndIds(String[] securityPartitions,String[] ids){
		
		Map<String,String> idsAndParition = new HashMap<String,String>();
		for(int i=0;i<securityPartitions.length;i++){
			idsAndParition.put(securityPartitions[i],ids[i]);
		}
		return idsAndParition;
	}
	
	public Map<String,String> getPoolNameAndPartition(String[] poolNames, String[] securityPartitions){
		
		Map<String, String> poolNamesAndPartitions = new HashMap<String, String>();
		for(int i=0;i<securityPartitions.length;i++){
			poolNamesAndPartitions.put(poolNames[i], securityPartitions[i]);
		}
		return poolNamesAndPartitions;
				
	}
	
	public Map<String,String> getPoolNameAndIds(int numberOfPools){
				
		Map<String,String> poolNamesAndIds = new HashMap<String,String>();
		for(int i=0;i<numberOfPools;i++){
			poolNamesAndIds.put(common.generateRandomString(), common.generateRandomString());
		}
		return poolNamesAndIds;
	}
	
	public Map<String, String> getidsAndCustomFields(String[] ids, String[] customFields){
		
		Map<String,String> idsAndCustomFields = new HashMap<String, String>();
		if(ids.length == customFields.length){
			for(int i=0;i<customFields.length;i++){
				idsAndCustomFields.put(ids[i], customFields[i]);
			}
		}
		return idsAndCustomFields;
	}
	
		
	public boolean createMultiplePoolsWithIds(Map<String,String> poolNameIds,String status){
		return createMultiplePools(poolNameIds,null,null,null,status);
	}
	
	public boolean createMultiplePoolsWithCustom(Map<String,String> poolNameIds, Map<String,String> idsAndCustomVariables ,Map<String, String> customFieldsAndValues, String status){
		return createMultiplePools(poolNameIds, null, idsAndCustomVariables, customFieldsAndValues, status);
	}
	
	public boolean createMultiplePoolsWithPartition(Map<String, String> poolNameIds, Map<String, String> poolNamesPartitions, String status){
		return createMultiplePools(poolNameIds, poolNamesPartitions, null, null, status);
	}
	
	public boolean createMultiplePools(Map<String, String> poolNameIds,Map<String, String> poolNamesPartitions,Map<String,String> idsCustomVariables, Map<String,String> customVariablesCustomValues, String status){
		
		String[] partitions =null;
		String[] customVariables = null;
		String[] customValues = null;
		
		boolean resourcePoolFlag=false;
		boolean partitionFlag =false;
		boolean customVariableFlag = false;
		
		
		String[] poolNames = poolNameIds.keySet().toArray(new String[poolNameIds.size()]);
		String[] ids = poolNameIds.values().toArray(new String[poolNameIds.size()]);
				
		if(poolNamesPartitions!=null){
			partitions = (String[])poolNamesPartitions.values().toArray(new String[poolNamesPartitions.size()]);
			partitionFlag = true;
		}
		if(customVariablesCustomValues !=null && idsCustomVariables !=null){
			customVariables = customVariablesCustomValues.keySet().toArray(new String[customVariablesCustomValues.size()]);
			customValues = customVariablesCustomValues.values().toArray(new String[customVariablesCustomValues.size()]);
			customVariableFlag = true;
		}
		
		for(int i=0;i<poolNames.length;i++){
			
			if(partitionFlag && customVariableFlag){
				resourcePoolFlag = NAUtils.createResourceIdentityPools(poolNames[i],null,poolNamesPartitions.get(poolNames[i]),new String[] {idsCustomVariables.get(poolNameIds.get(poolNames[i]))});
				Assert.assertTrue(NAUtils.addResourceIDsToPoolCustom(poolNames[i], poolNameIds.get(poolNames[i]), status, customVariablesCustomValues.get(idsCustomVariables.get(poolNameIds.get(poolNames[i]))), null),"Not able to add resouce Ids");
			}else if(partitionFlag && !customVariableFlag){
				resourcePoolFlag = NAUtils.createResourceIdentityPools(poolNames[i],null,poolNamesPartitions.get(poolNames[i]),null);
				Assert.assertTrue(NAUtils.addResourceIDsToPool(poolNames[i], poolNameIds.get(poolNames[i]), status),"Not able to add resouce Ids");
			}else if(customVariableFlag && !partitionFlag){
				resourcePoolFlag = NAUtils.createResourceIdentityPools(poolNames[i],null,null,new String[]{idsCustomVariables.get(poolNameIds.get(poolNames[i]))});
				Assert.assertTrue(NAUtils.addResourceIDsToPoolCustom(poolNames[i], poolNameIds.get(poolNames[i]), status, customVariablesCustomValues.get(idsCustomVariables.get(poolNameIds.get(poolNames[i]))) , null),"Not able to add resouce Ids");
				System.out.println("Value of resourcePoolFlage is "+resourcePoolFlag);
			}else{
				resourcePoolFlag = NAUtils.createResourceIdentityPools(poolNames[i], null, null, null);
				Assert.assertTrue(NAUtils.addResourceIDsToPool(poolNames[i], poolNameIds.get(poolNames[i]), status),"Not able to add resouce Ids");
			}
		}
		
		if(resourcePoolFlag){
			return true;
		}
		return false;
	}
	
	
	
	private void prerequisites() {
		
		driver.findElement(By.name("queryName")).sendKeys("Resource Identity");
		/*driver.findElement(
				By.xpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[4]/td/table/tbody/tr/td/div/table/tbody/tr[2]/td/select"))
				.sendKeys("Partition");*/
		driver.findElement(By.name("addCriteria")).sendKeys("Partition");
		common.sleep(5000);
		
		Select select = new Select(driver.findElement(By.name("selectedFields")));
		
		List<WebElement> options = select.getOptions();
		System.out.println("Options size is "+options.size());
		while(options.size()==0){
			System.out.println("Options size is zero"+ options.size());
			common.home();
			Navigate.Reports.AdvancedSearch();
			driver.findElement(By.name("queryName")).sendKeys("Resource Identity");
			/*driver.findElement(
					By.xpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[4]/td/table/tbody/tr/td/div/table/tbody/tr[2]/td/select"))
					.sendKeys("Partition");*/
			driver.findElement(By.name("addCriteria")).sendKeys("Partition");
			common.sleep(5000);
			
			select = new Select(driver.findElement(By.name("selectedFields")));
			options = select.getOptions();
			System.out.println("Options size is zero--- end"+ options.size());
		}

	}
	
	 @AfterMethod(enabled = true, groups = {"BAT", "ART"})
	  public void logout()
	  {
	  	try {
			login.logOut();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	  
	  	driver.quit();
	  	driver=null;
	  	
	  }
		 
}
