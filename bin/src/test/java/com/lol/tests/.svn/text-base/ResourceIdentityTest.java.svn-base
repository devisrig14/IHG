package test.java.com.hp.fc.usa.nmc.na.tests;

import org.testng.annotations.AfterMethod;
import org.testng.annotations.Listeners;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.Assert;
import org.testng.Assert;
import org.testng.Reporter;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import test.java.com.hp.fc.usa.nmc.na.listener.GenerateCustomReport;
import test.java.com.hp.fc.usa.nmc.na.pages.NewUserRole;
import test.java.com.hp.fc.usa.nmc.na.pages.ResourceIdentityPoolAddPage;
import test.java.com.hp.fc.usa.nmc.na.pages.ResourceIdentityPoolsPage;
import test.java.com.hp.fc.usa.nmc.na.pages.SecurityPartitionsPage;
import test.java.com.hp.fc.usa.nmc.na.pages.ResourceIdentitySearchPage;



@Listeners(GenerateCustomReport.class)
public class ResourceIdentityTest extends TestExecutor{
	
	WebElement table=null;
	List<WebElement> rows = null;
	String workingdirectory = System.getProperty("user.dir");
	String inputDirectory = workingdirectory+"\\src\\test\\java\\input";
	
	@BeforeMethod(enabled = true, groups = {"BAT", "ART"})
	public void startTest() throws IOException, InterruptedException{
		initialize();
		
		driver.get("http://"+System.getProperty("naIpAddress"));
		
		if(common.checkExistenceOfOverridelink())
		{
			common.getObjectById("overridelink").click();
			Thread.sleep(3000);			
		}
		//driver.navigate().to("javascript:document.getElementById('overridelink').click();");
		
		login.loginAsUser("admin");
		if(!isLoggedIn){
			System.out.println("Invalid Username/password");
			Assert.assertTrue( false,"Not able to login to NA Server");
			// report error
		}
		driver.manage().window().maximize();
		
	}
	
	/*Nrao- Step Description
	  	Step 1: Go to Admin > Enhanced Custom Fields Setup
		Step 2: Change Drop down value of Enhanced Custom Field to Resource Identities
		Step 3: Click on the link New Custom resource identities Field
		Step 4: Verify if the Page title contains"New Custom Data Field" or not
	*/
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyIdentityInEnhancedCustomFields_001() {
		
		Reporter.log("ALM Global ID For this test Case: QCTP1B235279   "+"<br>");
		Reporter.log("===============Start testVerifyIdentityInEnhancedCustomFields_001========================"+"<br>");
		prerequisites();
		
/*		//  Nrao- Repeated the same in Below Step as well.
 		Step 2  Admin> "Enhanced Custom Fields Setup"
		Reporter.log("***********Step 2**********");
		driver.findElement(By.id("dijit_PopupMenuBarItem_4_text")).click();
		table = driver.findElement(By.xpath("html/body/div[3]/table"));
		rows = table.findElements(By.tagName("tr"));
		Reporter.log("row size is "+rows.size());
		for(int i =0;i<rows.size();i++){
			System.out.println("hi : "+i+" : "+rows.get(i).getText());
			if(rows.get(i).getText().equals("Enhanced Custom Fields Setup")){
				Assert.assertEquals(rows.get(i).getText().trim(), "Enhanced Custom Fields Setup");
				break;
			}
		}*/
		
		
		Reporter.log("Step 1: Go to Admin > Enhanced Custom Fields Setup"+"<br>");
		Navigate.Admin.EnhancedCustomerFieldSetup();
		Assert.assertTrue(driver.getTitle().contains("Enhanced Custom Fields Setup"));
		
		
		Reporter.log("Step 2: Change Drop down value of Enhanced Custom Field to Resource Identities"+"<br>");
		Select select = new Select(driver.findElement(By.xpath("//select[@id='picktable']")));
		List<WebElement> options = select.getOptions();
		select.selectByVisibleText("Resource Identities");
		driver.findElement(By.xpath("html/body/table[1]/tbody/tr/td[2]/div[3]/table[1]/tbody/tr/td[2]/a[1]")).getText();
		
		Reporter.log("Step 3: Click on the link New Custom resource identities Field"+"<br>");
		driver.findElement(By.xpath("//a[contains(@href,'RN_RESOURCE_IDENTITY')]")).click();
		Reporter.log("Page title is : "+driver.getTitle()+"<br>");
		
		Reporter.log("Step 4: Verify if the Page title contains "+"'"+"New Custom Data Field"+"'"+" or not"+"<br>");
		Assert.assertTrue(driver.getTitle().contains("New Custom Data Field"));

		Reporter.log("===============End testVerifyIdentityInEnhancedCustomFields_001========================"+"<br>");
		
	}
	
	/*Nrao- Go to "Admin" > Enhanced Custom Fields Setup > Select "Enhanced Custom Field" as "Resource Identities" 
	> click on the link "New Custom resource identities Field" > Add 5 "New Custom Data Fields".
	*/
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyIdentityLimitations_002(){
		
		Reporter.log("ALM Global ID For this test Case: QCTP1B235278   "+"<br>");
		Reporter.log("===============Start testVerifyIdentityLimitations_002========================"+"<br>");
		
		prerequisites();
		
		Reporter.log("Step 1: Go to Admin > Enhanced Custom Fields Setup > Change Drop down value of Enhanced Custom Field to Resource Identities > Click on the link New Custom resource identities Field > Create One New Custom Data Field "+"<br>");
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs());
		
		// Step 5  -- Limit the creation of RID to 5
		
		Reporter.log("Creating 5 more New Custom Data Fields"+"<br>");
		for(int i=0;i<5;i++){
			Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs());
		}
		
		Reporter.log("===============End testVerifyIdentityLimitations_002========================"+"<br>");
		
	}
	
	/*Nrao- 
	  Step 1: Go to "Admin" > Enhanced Custom Fields Setup 
	  Step 2: Select "Enhanced Custom Field" as "Resource Identities" 
	  Step 3: click on the link "New Custom resource identities Field" 
	  Step 4: Create New Custom Data Field with out selecting the check box "Allow HTML"
	  Step 5: Create New Custom Data Field upon selecting the check box "Allow HTML"
	  Step 6: Go to "Devices" > Devices tools> Resource Identity Pools > Create a Pool upon selecting above created 2 Custom fields
	  Step 7: Click on Add IDs link that is related to above created Pool > Add a New ID.
	  Step 8: Create New Custom Data Field with out selecting the check boxes 'Enabled' & Allow HTML
	  Step 9: Go to Devices > Devices tools> Resource Identity Pools > Create a Pool upon selecting above created Custom field
	*/
	
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyOtherSettingsCustomData_003(){
		
		Reporter.log("ALM Global ID For this test Case: QCTP1B235256  "+"<br>");
		Reporter.log("===============Start testVerifyOtherSettingsCustomData_003========================"+"<br>");
				
		prerequisites();
		
		 
		Reporter.log("Step 1: Go to Admin > Enhanced Custom Fields Setup"+"<br>");
		Navigate.Admin.EnhancedCustomerFieldSetup();
		
		Reporter.log("Step 2: Select Enhanced Custom Field as Resource Identities"+"<br>");
		Select select = new Select(driver.findElement(By.xpath("//select[@id='picktable']")));
		select.selectByVisibleText("Resource Identities");
		
		Reporter.log("Step 3: click on the link New Custom resource identities Field >"+"<br>");
		driver.findElement(By.xpath("//a[contains(@href,'RN_RESOURCE_IDENTITY')]")).click();
		//System.out.println("Page title"+driver.getTitle());
		Assert.assertTrue(driver.getTitle().contains("New Custom Data Field"));
		
		String fieldName1 = common.generateRandomString();
		String fieldName2 = common.generateRandomString();
		String fieldName3 = common.generateRandomString();
		
		
		Reporter.log("Step 4: Create New Custom Data Field with out selecting the check box "+"'"+"Allow HTML"+"'"+"<br>");
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true, fieldName1, true, null, false));
		
		Reporter.log("Step 5: Create New Custom Data Field upon selecting the check box "+"'"+"Allow HTML"+"'"+"Also not entering"+"'"+"fieldValues"+"'"+"<br>");
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true, fieldName2, false, null, true));
		
		String[] fieldNames = {fieldName1,fieldName2};
		
		Reporter.log("Step 6: Go to Devices > Devices tools> Resource Identity Pools > Create a Pool upon selecting above created 2 Custom fields "+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools(fieldNames);
		
		Reporter.log("Step 7: Click on Add IDs link that is related to above created Pool > Add a New ID."+"<br>");
		Assert.assertTrue(NAUtils.addResourceIDsToPoolCustom(resourcePoolName,null,null,"<td>",null));
		
		// Checking by disabling a custom field value.
		
		fieldName3 = common.generateRandomString();

		Reporter.log("Step 8: Create New Custom Data Field with out selecting the check boxes "+"'"+"Enabled"+"'"+"'"+"& Allow HTML"+"'"+"<br>");
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(false, fieldName3, false, null, false));
		
		Reporter.log("Step 9: Go to Devices > Devices tools> Resource Identity Pools > Create a Pool upon selecting above created Custom field "+"<br>");
		Assert.assertNull(NAUtils.createResourceIdentityPools(fieldName3));		
		
		Reporter.log("===============End testVerifyOtherSettingsCustomData_003========================"+"<br>");
		
	}
	
	/*
	Step 1: Go to Devices > Devices tools> Resource Identity Pools > Create a Pool upon selecting portion as Default Site
	Step 2: Verify if Pool got created with the portion as Default Site or not 
	Step 3: Navigate to Admin > Security partitions> Create new partition
	Step 4: Go to Devices > Devices tools> Resource Identity Pools > Create a Pool upon selecting above created
	Step 5: Verify if Pool got created with the above portion name or not	
	*/
	
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyUIPartitions_001(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235265  "+"<br>");
		System.out.println("===============Start testVerifyUIPartitions_001========================");
		
		// Note: Some times security partition might be created. THen it wont show the default site. So selecting the default site in the code.
		Reporter.log("Step 1: Go to Devices > Devices tools> Resource Identity Pools > Create a Pool upon selecting portion as Default Site"+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools(null,"Default Site",null);
		
		Reporter.log("Step 2: Verify if Pool got created with the portion as Default Site or not >"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = driver.findElements(By.tagName("tr"));
		System.out.println("number of rows "+rows.size());
		for(int i=2;i<rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName)){
				Assert.assertEquals(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[4]").getText().trim(),"Default Site");
				break;
			}
		}
		
		Reporter.log("Step 3: Navigate to Admin > Security partitions> Create new partition "+"<br>");
		Navigate.Admin.SecurityPartitions();
		String securityPartition = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step 4: Go to Devices > Devices tools> Resource Identity Pools > Create a Pool upon selecting above created"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		resourcePoolName = NAUtils.createResourceIdentityPools(null,securityPartition, null);
				
		Reporter.log("Step 5: Verify if Pool got created with the above portion name or not >"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = driver.findElements(By.tagName("tr"));
		for(int i=2;i<rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName)){
				Assert.assertEquals(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[4]").getText().trim(),securityPartition);
				break;
			}
		}
		
		System.out.println("===============End testVerifyUIPartitions_001========================");
		
	}
	
	
	/*  Step 1 : Add New Security Partition
	 *  Step 2 : Create New Resource Identity Pool with default Security Partition
	 *  Step 3 : Create New Resource Identity Pool with newly created Security Partition in Step 1
	 *  Step 4 : Create New User
	 *  Step 5 : Reset Password for the above created New User
	 *  Step 6 : login As New User
	 *  Step 7 : Verify existence of the resource Pool created in Step 2
	 *  Step 8 : Verify existence of the resource Pool created in Step 3
	 */ 
	 
	@Test(enabled = true, groups= {"ART"})
	public void testViewResourceIDTiedToAdmin_002() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235292 "+"<br>");
		Reporter.log("===============Start testViewResourceIDTiedToAdmin_002========================"+"<br>");
		
		// Step 2 and step 3
		Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step 2 : Create New Resource Identity Pool with default Security Partition"+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 3 : Create New Resource Identity Pool with newly created Security Partition in Step 1"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		
		Reporter.log("Step 4 : Create New User"+"<br>");
		String adminUser = NAUtils.addUser(new String[]{"Administrator"});
		
		Reporter.log("Step 5 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(adminUser);
		
		Reporter.log("Step 6 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(adminUser));
		
		
		Reporter.log("Step 7 : Verify existence of the resource Pool created in Step 2"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = driver.findElements(By.tagName("tr"));
		
		for(int i=2;i<rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName1)){
				Assert.assertTrue(true,resourcePoolName1+" Resouce Pool visible to newly created admin user");
				Reporter.log(resourcePoolName1+" Resouce pool visible to user"+"<br>");
				break;
			}
		}
		
		Reporter.log("Step 8 : Verify existence of the resource Pool created in Step 3"+"<br>");
		for(int i=2;i<rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				Assert.assertTrue(true,resourcePoolName2+" Resouce Pool visible to newly created admin user");
				Reporter.log(resourcePoolName2+" Resouce pool visible to user"+"<br>");
				break;
			}
		}
		
		Reporter.log("===============End testViewResourceIDTiedToAdmin_002========================"+"<br>");
		
	}
	
	/* Step 1 : Add New Security Partition
	 * Step 2 : Edit User Group with the name Power User and select above New added Security Partition
	 * Step 3 : create Resource Identity Pool
	 * Step 4 : create one more Resource Identity Pool with the above created Security Partition
	 * Step 5 : Create new User as an Power User
	 * Step 6 : Reset Password for the above created New User
	 * Step 7 : login As New User
	 * Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 4 is available  for power user or not ?
	 * Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for power user or not ?
	 * Step 10 : Click on the link ADD IDs related to  resource Pool created in Step 4 and Add a Pool to it and verify if the pool got added or not?
	 * Step 11 : Click on the link acquireID
	 * Step 12 : Click on the link releaseID
	 * Step 13 : Click on the link Import IDs related to  resource Pool created in Step 4 
	 * Step 14 : Verify if Partition dropdown is showing security Partition created in Step 1: Expected:: It should be Displayed
	 * Step 15 : Verify if ResourceIdentityPool dropdown is showing ResourcePool created in Step 4: Expected:: It should be Displayed
	*/
	
    @Test(enabled = true, groups= {"ART"})
	public void testViewResouceIDTiedToNonDefaultPartitionPowerUser_003() throws InterruptedException{
    	Reporter.log("ALM Global ID For this test Case:  QCTP1B235231 "+"<br>");
    	Reporter.log("===============Start testViewResouceIDTiedToNonDefaultPartitionPowerUser_003========================"+"<br>");
		
		
    	Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step 2 : Edit User Group with the name Power User and select above New added Security Partition"+"<br>");
		NAUtils.editUserGroup("Power User",securityPartition);
		
		
		Reporter.log("Step 3 : create Resource Identity Pool "+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 4 : create one more Resource Identity Pool with the above created Security Partition"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		
		Reporter.log("Step 5 : Create new User as an Power User"+"<br>");
		String powerUser = NAUtils.addUser(new String[]{"Power User"});
		
		Reporter.log("Step 6 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(powerUser);
				
		Reporter.log("Step 7 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(powerUser));
		
		
		Reporter.log("Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 4 is available  for power user or not ? "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				System.out.println(resourcePoolName2+" Resouce pool visible to newly created power user");
				Assert.assertTrue(true,resourcePoolName2+" Resouce Pool visible to newly created power user");
				break;
			}
		}
		
		System.out.println("row size is "+rows.size());
		Reporter.log("Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for power user or not ? "+"<br>");
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			try{
				if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName1)){
					Assert.assertTrue(false,resourcePoolName1+" Resouce Pool visible to newly created power user");
					System.out.println(resourcePoolName1+" Resouce pool visible to newly created power user");
					break;
				}
			}catch(NullPointerException e){
				Assert.assertFalse(false,resourcePoolName1+" Resource Pool not visible to newly created power user");
				break;
			}
		}
		
		
		Reporter.log("Step 10 : Click on the link ADD IDs related to  resource Pool created in Step 4 and Add a Pool to it and verify if the pool got added or not?"+"<br>");
		NAUtils.addResourceIDsToPool(resourcePoolName2);
		
		String[] allPools = NAUtils.getAllIDsInPool(resourcePoolName2);
		
		System.out.println("IDs lenght "+allPools.length);
		
		for(int i=0;i<allPools.length;i++){
			System.out.println("IDs available "+ allPools[i]);
		}
		
		Reporter.log("Step 11 : Click on the link acquireID"+"<br>");
		for(int i=0;i<allPools.length;i++){
			Assert.assertTrue(NAUtils.acquireID(resourcePoolName2, allPools[i]));
		}
		
		Reporter.log("Step 12 : Click on the link releaseID"+"<br>");
		for(int i=0;i<allPools.length;i++){
			Assert.assertTrue(NAUtils.releaseID(resourcePoolName2, allPools[i]));
		}
		
		Reporter.log("Step 13 : Click on the link Import IDs related to  resource Pool created in Step 4 "+"<br>");
		//NAUtils.importIDs(resourcePoolName2);
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = driver.findElement(By.xpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table"));
		rows = table.findElements(By.tagName("tr"));
		System.out.println("number of rows "+rows.size());
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[8]/a[2]").click();
				break;
			}
		}
		
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"));
		
		Reporter.log("Step 14 : Verify if Partition dropdown is showing security Partition created in Step 1: Expected:: It should be Displayed"+"<br>");
		Select select = new Select(driver.findElement(By.name("siteID")));
		WebElement option = select.getFirstSelectedOption();
		Assert.assertEquals(securityPartition, option.getText());
		
		Reporter.log("Step 15 : Verify if ResourceIdentityPool dropdown is showing ResourcePool created in Step 4: Expected:: It should be Displayed"+"<br>");
		select = new Select(driver.findElement(By.name("resourceIdentityPoolID")));
		option = select.getFirstSelectedOption();
		Assert.assertEquals(resourcePoolName2, option.getText());
		
		Reporter.log("===============End testViewResouceIDTiedToNonDefaultPartitionPowerUser_003========================"+"<br>");
		
	}
	
	// This test case will fail as Add ID , import ID and Edit pool is not visible to the Full Access User.
    
    //Create user with  role of FULL Access User, and verify if  Add ID , import ID and Edit pool are disable or not?
	@Test(enabled = true, groups= {"ART"}) 
	public void testViewResouceIDTiedToNonDefaultPartitionFullUser_004() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235239  "+"<br>");
		Reporter.log("===============Start testViewResouceIDTiedToNonDefaultPartitionFullUser_004========================"+"<br>");
		
		boolean isVisible = true;
		//Step 2

		Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
				
		Reporter.log("Step 2 : Edit User Group with the name Full Access User and select above Newly added Security Partition"+"<br>");
		NAUtils.editUserGroup("Full Access User",securityPartition);
		
		Reporter.log("Step 3 : create Resource Identity Pool"+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 4 : create one more Resource Identity Pool with the above created Security Partition"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		
		Reporter.log("Step 5 : Create new User as an Full Access User"+"<br>");
		String fullUser = NAUtils.addUser(new String[]{"Full Access User"});
		
		Reporter.log("Step 6 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(fullUser);
				
		Reporter.log("Step 7 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(fullUser));
			
		Reporter.log("Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 4 is available  for power user or not ?:: Expected: Should be visible"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				System.out.println(resourcePoolName2+" Resouce pool visible to newly created Full Access user");
				Assert.assertTrue(true,resourcePoolName2+" Resouce Pool visible to newly created Full Access user");
				break;
			}
		}
		
		// Checking if the resourcepool 1 created without security partition is not visible to user
		Reporter.log("Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for power user or not ?:: Expected: Should not be visible"+"<br>");
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName1)){
				System.out.println(resourcePoolName1+" Resouce pool without associated security partition visible to newly created Full Access user");
				Assert.assertTrue(false,resourcePoolName1+" Resouce Pool without associated security partition visible to newly created Full Access user");
				isVisible = false;
				break;
			}
		}
		if(isVisible){
			System.out.println(resourcePoolName1+" Resource Pool without associated security partition not visible to newly created Full Access user");
			Assert.assertFalse(false,resourcePoolName1+" Resource Pool without associated security partition not visible to newly created Full Access user");
		}
		
/*		//Nrao- Non Working code
 * 		Nrao - test is failing here, as Add ID , import ID and Edit pool is not visible to the Full Access User, Need to check with Divesh. Automationt2kqr3Gu/password1
		Reporter.log("Step 10 : Click on the link ADD IDs related to  resource Pool created in Step 4 and Add a Pool to it and verify if the pool got added or not?"+"<br>");
		NAUtils.addResourceIDsToPool(resourcePoolName2);
		
		String[] allPools = NAUtils.getAllIDsInPool(resourcePoolName2);
		
		System.out.println("IDs lenght "+allPools.length);
		
		for(int i=0;i<allPools.length;i++){
			System.out.println("IDs available "+ allPools[i]);
		}
		
		Reporter.log("Step 11 : Click on the link acquireID"+"<br>");
		for(int i=0;i<allPools.length;i++){
			Assert.assertTrue(NAUtils.acquireID(resourcePoolName2, allPools[i]));
		}
		
		Reporter.log("Step 12 : Click on the link releaseID"+"<br>");
		for(int i=0;i<allPools.length;i++){
			Assert.assertTrue(NAUtils.releaseID(resourcePoolName2, allPools[i]));
		}*/
		
		Reporter.log("Step 10 : Verify Links like 'Add IDs', 'Import IDs', 'Edit Pool' are disabled for the newly created user or not? :: All Should be disabled"+"<br>");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				//System.out.println(resourcePoolName2+" Resouce pool visible to newly created user");
				Assert.assertTrue(driver.findElements(By.linkText("Add IDs")).size()<=0,"Add ID not visible to the user");
				Assert.assertTrue(driver.findElements(By.linkText("Import IDs")).size()<=0,"Import IDs not visible to the user ");
				Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()<=0,"Edit Pool not visible to the user ");
				break;
			}
		}
		
		System.out.println("===============End testViewResouceIDTiedToNonDefaultPartitionFullUser_004========================");
		
	}

	/* Step 1 : Add New Security Partition
	 * Step 2 : Edit User Group with the name 'Limited Access User' and select above New added Security Partition
	 * Step 3 : create Resource Identity Pool
	 * Step 4 : create one more 'Resource Identity Pool' with the above created Security Partition
	 * Step 5 : Create new User as an 'Limited Access User'
	 * Step 6 : Reset Password for the above created New User
	 * Step 7 : login As New User
	 * Step 8 : Try to Navigate 'Resource Identity Pools' menu :: Menu should be Disabled for the 'Limited Access User'	 * 
	 * */
	
	//Verify the Resource Identity Menu  with limited access user
	@Test(enabled = true, groups= {"ART"})
	public void testViewResourceIDTiedToNonDefaultPartitionLimitedUser_005() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235273   "+"<br>");
		Reporter.log("===============Start testViewResourceIDTiedToNonDefaultPartitionLimitedUser_005========================"+"<br>");
		
		Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
						
		Reporter.log("Step 2 : Edit User Group with the name 'Limited Access User' and select above New added Security Partition"+"<br>");
		NAUtils.editUserGroup("Limited Access User",securityPartition);
				
		Reporter.log("Step 3 : create Resource Identity Pool"+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 4 : create one more 'Resource Identity Pool' with the above created Security Partition"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
				
		Reporter.log("Step 5 : Create new User as an 'Limited Access User'"+"<br>");
		String limitedUser = NAUtils.addUser(new String[]{"Limited Access User"});
				
		
		Reporter.log("Step 6 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(limitedUser);
				
		Reporter.log("Step 7 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(limitedUser));
		
		Reporter.log("Step 8 : Try to Navigate 'Resource Identity Pools' menu :: Menu should be Disabled for the 'Limited Access User'> "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Assert.assertFalse(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched. Limited user doesnt have access to Resource Identity Pools");
		Reporter.log("Resource Identity Pools page not launched. Limited user doesnt have access to Resource Identity Pools"+"<br>");
		
		Reporter.log("===============End testViewResourceIDTiedToNonDefaultPartitionLimitedUser_005========================"+"<br>");
	}
	
	/* Step 1 : Add New Security Partition
	 * Step 2 : create Resource Identity Pool
	 * Step 3 : create one more 'Resource Identity Pool' with the above created Security Partition
	 * Step 4 : Add new User Group ('Command Permissions' as 'Resource Identity Pool: View' and 'Partition Permission' as Newly created
	 * Step 5 : Add User upon selecting above created User Group
	 * Step 6 : Reset Password for the above created New User
	 * Step 7 : login As New User
	 * Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for power user or not ?:: Expected: Should be visible
	 * Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 2 is available  for power user or not ?:: Expected: Should not be visible
	 * Step 10 : Verify if 'New Pool' link is disabled for the newly created user or not? :: Should be disabled
	 * Step 11 : Verify Links like 'Add IDs', 'Import IDs', 'Acquire Next ID', 'Edit Pool' are disabled for the newly created user or not? :: All Should be disabled
	 */
	
	@Test(enabled = true, groups= {"ART"})
	public void testViewResourceIDTiedToNonDefaultPartitionViewPermission_006() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235269  "+"<br>");
		Reporter.log("===============Start testViewResourceIDTiedToNonDefaultPartitionViewPermission_006========================"+"<br>");
		
		boolean isVisible = true;

		Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step 2 : create Resource Identity Pool"+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 3 : create one more 'Resource Identity Pool' with the above created Security Partition"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		
		Reporter.log("Step 4 : Add new User Group ('Command Permissions' as 'Resource Identity Pool: View' and 'Partition Permission' as  "+securityPartition+"<br>");		
		String[] customPermissions = {"Resource Identity Pool: View"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		Reporter.log("Step 5 : Add User upon selecting above created User Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 6 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 7 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for newly created user or not ?:: Expected: Should be visible"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		common.pageSizeOption("All");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				Reporter.log(resourcePoolName2+" Resouce pool visible to newly created user"+"<br>");
				Assert.assertTrue(true,resourcePoolName2+" Resouce Pool visible to newly created user");
				break;
			}
		}
		
		// Checking if the resourcepool 1 created without security partition is not visible to user
		Reporter.log("Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 2 is available  for newly created user or not ?:: Expected: Should not be visible"+"<br>");
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName1)){
				Reporter.log(resourcePoolName1+" Resouce pool without associated security partition visible to newly created user"+"<br>");
				Assert.assertTrue(false,resourcePoolName1+" Resouce Pool without associated security partition visible to newly created user");
				isVisible = false;
				break;
			}
		}
		if(isVisible){
			Reporter.log(resourcePoolName1+" Resource Pool without associated security partition not visible to newly created user"+"<br>");
			Assert.assertFalse(false,resourcePoolName1+" Resource Pool without associated security partition not visible to newly created user");
		}
		
		
		Reporter.log("Step 10 : Verify if 'New Pool' link is disabled for the newly created user or not? :: Should be disabled"+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText("New Pool")).size()<=0,"Not able to create resource pool with the login user ");
		
		Reporter.log("Step 11 : Verify Links like 'Add IDs', 'Import IDs', 'Acquire Next ID', 'Edit Pool' are disabled for the newly created user or not? :: All Should be disabled"+"<br>");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				//System.out.println(resourcePoolName2+" Resouce pool visible to newly created user");
				Assert.assertTrue(driver.findElements(By.linkText("Add IDs")).size()<=0,"Add ID not visible to the user");
				Assert.assertTrue(driver.findElements(By.linkText("Import IDs")).size()<=0,"Import IDs not visible to the user ");
				Assert.assertTrue(driver.findElements(By.linkText("Acquire Next ID")).size()<=0,"Acquire Next ID not visible to the user");
				Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()<=0,"Edit Pool not visible to the user ");
				break;
			}
		}
		
		Reporter.log("===============End testViewResourceIDTiedToNonDefaultPartitionViewPermission_006========================"+"<br>");
	}
	
	//verify the  Links like 'Add IDs', 'Import IDs', 'Edit Pool' are disabled for newly created User   
	@Test(enabled = true, groups= {"ART"})
	public void testViewResourceIDTiedToNonDefaultPartitionAcquireReleaseEdit_007() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235281  "+"<br>");
		Reporter.log("===============Start testViewResourceIDTiedToNonDefaultPartitionAcquireReleaseEdit_007========================"+"<br>");
		
		WebElement table1 =null;
		List<WebElement> rows1 = null;
		boolean isVisible = true;

		Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step 2 : create Resource Identity Pool"+"<br>");		
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 3 : create one more 'Resource Identity Pool' with the above created Security Partition"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		
		Reporter.log("Step 4 : Add ResourceIDs to Pool"+"<br>");
		NAUtils.addResourceIDsToPool(resourcePoolName2);
		
		Reporter.log("Step 5 : Add new User Group ('Command Permissions' as {'Resource Identity: Acquire/Release/Edit','Resource Identity Pool: View'} and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity: Acquire/Release/Edit","Resource Identity Pool: View"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		Reporter.log("Step 6 : Add User upon selecting above created User Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 7 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 8 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for New user or not ?:: Expected: Should be visible"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		common.pageSizeOption("All");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				System.out.println(resourcePoolName2+" Resouce pool visible to newly created user");
				Assert.assertTrue(true,resourcePoolName2+" Resouce Pool visible to newly created user");
				break;
			}
		}
		
		// Checking if the resourcepool 1 created without security partition is not visible to user
		Reporter.log("Step 10 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 2 is available  for New user or not ?:: Expected: Should not be visible"+"<br>");
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName1)){
				System.out.println(resourcePoolName1+" Resouce pool without associated security partition visible to newly created user");
				Assert.assertTrue(false,resourcePoolName1+" Resouce Pool without associated security partition visible to newly created user");
				isVisible = false;
				break;
			}
		}
		if(isVisible){
			System.out.println(resourcePoolName1+" Resource Pool without associated security partition not visible to newly created user");
			Assert.assertFalse(false,resourcePoolName1+" Resource Pool without associated security partition not visible to newly created user");
		}
		
		
		String[] allPools = NAUtils.getAllIDsInPool(resourcePoolName2);
		Assert.assertTrue(NAUtils.acquireID(resourcePoolName2, allPools[0]),"Able to Acquired pool  for the user "+allPools[0]);
		Assert.assertTrue(NAUtils.releaseID(resourcePoolName2, allPools[0]),"Able to Released Pool for the user "+allPools[0]);
		
		Reporter.log("Step 11 : Verify if 'Edit ID' link is disabled for the newly created user or not? :: Should be disabled"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		common.pageSizeOption("All");
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText().equals(resourcePoolName2)){
				common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").click();
				
				common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[4]/form/table/tbody/tr[2]/td[7]/a[2]").click();
				Assert.assertTrue(common.checkTitle("HP Network Automation: Edit Resource Identity: "+allPools[0]),"Edit ID is enabled for the user");
				common.getObjectByName("description").sendKeys("Edited for Test case");
				Assert.assertTrue( common.pageInfoBoxContains("Edited ID: "+allPools[0]),"Able to edit description for the user ");
			}
		}
		
		Reporter.log("Step 11 : Verify Links like 'Add IDs', 'Import IDs', 'Edit Pool' are disabled for the newly created user or not? :: All Should be disabled"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				//System.out.println(resourcePoolName2+" Resouce pool visible to newly created user");
				Assert.assertFalse(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[8]/a").getText().equals("Add IDs"),"Add ID not visible to the user");
				Assert.assertFalse(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[8]/a").getText().equals("Import IDs"),"Import IDs not visible to the user ");
				Assert.assertFalse(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[8]/a").getText().equals("Edit Pool"),"Edit Pool not visible to the user ");
				break;
			}
		}
		Reporter.log("===============End testViewResourceIDTiedToNonDefaultPartitionAcquireReleaseEdit_007========================"+"<br>");
		
	}
	
/* Step 1 : Add New Security Partition
 * Step 2 : create Resource Identity Pool
 * Step 3 : create one more 'Resource Identity Pool' with the above created Security Partition
 * Step 4 : Add new User Group ('Command Permissions' as {'Resource Identity: Add/Import','Resource Identity Pool: View'} and 'Partition Permission' as  "+securityPartition
 * Step 5 : Add User upon selecting above created User Group
 * Step 6 : Reset Password for the above created New User
 * Step 7 : login As New User
 * Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for New user or not ?:: Expected: Should be visible
 * Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 2 is available  for New user or not ?:: Expected: Should not be visible
 * tep 10 : Go to 'Resource Identity Pools' listing page > Verify Links like 'Acquire Next ID', 'Edit Pool' are disabled for the newly created user or not? :: All Should be disabled
 * Step 11 : Click on the link related to 'Resource Identity Pool' that is created in step 3 > Verify Links like 'Acquire ID', 'Edit ID' are disabled for the newly created user or not? :: All Should be disabled
 */
	@Test(enabled = true, groups= {"ART"})
	public void testViewResouceIDTiedToNonDefaultPartitionAddImportResourceIDPermission_008() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235237   "+"<br>");
		Reporter.log("===============Start testViewResouceIDTiedToNonDefaultPartitionAddImportResourceIDPermission_008========================"+"<br>");
		
		boolean isVisible = true;
		
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
	
		Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
				
		Reporter.log("Step 2 : create Resource Identity Pool"+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 3 : create one more 'Resource Identity Pool' with the above created Security Partition"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		NAUtils.addResourceIDsToPool(resourcePoolName2);
		
		Reporter.log("Step 4 : Add new User Group ('Command Permissions' as {'Resource Identity: Add/Import','Resource Identity Pool: View'} and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity: Add/Import","Resource Identity Pool: View"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		Reporter.log("Step 5 : Add User upon selecting above created User Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
				
		Reporter.log("Step 6 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 7 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for New user or not ?:: Expected: Should be visible"+"<br>");	
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[2]/a").getText().equals(resourcePoolName2)){
			System.out.println(resourcePoolName2+" Resouce pool visible to newly created user");
			Assert.assertTrue(true,resourcePoolName2+" Resouce Pool visible to newly created user");
		}
				
		// Checking if the resourcepool 1 created without security partition is not visible to user
		Reporter.log("Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 2 is available  for New user or not ?:: Expected: Should not be visible"+"<br>");
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName1)){
				System.out.println(resourcePoolName1+" Resouce pool without associated security partition visible to newly created user");
				Assert.assertTrue(false,resourcePoolName1+" Resouce Pool without associated security partition visible to newly created user");
				isVisible = false;
				break;
			}
		}
		if(isVisible){
			System.out.println(resourcePoolName1+" Resource Pool without associated security partition not visible to newly created user");
			Assert.assertFalse(false,resourcePoolName1+" Resource Pool without associated security partition not visible to newly created user");
		}
		
		
		
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[2]").click();
				Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Import page access is visible to the user");
				break;
			}
		}
		
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName2)){
				Reporter.log("Step 10 : Go to 'Resource Identity Pools' listing page > Verify Links like 'Acquire Next ID', 'Edit Pool' are disabled for the newly created user or not? :: All Should be disabled"+"<br>");
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/acronym[1]").getText().contains("Acquire Next ID"),"Edit Pool is visible to the user login ");
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/acronym[2]").getText().contains("Edit Pool"),"Acquire Next ID is visible to the user login ");
				Reporter.log("Step 11 : Click on the link related to 'Resource Identity Pool' that is created in step 3 > Verify Links like 'Acquire ID', 'Edit ID' are disabled for the newly created user or not? :: All Should be disabled"+"<br>");
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[7]/acronym[1]").getText().contains("Acquire ID"),"Acquire ID is visible to the user login ");
				Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[7]/acronym[2]").getText().contains("Edit ID"),"Edit ID is visible to the user login ");
				break;
			}
		}
		
		Reporter.log("===============End testViewResouceIDTiedToNonDefaultPartitionAddImportResourceIDPermission_008========================"+"<br>");
	}
	
	/* Step 1 : Add New Security Partition
     * Step 2 : create Resource Identity Pool
     * Step 3 : create one more 'Resource Identity Pool' with the above created Security Partition
     * Step 4 : Add new User Group ('Command Permissions' as {'Resource Identity: Add/Import','Resource Identity Pool: View'} and 'Partition Permission' as  "+securityPartition
     * Step 5 : Add User upon selecting above created User Group
     * Step 6 : Reset Password for the above created New User
     * Step 7 : login As New User
     * Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for New user or not ?:: Expected: Should be visible
	 * Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 2 is available  for New user or not ?:: Expected: Should not be visible
	 * Step 10 : Verify if 'Edit Pool' link is enabled for this newly created user or not? :: Expected: Should be Enabled
	 * 
	 */
	//
	@Test(enabled = true, groups= {"ART"})
	public void testViewResourceIDTiedToNoDefaultPartitionManageResourceIDPoolPermission_009() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235249  "+"<br>");
		Reporter.log("===============Start testViewResourceIDTiedToNoDefaultPartitionManageResourceIDPoolPermission_009========================"+"<br>");
		
		boolean isVisible = true;
		
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		
		Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
						
		Reporter.log("Step 2 : create Resource Identity Pool"+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 3 : create one more 'Resource Identity Pool' with the above created Security Partition"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		NAUtils.addResourceIDsToPool(resourcePoolName2);
		
		Reporter.log("Step 4 : Add new User Group ('Command Permissions' as {'Resource Identity Pool: Manage','Resource Identity Pool: View','Resource Identity: Acquire/Release/Edit'} and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity Pool: Manage","Resource Identity Pool: View","Resource Identity: Acquire/Release/Edit"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		Reporter.log("Step 5 : Add User upon selecting above created User Group"+"<br>");		
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		
		Reporter.log("Step 6 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 7 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 8 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 3 is available  for New user or not ?:: Expected: Should be visible"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		
		if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[2]/a").getText().equals(resourcePoolName2)){
			System.out.println(resourcePoolName2+" Resouce pool visible to newly created user");
			Assert.assertTrue(true,resourcePoolName2+" Resouce Pool is not visible to newly created user");
		}
				
		// Checking if the resourcepool 1 created without security partition is not visible to user
		Reporter.log("Step 9 : Go to Resource Identity Pools > Verify if the resource Pool created in Step 2 is available  for New user or not ?:: Expected: Should not be visible"+"<br>");
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName1)){
				System.out.println(resourcePoolName1+" Resouce pool without associated security partition visible to newly created user");
				Assert.assertTrue(false,resourcePoolName1+" Resouce Pool without associated security partition is not visible to newly created user");
				isVisible = false;
				break;
			}
		}
		if(isVisible){
			System.out.println(resourcePoolName1+" Resource Pool without associated security partition not visible to newly created user");
			Assert.assertFalse(false,resourcePoolName1+" Resource Pool without associated security partition is visible to newly created user");
		}
		
		Reporter.log("Step 10 : Verify if 'Edit Pool' link is enabled for this newly created user or not? :: Expected: Should be Enabled"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()>0,"User not able to edit the pool ");
		
		Reporter.log("===============End testViewResourceIDTiedToNoDefaultPartitionManageResourceIDPoolPermission_009========================"+"<br>");
		
	}
	
	//verify the Resource Identity pool initially  not selected created the  security partition check the existence pool if alert is presented or not? after with have a created security partition have or not? 
	//verify the Resource Identity pool with having security partition or not?
	@Test(enabled = true, groups= {"ART"})
	public void testUniquenessOfResourceIdentiyPoolsWithDifferentPartition_010(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235250   "+"<br>");
		Reporter.log("===============Begin testUniquenessOfResourceIdentiyPoolsWithDifferentPartition_010========================"+"<br>");
		
		Reporter.log("Step 1 : Add New Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
								
		Reporter.log("Step 2 : create Resource Identity Pool"+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		
		Reporter.log("Step 3: Try to create another 'Resource Identity Pool' with same name & Partition that got created in Step 2  and verify if alert is shown or not ? :: Expected Should not be allowed to create, and alert should be seen"+"<br>");
		if(NAUtils.createResourceIdentityPools(resourcePoolName1, null, null) == null){
			System.out.println("ALert value is : "+driver.findElement(By.xpath("//div[@class='alert_3']")).getText().trim());
			if(driver.findElement(By.xpath("//div[@class='alert_3']")).getText().trim().equals("Resource identity pool: "+resourcePoolName1+" already exists.")){
				System.out.println("Resource Identity Pool already exists.");
				Assert.assertTrue(true);
			}else{
				System.out.println("Resource Identity Pool created successfully");
				Assert.assertTrue(false);
			}
			
		}
		
		Reporter.log("Step 4: Try to create another 'Resource Identity Pool' with same name but with differenent Partition that got created in Step 2  and verify if 'Resource Identity Pool' got created or not?  :: Expected Should be created"+"<br>");
		NAUtils.createResourceIdentityPools(resourcePoolName1, securityPartition, null);
		
		Reporter.log("===============End testUniquenessOfResourceIdentiyPoolsWithDifferentPartition_010========================"+"<br>");
	}
	
	
	// Browser  CSV file 
	@Test(enabled = true, groups= {"ART"})
	public void testImportResouceIDsToAnExistingResoucePoolInNonDefaultSite_011() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235276   "+"<br>");
		Reporter.log("===============Begin testImportResouceIDsToAnExistingResoucePoolInNonDefaultSite_011========================"+"<br>");
		
		
		Reporter.log("Step 1 : Navigate > Devices > Device tools > resourceIdentitypools "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Reporter.log("Step 2 : create Resource Identity Pool"+"<br>");
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName, null, null);
		
		Reporter.log("Step 3: Brwoser CSV file with Created  Resource Identity Pool Name  "  +"<br>");
		Assert.assertTrue(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\Import3ResouceIds.csv"),"Not able to import the IDs ");
		
		System.out.println("log : "+common.getObjectByXpath("//a[contains(@href,'import_log')]").getText());
		
		
		
		Reporter.log("===============End testImportResouceIDsToAnExistingResoucePoolInNonDefaultSite_011========================"+"<br>");
		
	}
	
	//verify the Resource Identity page  which having  Deleted partition includes pool name or not or not ?  
	@Test(enabled = true, groups= {"ART"})
	public void testDeletePartitionThatHasResourceIDPoolsAssociated_012(){
		
		Reporter.log("ALM Global ID For this test Case: QCTP1B235283  "+"<br>");
		Reporter.log("========Begin testDeletePartitionThatHasResourceIDPoolsAssociated_012===================="+"<br>");
		boolean isVisible = true;
		
		
		Reporter.log("Step 1 : Navigate to Admin > Security Partition"+"<br>");
		Navigate.Admin.SecurityPartitions();
		SecurityPartitionsPage securityPartitionPage = new SecurityPartitionsPage();
		
		Reporter.log("Step 2 : Navigate > Devices > Device tools > resourceIdentitypools "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		
		
	    String parentWindowHandler = driver.getWindowHandle();
		String subWindowHandle = null;
		
		
 
		Reporter.log("Step 3: Create 3 security partitions "+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
		String securityPartition1 = NAUtils.addNewSecurityPartition();
		String securityPartition2 = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step 4: Create resouce Identity pool with Default Site security partition "+"");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools(null,"Default Site", null);
		
		Reporter.log("Step 5: Try to create another 'Resource Identity Pool' with same name but with differenent Partition that got created in Step 2  and verify if 'Resource Identity Pool' got created or not?  :: Expected Should be created"+"<br>");
		NAUtils.createResourceIdentityPools(resourcePoolName1,securityPartition, null);
		
		Reporter.log("Step 6: Create Resouce Identity pool with differenent securityPartition"+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null, securityPartition1, null);
		
		// Step 4
		// Scenario 1 to delete the securityPartition associated with the resource pools with same name. One associated with Default Site and another with security Partition
		Reporter.log("Step 7 : Navigate > Admin > Securtity Partitions > Delete first security partititon "+"<br>");
		Navigate.Admin.SecurityPartitions();
		
		table = common.getObjectByXpath(securityPartitionPage.securityPartitionsAvailabeWebTable);
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(securityPartitionPage.securityPartitionsAvailabeWebTable+"/tbody/tr["+i+"]/td[1]").getText().equals(securityPartition)){
				common.getObjectByXpath(securityPartitionPage.securityPartitionsAvailabeWebTable+"/tbody/tr["+i+"]/td[4]/a[2]").click();
				break;
			}
		}
		
		// check for multiple windows
		Set<String> handles = driver.getWindowHandles();
		Iterator<String> iterator = handles.iterator();
		
		while(iterator.hasNext()){
			subWindowHandle = iterator.next();
		}
		
		// switch to the popup window
		Reporter.log("Step 8 :Navigate to SubWindow" +"<br>");
		driver.switchTo().window(subWindowHandle);
		Reporter.log("Step 9: verify Title of the child window  :: Expected : Delete Partition  "+"<br>");
		Assert.assertTrue(common.checkTitle("Delete Partition"),"Delete Popup Not launched.");
		Reporter.log(" Select the Default Site  in dropdown list at child window"+"<br>");
		common.selectOption("siteID", "Default Site");
		common.getObjectByXpath("//input[@value='Delete']").click();
		
		// Switch to the main window
		Reporter.log("Step 10:Navigate to parent Window"+"<br>");
		driver.switchTo().window(parentWindowHandler);
		Reporter.log("Resource Identity Page shows = 'Successfully deleted Partition' "+" 'securityPartition' "+"<br>");
		Assert.assertTrue(common.pageInfoBoxContains("Successfully deleted Partition "+securityPartition+"."),"Security partition not deleted ");

		Reporter.log("Step 11 : Navigate > Devices > DeviceTools >resourceIdentityPools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		Reporter.log("Step 12: verify if Partition got modified as Default Site or not? for the same Resouce identity pool"+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(securityPartition+"."+resourcePoolName1)){
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[4]").getText().trim().equals("Default Site"),"Partition is not changed to Default Site");
				isVisible = true;
				break;
			}else{
				//System.out.println("value is "+common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText());
				isVisible = false;
			}
		}
		if(isVisible){
			System.out.println("Resource Identity Pool created with old sercurityPartition.resourcePool format "+securityPartition+"."+resourcePoolName1);
			Assert.assertTrue(true,"Resource Identity Pool was not created with name old securityPartition.resourcePool");
		}else{
			System.out.println("Resource Identity Pool created with old sercurityPartition.resourcePool format was not created"+securityPartition+"."+resourcePoolName1);
			Assert.assertTrue(false);
		}
		
		//Scenario 2 to delete the securityPartition(securityPartition1) associated with a resource pool and checking if it's associated with a different partition(securityPartition2).
		Reporter.log("Step 13: Delete Partition upon Selecting third Security Partition in dropdown list"+"<br>");
		Navigate.Admin.SecurityPartitions();
		
		table = common.getObjectByXpath(securityPartitionPage.securityPartitionsAvailabeWebTable);
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(securityPartitionPage.securityPartitionsAvailabeWebTable+"/tbody/tr["+i+"]/td[1]").getText().equals(securityPartition1)){
				common.getObjectByXpath(securityPartitionPage.securityPartitionsAvailabeWebTable+"/tbody/tr["+i+"]/td[4]/a[2]").click();
				break;
			}
		}
		
		// check for multiple windows
		handles = driver.getWindowHandles();
		iterator = handles.iterator();
				
		while(iterator.hasNext()){
			subWindowHandle = iterator.next();
		}
				
		// switch to the popup window
		driver.switchTo().window(subWindowHandle);
		
		Assert.assertTrue(common.checkTitle("Delete Partition"),"Delete Popup Not launched.");			
		common.selectOption("siteID", securityPartition2);
		common.getObjectByXpath("//input[@value='Delete']").click();
		
		
		driver.switchTo().window(parentWindowHandler);
		
		Assert.assertTrue(common.pageInfoBoxContains("Successfully deleted Partition "+securityPartition1+"."),"Security partition not deleted ");
				
		Navigate.Devices.DeviceTools.resourceIdentityPools();
				
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		Reporter.log("Step 12: verify if Partition got modified as third Security Partition or not? for the same Resouce identity pool"+"<br>");
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName2)){
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[4]").getText().trim().equals(securityPartition2),"Partition is not changed to site "+securityPartition2);
				break;
			}
		}
		Reporter.log("========End testDeletePartitionThatHasResourceIDPoolsAssociated_012===================="+"<br>");
	}
	/*Step 1 :Navigate > Devices > DeviceTools > resourceIdentityPools
	 *Step 2 : create new Security Partition 
	 *Step 3 : create resouce identity pool name1 
	 *Step 4 : create second resouce identity pool with above  created Security partition  
	 *Step 5 : Create new userGroup with above Security Partition (Permissions : 'Resource Identity: Delete','Resource Identity Pool: View')
	 *Step 6 : Create a New User with above created user Group
	 *Step 7 : Reset Password for the above created New User
	 *Step 8 : login As New User
	 *Step 9 : Navigate > Devices > DeviceTools > resourceIdentityPools 
	 *Step 10: Check if the Resource Identity pool created in step 4 is visiable to the newly created  user :: Expected should  be displayed .
	 *Step 11 : Check if the Resource Identity pool created in step 3 is not visiable to the newly created  user :: Expected should not be displayed 
	 *Step 12 : Delete Resource ID  :: Expected should be deleted  
	 */
	
	@Test(enabled = true, groups= {"ART"})
	public void testViewResourceIDTiedToNoDefaultPartitionDeleteResourceID_013() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235247   "+"<br>");
		Reporter.log("========Begin estViewResourceIDTiedToNoDefaultPartitionDeleteResourceID_013===================="+"<br>");
		boolean isVisible = true;
		
		Reporter.log("Step 1:Navigate > Devices > DeviceTools > resourceIdentityPools "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		
		Reporter.log("Step 2: create new Security Partition "+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
								
		Reporter.log("Step 3: create resouce identity pool name1  "+"<br>");
		String resourcePoolName1 = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 4: create second resouce identity pool with above  created Security partition  "+"<br>");
		String resourcePoolName2 = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		NAUtils.addResourceIDsToPool(resourcePoolName2);
		
		Reporter.log("Step 5: Create new userGroup with above Security Partition (Permissions : 'Resource Identity: Delete','Resource Identity Pool: View')"+"<br>");
		String[] customPermissions = {"Resource Identity: Delete","Resource Identity Pool: View"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);	
				
		Reporter.log("Step 6 : Create a New User with above created user Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
			
		Reporter.log("Step 7 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 8 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		
		Reporter.log("Step 9 : Navigate > Devices > DeviceTools > resourceIdentityPools "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
				
		Reporter.log("Step 10 : Check if the Resource Identity pool created in step 4 is visiable to the newly created  user :: Expected should  be displayed  "+"<br>");		
		if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[2]/a").getText().equals(resourcePoolName2)){
			System.out.println(resourcePoolName2+" Resouce pool visible to newly created user");
			Assert.assertTrue(true,resourcePoolName2+" Resouce Pool is not visible to newly created user");
		}
						
		// Checking if the resourcepool 1 created without security partition is not visible to user
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		
		Reporter.log("Step 11 : Check if the Resource Identity pool created in step 3 is not visiable to the newly created  user :: Expected should not be displayed  "+"<br>");
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().equals(resourcePoolName1)){
				System.out.println(resourcePoolName1+" Resouce pool without associated security partition visible to newly created user");
				Assert.assertTrue(false,resourcePoolName1+" Resouce Pool without associated security partition is not visible to newly created user");
				isVisible = false;
				break;
			}
		}
		if(isVisible){
			System.out.println(resourcePoolName1+" Resource Pool without associated security partition not visible to newly created user");
			Assert.assertFalse(false,resourcePoolName1+" Resource Pool without associated security partition is visible to newly created user");
		}
		
		// Step 8
		Reporter.log("Step 12 : Delete Resource ID  :: Expected should be deleted  "+"<br>");
		if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[2]/a").getText().equals(resourcePoolName2)){
			System.out.println(resourcePoolName2+" Resouce pool visible to newly created user");
			common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[2]/a").click();
			String[] getAllIDs = NAUtils.getAllIDsInPool(resourcePoolName2);
			if(getAllIDs.length == 1){
				common.selectOption("select_aid", "All");
				common.selectOption("select_options", "Delete");
				common.handleAlert(true);
				Assert.assertTrue(common.getObjectByClass("alert_2").getText().trim().equals("Your search returned 0 results."),"Resource ID not deleted ");
			}
		}
		
		// Step 9
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Reporter.log("Step 13 : verify the creted  Resource Identity pool name which as having pratition ID 'Add ID' ,'Import IDs' ,'Acquire Next ID' ,'Edit Pool' diplayed or not?:: Expected should not be displayed  "+"<br>");
		Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[8]/acronym[1]").getText().trim().equals("Add IDs"),"Add ID's visible to the user " );
		Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[8]/acronym[2]").getText().trim().equals("Import IDs"),"Import ID's visible to the user ");
		Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[8]/acronym[3]").getText().trim().equals("Acquire Next ID"),"Acquire Next ID visible to the user ");
		Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr[2]/td[8]/acronym[4]").getText().trim().equals("Edit Pool"),"Edit Pool visible to the user ");
		
		Reporter.log("========End estViewResourceIDTiedToNoDefaultPartitionDeleteResourceID_013===================="+"<br>");
	}
	/*Step 1:create the Enhanched customFiled
	 *Step 2:Navigate to Resource Identity pools and add 'New Pool
	 *Step 3: go to create resource Identity pool page > click on cancel button
	 *Step 4: verify  the create resource Identity pool is created or not :: Expected : should not be created   
	 *Step 5: create resource Identity pool with 'custom field'  
	 *Step 6: Verify Success message
	 */
	@Test(enabled = true, groups= {"ART"})
	public void testAssignAttributesToPoolAtCreationTime_001(){
		Reporter.log("ALM Global ID For this test Case:QCTP1B235272   "+"<br>");
		
		Reporter.log("======== Begin testAssignAttributesToPoolAtCreationTime_001==================="+"<br>");
		boolean isVisible = true;
		// Step 2
		prerequisites();
		
		Reporter.log("Step 1:create the Enhanched customFiled"+"<br>");
		String customFieldName = common.generateRandomString();
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(customFieldName));
		
		Reporter.log("Step 2:Navigate to Resource Identity pools and add 'New Pool'  "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText("New Pool").click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Resource Identity Pool"),"New Resource Pool Page didnt open ");
		
		ResourceIdentityPoolAddPage resourceIdentityPageAdd = new ResourceIdentityPoolAddPage();
		
		Reporter.log("check the ResourceIdentityPoolAddPage customFieldName is add or not? :: Expected : should be added "+"<br>");	
		common.selectOption("candidateCustFieldID", customFieldName);
		resourceIdentityPageAdd.addButton.click();
		
		Assert.assertTrue(common.selectOption("chosenCustFieldID", customFieldName),"Cusotom filed is not selected ");
		
			
		Reporter.log("Step 3: go to create resource Identity pool page > click on cancel button"+"<br>");
		
		String resourcePoolName =  common.generateRandomString();
		resourceIdentityPageAdd.resourceIDPoolName.sendKeys(resourcePoolName);
		resourceIdentityPageAdd.resourceIDPoolDesc.sendKeys("Created for testing custom attributes");
		resourceIdentityPageAdd.cancel();
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		Reporter.log("Step 4: verify  the create resource Identity pool is created or not :: Expected : should not be created   "+"<br>");
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		Reporter.log(""+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(!common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				isVisible = false;
			}else{
				isVisible = true;
				break;
			}
		}
		if(!isVisible){
			System.out.println("Didn't create a Resource Identity Pool after hitting cancel");
			Assert.assertFalse(false,"Created a new resource Identity Pool even after hitting cancel");
		}
		
		// Step 6
		
		Reporter.log("Step 5: create resource Identity pool with 'custom field'  "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText("New Pool").click();
		resourceIdentityPageAdd = new ResourceIdentityPoolAddPage();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Resource Identity Pool"),"New Resource Pool Page didnt open ");
		resourceIdentityPageAdd.resourceIDPoolName.sendKeys(resourcePoolName);
		resourceIdentityPageAdd.resourceIDPoolDesc.sendKeys("Created for testing custom attributes");
		
		common.selectOption("candidateCustFieldID", customFieldName);
		resourceIdentityPageAdd.addButton.click();
		
		
		Assert.assertTrue(common.selectOption("chosenCustFieldID", customFieldName),"Cusotom filed is not selected ");
		resourceIdentityPageAdd.save();
		Reporter.log("Step 6: Verify Success message"+"<br>");
		Assert.assertTrue( common.pageInfoBoxContains("Created resource identity pool: "+resourcePoolName),"Resource Identity Pool "+resourcePoolName+" not created.");

		Reporter.log("======== End testAssignAttributesToPoolAtCreationTime_001==================="+"<br>");
	}
	/*Step 1:create Enhanced custom filed
	 *Step 2:create resource identity pool with custom filed name 
	 *Step 3:Navigate the resouce Identity pools
	 *Step 4: Find out Resouce Identity pool created in 'step2' &  click on Edit pool link
	 * Step 5: Select the custom field created above under 'Custom Fields For This Pool'  > click 'Remove >>'
	 * Step 6: Click on 'Cancle' button in Alert message
	 * Step 7: Select the custom field created above under 'Custom Fields For This Pool'  > click 'Remove >>'
	 * Step 8: Click on 'Ok' button in Alert message
	 * Step 9: check if custom filed got removed from the Resource identity pool or not? :: Expected pool should not having custom filed
	 */
	@Test(enabled = true, groups= {"ART"})
	public void testEditAttributeAssignedToPool_002(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235242  "+"<br>");
		Reporter.log("======== Begin testEditAttributeAssignedToPool_002==================="+"<br>");
		prerequisites();
		Reporter.log("Step 1:create Enhanced custom filed "+"<br>");
		String customFieldName = common.generateRandomString();
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(customFieldName));
		
		Reporter.log("Step 2:create resource identity pool with custom filed name "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		String resourcePoolName = NAUtils.createResourceIdentityPools(customFieldName);
		
		Reporter.log("Step 3:Navigate the resouce Identity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		Reporter.log("Step 4: Find out Resouce Identity pool created in 'step2' &  click on Edit pool link "+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[4]").click();
				break;
			}
		}
		
		Reporter.log("Step 5: Select the custom field created above under 'Custom Fields For This Pool'  > click 'Remove >>'"+"<br>");
		ResourceIdentityPoolAddPage resourceIdentityPageAdd = new ResourceIdentityPoolAddPage();
		common.selectOption("chosenCustFieldID", customFieldName);
		common.sleep(3000);
		resourceIdentityPageAdd.removeButton.click();
		
		Reporter.log("Step 6: Click on 'Cancle' button in Alert message"+"<br>");
		// Step 5
		common.handleAlert(false);
		Assert.assertTrue(common.selectOption("chosenCustFieldID", customFieldName),"customer field is removed when clicking on cancel ");
		
				
		Reporter.log("Step 7: Select the custom field created above under 'Custom Fields For This Pool'  > click 'Remove >>'"+"<br>");
		common.selectOption("chosenCustFieldID", customFieldName);
		common.sleep(3000);
		resourceIdentityPageAdd.removeButton.click();
		
		Reporter.log("Step 8: Click on 'Ok' button in Alert message"+"<br>");
		common.handleAlert(true);
		
		Reporter.log("Step 9: check if custom filed got removed from the Resource identity pool or not? :: Expected pool should not having custom filed "+"<br>");
		Assert.assertFalse(common.selectOption("chosenCustFieldID", customFieldName),"customer field is not removed when clicking on done ");
		Reporter.log("======== End testEditAttributeAssignedToPool_002==================="+"<br>");
	}
	/*Step 1: create  customfield"+"<br>
	 *Step 2: create  ResoureceIdentityPool with customfield
	 *Step 3:Navigate to resouce Identity pools
	 *Step 4: Find out Resouce Identity pool created in 'step2' &  click on ADDID link
	 *Step 5: Adding 'ID' for previously Created Resource Identity pool &  Click  on the 'Cancel' button
	 *Step 6: Adding 'ID' for previously Created Resource Identity pool &  Click  on the 'Save' button
	 *Step 7 : verify if ID got Added to Resouce Identity pool or not? :: Expected should be Added
	 */
	
	@Test(enabled = true, groups= {"ART"})
	public void testAddCustomAttributeFieldValuesForIDAtCreationTime_003(){
		
		Reporter.log("ALM Global ID For this test Case: QCTP1B235296 "+"<br>");
		Reporter.log("========Begin testAddCustomAttributeFieldValuesForIDAtCreationTime_003==================="+"<br>");
		boolean isVisible =true;
		prerequisites();
		
		Reporter.log("Step 1: create  customfield"+"<br>");
		String customFieldName = common.generateRandomString();
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(customFieldName));
		
		Reporter.log("Step 2: create  ResoureceIdentityPool with customfield"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		String resourcePoolName = NAUtils.createResourceIdentityPools(customFieldName);
		
		Reporter.log("Step 3:Navigate to resouce Identity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		Reporter.log("Step 4: Find out Resouce Identity pool created in 'step2' &  click on ADDID link "+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[1]").click();
				break;
			}
		}
		
		// Step 4
		Reporter.log("Step 5:  Adding 'ID' for previously Created Resource Identity pool &  Click  on the 'Cancel' button  "+"<br>");
		String resourceId = common.generateRandomString();
		common.getObjectByName("name").sendKeys(resourceId);
		common.getObjectByName("description").sendKeys("Resource id created for "+resourcePoolName);
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys("Creating custom fields");
		common.cancel();
		
		String[] allPools = NAUtils.getAllIDsInPool(resourcePoolName);
		System.out.println("Number of pools is "+allPools.length);
		for(int i=0;i<allPools.length;i++){
			if(allPools[i].equals(resourceId)){
				System.out.println("Assert ID created even when clicking on cancel");
				Assert.assertFalse(false,"Assert ID created even when clicking on cancel");
				break;
			}
		}
		//Reporter.log("Step 5: Click on the 'Cancle' button  "+"<br>");
		Assert.assertTrue(true,"Assert ID not created when clicking on cancel");
		
		// Step 5
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[1]").click();
				break;
			}
		}
		
		Reporter.log("Step 6:  Adding 'ID' for previously Created Resource Identity pool &  Click  on the 'Save' button "+"<br>");
		common.getObjectByName("name").sendKeys(resourceId);
		common.getObjectByName("description").sendKeys("Resource id created for "+resourcePoolName);
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys("Creating custom fields");
		common.save();
		
		allPools = NAUtils.getAllIDsInPool(resourcePoolName);
		
		Reporter.log("Step 7: verify if ID got Added to Resouce Identity pool or not? :: Expected should be Added "+"<br>");
		
		for(int i=0;i<allPools.length;i++){
			if(allPools[i].equals(resourceId)){
				System.out.println("Assert ID created for resourcePool "+resourcePoolName);
				Assert.assertTrue(true,"Assert ID not creted for resourcePool "+resourcePoolName);
				isVisible = true;
				break;
			}else{
				isVisible = false;
			}
		}
		if(!isVisible){
			System.out.println("Assert ID not created for resourcePool "+resourcePoolName);
			Assert.assertTrue(false);
		}
		Reporter.log("========End testAddCustomAttributeFieldValuesForIDAtCreationTime_003==================="+"<br>");
	}
	/*Step 1:Create Enhanced custom field
	 *Step 2: Create Resource Identity pool
	 *Step 3: Click on  ADD ID  link  for the previoursly created resource identity  pool   
	 *Step 4: Creates IDName & custom Filed value for the  Resource Identity pool and Add that id to pool  :: Expected Should be created
	 *Step 5: Navigate to resouceIdentity pools 
	 *Step 6: Open previously Created Resource pool
	 *Step 7 : click on 'Edit ID' > Edit ID name & custom field  values & Replace with new ID name & new custom filed value > Click on the 'CANCEL' button
	 *Step 8 : click on 'Edit ID' > Edit ID name & custom field  values & Replace with new ID name & new custom filed value > Click on the 'Save' button
	 *Step 9 : verify resource  ID name & custom field values got Edited or not ? :: Expected : should be Edited"
	 */
	
	
	@Test(enabled = true, groups= {"ART"})
	public void testEditAResourceIDAttribute_004(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235271  "+"<br>");
		
		prerequisites();
		
		Reporter.log("========Begin testEditAResourceIDAttribute_004==================="+"<br>");
		
		Reporter.log("Step 1:Create Enhanced custom field"+"<br>");
		String customFieldName = common.generateRandomString();
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(customFieldName));
		// Step 2
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Reporter.log("Step 2: Create Resource Identity pool"+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools(customFieldName);
		
		Reporter.log("Step 3: Click on  ADD ID  link  for the previoursly created resource identity  pool  "+"<br>");
		String IDName = common.generateRandomString();
		String customFieldValue = common.generateRandomString();
		
		Reporter.log("Step 4: Creates IDName & custom Filed value for the  Resource Identity pool and Add that id to pool  :: Expected Should be created " +"<br>");
		Assert.assertTrue(NAUtils.addResourceIDsToPoolCustom(resourcePoolName,IDName,null,customFieldValue,null),"Not able to add IDs to pool ");
		
		Reporter.log("Step 5: Navigate to resouceIdentity pools " +"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		Reporter.log("Step 6: Open previously Created Resource pool  > " +"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				break;
			}
		}
		
		// Step 4
		Reporter.log("Step 7 : click on 'Edit ID' > Edit ID name & custom field  values & Replace with new ID name & new custom filed value > Click on the 'CANCEL' button  " +"<br>");
		String newIDName = common.generateRandomString("newID");
		String newCustomValue = common.generateRandomString("newCustom");
		common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[7]/a[2]").click();
		
		// Step 5
		common.getObjectByName("name").clear();
		common.getObjectByName("name").sendKeys(newIDName);
		common.getObjectByName("customFieldValue("+customFieldName+")").clear();
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys(newCustomValue);
		common.cancel();
		
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[2]/a").getText().equals(IDName),"ID name changed after hitting on cancel");
		
		Reporter.log("Step 8 : click on 'Edit ID' > Edit ID name & custom field  values & Replace with new ID name & new custom filed value > Click on the 'Save' button  " +"<br>");
		common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[7]/a[2]").click();
		common.getObjectByName("name").clear();
		common.getObjectByName("name").sendKeys(newIDName);
		common.getObjectByName("customFieldValue("+customFieldName+")").clear();
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys(newCustomValue);
		common.save();
		
		Reporter.log("Step 9 : verify resource  ID name & custom field values got Edited or not ? :: Expected : should be Edited" +"<br>");
		Assert.assertTrue(common.pageInfoBoxContains("Edited ID: "+newIDName),"Edit is not reflected after saving");
	
		Reporter.log("========End testEditAResourceIDAttribute_004==================="+"<br>");
	}
	
	/*Step 1: Navigate to ResourceIdentityPools
	 *Step 2: Create Resource Identity Pool
	 *Step 3: Click on  'ADD ID'  link  for the previoursly created resource identity  pool 
	 *Step 4: 'click' on previoursly created resource identity  pool  
	 *Step 5: Click on ID name which is created in step2
	 *Step 6: 'click' on 'Edit' button   
	 *Step 7: Verify the Title Edit Resource Identity page displayed or not? :: Expected: should be displayed
	 */
	@Test(enabled = true, groups= {"ART"})
	public void testViewAResourceIDAttribute_005(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235241  "+"<br>");

		Reporter.log("========Begin testViewAResourceIDAttribute_005==================="+"<br>");
		
		
		Reporter.log(" Step 1: Navigate to ResourceIdentityPools"+"<br>");

		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		Reporter.log(" Step 2: Create Resource Identity Pool"+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		
		
		Reporter.log("Step 3: Click on  'ADD ID'  link  for the previoursly created resource identity  pool   "+"<br>");
		
		String IDName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName,IDName,null),"Not able to add IDs to pool ");
		
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Reporter.log("Step 4 : 'click' on previoursly created resource identity  pool   "+"<br>");
		common.pageSizeOption("All");
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"Resource Identities in Pool page not launched. ");
		
		Reporter.log("Step 5 : Click on ID name which is created in step2"+"<br>");
		common.getObjectByLinkText(IDName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity: "+IDName),"ID page not launched ");
		Assert.assertTrue(driver.findElements(By.linkText("Edit")).size()>0,"ID edit not available at the right corner ");
		
		Reporter.log("Step 6 : 'click' on 'Edit' button    "+"<br>");
		common.getObjectByLinkText("Edit").click();
		
		Reporter.log("Step 7:verify the Title Edit Resource Identity page displayed or not? :: Expected: should be displayed"+"<br>");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Edit Resource Identity: "+IDName),"Edit ID page not launched. ");
		
		Reporter.log("========End testViewAResourceIDAttribute_005==================="+"<br>");
		
	}
	/*Step 1: Create custom field
	 *Step 2: Create ResourceIdentityPools 
	 *Step 3: ADD ID  for the previoursly created resource identity  pool
	 *Step 4: 'click' on previoursly created resource identity  pool
	 *Step 5: 'click' on 'Acquire ID' > Enter the customfield value & click on 'Cancel' button 
	 *Step 6: 'verify the page titel 'Resource Identities in Pool' displayed or not :: Expected :should be displayed   
	 *Step 7: 'click' on 'Acquire ID' > Enter the customfield value & click on 'saveAndAcquire' button
	 *Step 8: Verify 'Release ID' link displalyed or not :: Expected :should be displayed
	 */
	
	@Test(enabled = true, groups= {"ART"})
	public void testSettingAttributesAtAcquireIDTime_006(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235261   "+"<br>");
		Reporter.log("========Begin testSettingAttributesAtAcquireIDTime_006==================="+"<br>");
		
		prerequisites();
		
		Reporter.log(" Step 1: Create custom field"+"<br>");
		String customFieldName = common.generateRandomString();
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(customFieldName));
		
		Reporter.log(" Step 2: Create ResourceIdentityPools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		String resourcePoolName = NAUtils.createResourceIdentityPools(customFieldName);
		Reporter.log("Step 3: ADD ID  for the previoursly created resource identity  pool  "+"<br>");
		String IDName = common.generateRandomString();
		String customFieldValue = common.generateRandomString();
			
		Assert.assertTrue(NAUtils.addResourceIDsToPoolCustom(resourcePoolName,IDName,null,customFieldValue,null),"Not able to add IDs to pool ");
		
		Reporter.log("Step 4 : 'click' on previoursly created resource identity  pool   "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"Resource Identities in Pool page not launched. ");
		
		Reporter.log("Step 5: 'click' on 'Acquire ID' > Enter the customfield value & click on 'Cancel' button   "+"<br>");
		common.getObjectByLinkText("Acquire ID").click();
		common.getObjectByName("customFieldValue("+customFieldName+")").clear();
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys("Testing cancel");
		common.cancel();
		
		Reporter.log("Step 6:verify the page titel 'Resource Identities in Pool' displayed or not :: Expected :should be displayed  "+"<br>");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"Resource Identities in Pool page not launched. ");
		
		Reporter.log("Step 7: 'click' on 'Acquire ID' > Enter the customfield value & click on 'saveAndAcquire' button   "+"<br>");
		common.getObjectByLinkText("Acquire ID").click();
		common.getObjectByName("customFieldValue("+customFieldName+")").clear();
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys("Testing Save and acquire");
		common.saveAndAcquire();
		Assert.assertTrue(common.pageInfoBoxContains("You have acquired the following resource identity:"),"Not able to acquire ID for the pool "+resourcePoolName);
		
		Reporter.log("Step 8: Verify 'Release ID' link displalyed or not :: Expected :should be displayed  "+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText("Release ID")).size()>0,"Not able to find Release ID ");
		
		Reporter.log("========End testSettingAttributesAtAcquireIDTime_006==================="+"<br>");
	}
	/*Step 1: create  custom field
	 *Step 2: Navigate to resourceIdentityPools
	 *Step 3: Create Resource Identity pool with custom Field
	 *Step 4: ADD ID  for the previoursly created resource identity  pool 
	 *Step 5: Creates IDName & custom Filed value for the  Resource Identity pool and Add that id to pool  :: Expected Should be created
	 *Step 6: 'click' on 'Acquire ID' > Enter the customfield value & click on 'saveAndAcquire' button
	 *Step 7: 'click' on 'Release ID' > Enter the customfield value & click on 'cancel' button
	 *Step 8: Verify the page titel 'Resource Identities in Pool' displayed or not :: Expected :should be displayed
	 *Step 9:'click' on 'Release ID' > Entered the customfield value & click on 'saveAndRelease' button
	 *Step 10: Verify the  'Acquire ID' link displalyed or not :: Expected :should be displayed  
	 *
	 *
	 */
	@Test(enabled = true, groups= {"ART"})
	public void testSettingAttributeAtReleaseIDTime_007(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235274   "+"<br>");
		Reporter.log("===============Begin testSettingAttributeAtReleaseIDTime_007========================"+"<br>");
		
		prerequisites();
		
		Reporter.log(" Step 1: Create  custom field"+"<br>");
		
		String customFieldName = common.generateRandomString();
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(customFieldName));
		
		Reporter.log(" Step 2: Navigate to resourceIdentityPools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		
		Reporter.log(" Step 3: Create Resource Identity pool with custom Field"+"<br>");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		String resourcePoolName = NAUtils.createResourceIdentityPools(customFieldName);
		
		Reporter.log("Step 4: ADD ID  for the previoursly created resource identity  pool  "+"<br>");
		String IDName = common.generateRandomString();
		String customFieldValue = common.generateRandomString();		
		Assert.assertTrue(NAUtils.addResourceIDsToPoolCustom(resourcePoolName,IDName,null,customFieldValue,null),"Not able to add IDs to pool ");
		
		Reporter.log("Step 5 : 'click' on previoursly created resource identity  pool   "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"Resource Identities in Pool page not launched. ");
		
		Reporter.log("Step 6 : 'click' on 'Acquire ID' > Enter the customfield value & click on 'saveAndAcquire' button   "+"<br>");
		common.getObjectByLinkText("Acquire ID").click();
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys("Testing Release ID");
		common.saveAndAcquire();
		Assert.assertTrue(common.pageInfoBoxContains("You have acquired the following resource identity:"),"Not able to acquire ID for the pool "+resourcePoolName);
		
		Reporter.log("Step 7 : 'click' on 'Release ID' > Enter the customfield value & click on 'cancel' button   "+"<br>");
		common.getObjectByLinkText("Release ID").click();
		common.getObjectByName("customFieldValue("+customFieldName+")").clear();
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys("Testing Release ID with cancel");
		common.cancel();
		
		Reporter.log("Step 8 : Verify the page titel 'Resource Identities in Pool' displayed or not :: Expected :should be displayed  "+"<br>");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"Resource Identities in Pool page not launched. ");
		
		Reporter.log("Step 10 : 'click' on 'Release ID' > Enter the customfield value & click on 'saveAndRelease' button   "+"<br>");
		common.getObjectByLinkText("Release ID").click();
		common.getObjectByName("customFieldValue("+customFieldName+")").clear();
		common.getObjectByName("customFieldValue("+customFieldName+")").sendKeys("Testing Release ID with Save");
		common.saveAndRelease();
		Assert.assertTrue(common.pageInfoBoxContains("Released ID: "+IDName),"Not able to release the ID");
		
		Reporter.log("Step 11 : Verify the  'Acquire ID' link displalyed or not :: Expected :should be displayed  "+"<br>");
		Assert.assertTrue( driver.findElements(By.linkText("Acquire ID")).size()>0,"Not able to find Acquire ID ");
		
		Reporter.log("===================End of testSettingAttributeAtReleaseIDTime_007====================="+"<br>");
	}
	/*Step1 : Create Security Partition
	 *Step2 : Create Resouce Identiy pool with Security Partition 
	 *Step 3: Click on  ADD ID  link  for the previoursly created resource identity  pool 
	 *Step 4: Create new userGroup with above Security Partition (Permissions : 'Resource Identity: View','Resource Identity Pool: View')
	 *Step 5: Create a New User with above created user Group
	 *Step 6 : Reset Password for the above created New User
	 *Step 7 : login As New User
	 *Step 8 : Navigate to resourceIdentity pools
	 *Step 9 : 'click' on previoursly created resource identity  pool 
	 *Step 10 : 'click' on 'IDName'  
	 *Step 11 : Verify the Edit link is accessable for the newly login user or not? :: Expected : newly user should not have permission 
	 */
	
	
	
	@Test(enabled = true, groups= {"ART"})
	public void testUserPermissionCheckEditIDLinkOnResourceIDInfoPage_008() throws InterruptedException{
		
		Reporter.log("ALM Global ID For this test Case: QCTP1B235282  "+"<br>");
		Reporter.log("===============Begin testUserPermissionCheckEditIDLinkOnResourceIDInfoPage_008========================");
		
		Reporter.log("Step1 : Create Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step2 : Create Resouce Identiy pool with Security Partition"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		String resourcePoolName = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		Reporter.log("Step 3: Click on  ADD ID  link  for the previoursly created resource identity  pool  "+"<br>");
		String IDName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName,IDName,null),"Not able to add IDs to pool ");

		Reporter.log("Step 4: Create new userGroup with above Security Partition (Permissions : 'Resource Identity: View','Resource Identity Pool: View')"+"<br>");
		String[] customPermissions = {"Resource Identity: View","Resource Identity Pool: View"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		Reporter.log("Step 5: Create a New User with above created user Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 6: Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 7: login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));

		
		Reporter.log("Step 8: Navigate to resourceIdentity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue( common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		Reporter.log("Step 9: 'click' on previoursly created resource identity  pool   "+"<br>");
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"Resource Identities in Pool page not launched. ");
		
		Reporter.log("Step 10: 'click' on 'IDName'  "+"<br>");
		common.getObjectByLinkText(IDName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity: "+IDName),"ID Details page not opened ");
		Reporter.log("Step 11: Verify the Edit link is accessable for the newly login user or not? :: Expected : newly user should not have permission "+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText("Edit")).size()<=0,"Edit Link visible to the user with the permission");
		
		Reporter.log("===============End testUserPermissionCheckEditIDLinkOnResourceIDInfoPage_008========================");
	}
	
	/*Step 1: Create Security Partition
	 *Step 2: Create ResourceIdentityPool with Security Partition and add an Resource ID
	 *Step 3: Create new userGroup with above Security Partition (Permissions : 'Resource Identity: View','Resource Identity Pool: View')
	 *Step 4: Create a New User with above created user Group
	 *Step 5: Reset Password for the above created New User
	 *Step 6: login As New User
	 *Step 7: Navigate to resourceIdentity pools
	 *Step 8: 'click' on previoursly created resource identity  pool 
	 *Step 9: Verify 'Edit ID' link is accessable for the newly logedin user or not? :: Expected : new user should not have permission
	 *
	 */
	@Test(enabled = true, groups= {"ART"})
	public void testUserPermissionCheckEditIDLinkOnResourceIDListPage_009() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235238  "+"<br>");
		Reporter.log("===============Begin testUserPermissionCheckEditIDLinkOnResourceIDListPage_009========================"+"<br>");
		
		Reporter.log("Step 1: Create Security Partition"+"<br>");
		String securityPartition = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step 2: Create ResourceIdentityPool with Security Partition and add an Resource ID"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		String resourcePoolName = NAUtils.createResourceIdentityPools(null,securityPartition, null);
		String IDName = common.generateRandomString();
		
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName,IDName,null),"Not able to add IDs to pool ");

		Reporter.log("Step 3: Create new userGroup with above Security Partition (Permissions : 'Resource Identity: View','Resource Identity Pool: View')"+"<br>");
		String[] customPermissions = {"Resource Identity: View","Resource Identity Pool: View"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		Reporter.log("Step 4: Create a New User with above created user Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 5: Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 6: login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 7: Navigate to resourceIdentity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		Reporter.log("Step 8: 'click' on previoursly created resource identity  pool   "+"<br>");
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"Resource Identities in Pool page not launched. ");
		
		Reporter.log("Step 9: Verify 'Edit ID' link is accessable for the newly logedin user or not? :: Expected : new user should not have permission "+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText("Edit ID")).size()<=0,"Edit ID visible to the user with the permission");
		
		Reporter.log("===============End testUserPermissionCheckEditIDLinkOnResourceIDListPage_009========================"+"<br>");
	}
	
	/*Step1 : Navgite to ResouceIdentitPools
	 *Step2 : Create Resouce Identity Pool & Verify if Name,Description,Partition,IDs: Available,In Use,Total and Actions colums are displayed  or not? Expected : should be dispalyed 
	 *Step3 : Verify above created Resouce identity pool having : Add IDs,Import IDs,Acquire Next ID,Edit Pool are displayed  or not? Expected : should be dispalyed 
	 * 
	 */
	
	@Test(enabled = true, groups= {"ART"})
	public void testViewAListOfResourceIDPools_001(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235280  "+"<br>");
		Reporter.log("===============Start testViewAListOfResourceIDPools_001========================"+"<br>");
		
		Reporter.log("Step1 : Navgite to ResouceIdentitPools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched"+"<br>");
		
		Reporter.log("Step2 : Create Resouce Identity Pool & Verify if Name,Description,Partition,IDs: Available,In Use,Total and Actions colums are displayed  or not? Expected : should be dispalyed "+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[4]/form/table/tbody/tr[1]/td[2]").getText().equals("Name"),"Name column is missing in the table ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[4]/form/table/tbody/tr[1]/td[3]").getText().equals("Description"),"Description column is missing in the table ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[4]/form/table/tbody/tr[1]/td[4]").getText().equals("Partition"),"Partition colum is missing in the table ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[4]/form/table/tbody/tr[1]/td[5]").getText().equals("IDs: Available"),"IDs Available is missing in the table ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[4]/form/table/tbody/tr[1]/td[6]").getText().equals("In Use"),"In Use is missing in the table ");
		Assert.assertTrue( common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[4]/form/table/tbody/tr[1]/td[7]").getText().equals("Total"),"Total is missing in the table ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[4]/form/table/tbody/tr[1]/td[8]").getText().equals("Actions"),"Actions is missing in the table ");
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		Reporter.log("Step3 : Verify above created Resouce identity pool having : Add IDs,Import IDs,Acquire Next ID,Edit Pool are displayed  or not? Expected : should be dispalyed "+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[1]").getText().equals("Add IDs"),"ADD IDs missing for the resource pool "+resourcePoolName);
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[2]").getText().equals("Import IDs"),"Import IDs missing for the resouce Pool "+resourcePoolName);
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[3]").getText().equals("Acquire Next ID"),"Acquire Next ID missing for the resouce Pool "+resourcePoolName);
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[4]").getText().equals("Edit Pool"),"Edit Pool missing for the resouce Pool "+resourcePoolName);
				break;
			}
		}
			
		Reporter.log("===============End testViewAListOfResourceIDPools_001========================"+"<br>");
	}
	
	/*Step 1 : Navigate to Resouce Identity Pools
	 *Step 2 : Click on 'New Pool' >verify the Page title and Click on 'Save'  
	 *Step 3 : verify  'Alert Box' text shows 'Missing field : Resource Identity Pool' :: Expected : should be displayed
	 *Step 4 : Click on 'Cancel'button & verify the page title as 'Resource Identity Pools' displayed or not ::Expected : should be displayed
	 *Step 5 :Create Resource Identity pool
	 *Step 6 :Check if AlertBox shows Message as 'Resource identity pool' name is already exists or not? :: Expected : should be displayed 
	 *Step 7 : Verify the Page title as 'New Resource Identity Pool' displayed or not? :: Expected : should be displayed
	 */
	
	@Test(enabled = true, groups= {"ART"})
	public void testAddANewResoucePoolID_002(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235236  "+"<br>");
		Reporter.log("===============Start testAddANewResoucePoolID_002========================"+"<br>");
		
		Reporter.log("Step 1 : Navigate to Resouce Identity Pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		Reporter.log("Step 2 : Click on 'New Pool' >verify the Page title and Click on 'Save'  "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText("New Pool").click();
		System.out.println("Page title top "+common.getObjectById("PageTitleTop").getText());
		Assert.assertTrue(common.getObjectById("PageTitleTop").getText().equals("New Resource Identity Pool"),"New resouce Identity Pool not launched ");
		
		Reporter.log("Step 3 : verify  'Alert Box' text shows 'Missing field : Resource Identity Pool' :: Expected : should be displayed "+"<br>");
		common.save();
		Assert.assertTrue(common.pageAlert3BoxContains("Missing field : Resource Identity Pool."),"No error thrown without entering name ");
		
		Reporter.log("Step 4 : Click on 'Cancel'button & verify the page title as 'Resource Identity Pools' displayed or not ::Expected : should be displayed"+"<br>");
		common.cancel();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		Reporter.log("Step 5 :Create Resource Identity pool "+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText("New Pool").click();
		common.getObjectByName("resourceIDPoolName").sendKeys(resourcePoolName);
		common.save();
		Reporter.log("Step 6 :Check if AlertBox shows Message as 'Resource identity pool' name is already exists or not? :: Expected : should be displayed "+"<br>");
		Assert.assertTrue( common.pageAlert3BoxContains("Resource identity pool: "+resourcePoolName+" already exists."),"Able to create a new resource pool with the same name ");
		common.back();
		Reporter.log("Step 7 : Verify the Page title as 'New Resource Identity Pool' displayed or not? :: Expected : should be displayed"+"<br>");
		Assert.assertTrue(common.getObjectById("PageTitleTop").getText().equals("New Resource Identity Pool"),"New resouce Identity Pool not launched ");
		
		Reporter.log("===============End testAddANewResoucePoolID_002========================"+"<br>");
		
	}
	
	/*Step 1: Navigate to Resouce Identity pools
	 *Step 2: Create Resource Identity pool
	 *Step 3: Click on 'Edit Pool' link for above created Resouce identity pool 
	 *Step 4: Click on 'Cancel' link & Verify the Page Title
	 *Step 5: Navigate to Resouce Identity pools
	 *Step 6: Click on 'Edit Pool' link for above created Resouce identity pool > Modify Resouce ID Name & Discription > Save.
	 *Step 7: Verify if Resouce ID Name & Discription got Updated or not ? Expected : should be updated
	 */
	
	@Test(enabled = true, groups= {"ART"})
	public void testEditingAnExistingResoucePool_003(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235240  "+"<br>");
		Reporter.log("===============Start testEditingAnExistingResoucePool_003========================"+"<br>");
		
		Reporter.log("Step 1: Navigate to Resouce Identity pools"+"<br>");
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		Reporter.log("Step 2: Create Resource Identity pool "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		Reporter.log("Step 3: Click on 'Edit Pool' link for above created Resouce identity pool"+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[4]").click();
				break;
			}
		}
		
		Reporter.log("Step 4: Click on 'Cancel' link & Verify the Page Title "+"<br>");
		common.cancel();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		Reporter.log("Step 5: Navigate to Resouce Identity pools "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Reporter.log("Step 6: Click on 'Edit Pool' link for above created Resouce identity pool > Modify Resouce ID Name & Discription > Save"+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[4]").click();
				break;
			}
		}
		
		resourcePoolName = common.generateRandomString();
		String resoucePoolDescription = "Changed for Automation";
		common.getObjectByName("resourceIDPoolName").clear();
		common.getObjectByName("resourceIDPoolName").sendKeys(resourcePoolName);
		common.getObjectByName("resourceIDPoolDescription").clear();
		common.getObjectByName("resourceIDPoolDescription").sendKeys(resoucePoolDescription);
		common.save();
		
		Reporter.log("Step 7: Verify if Resouce ID Name & Discription got Updated or not ? Expected : should be updated"+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				Assert.assertTrue( true,"The resouce ID name changes are not udpated for the resource pool "+resourcePoolName);
				Assert.assertTrue(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[3]").getText().trim().equals(resoucePoolDescription),"The Description changes are not updated for the resouce pool "+resourcePoolName);
				break;
			}
		}
		
		Reporter.log("===============End testEditingAnExistingResoucePool_003========================"+"<br>");
		
	}
	
	/*Step 1: Navigate to Resouce IdentiyPools
	 *Step 2: Create Resouce Identiy pool 
	 *Step 3: Select the Check box for above Created Resouce Idenity Pool and Selelct Option as 'Delete' in Dropdown Filed > Click on Cancle button
	 *Step 4: verify above Created  Resouce Identity Pool displayed or not? :: Expected :should be dispalyed
	 *Step 5: Select the Check box for above Created Resouce Idenity Pool and Selelct Option as 'Delete' in Dropdown Filed > Click on OK button
	 *Step 6: verify above Created  Resouce Identity Pool displayed or not? :: Expected :should not be dispalyed
	 *Step 7: verify Page Title as 'New Resource Identity Pool' displayed  or not ?:: Expected : should be displayed
	 */
	
	@Test(enabled = true, groups= {"ART"})
	public void testDeletingResourceIdentityPool_004(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235270  "+"<br>");
		Reporter.log("===============Start testDeletingResourceIdentityPool_004========================"+"<br>");
		
		Reporter.log("Step 1: Navigate to Resouce IdentiyPools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		
		Reporter.log("Step 2: Create Resouce Identiy pool"+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		Reporter.log("Step 3: Select the Check box for above Created Resouce Idenity Pool and Selelct Option as 'Delete' in Dropdown Filed > Click on Cancle button"+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[1]/input").click();
				break;
			}
		}
		common.selectOption("select_options", "Delete");
		common.handleAlert(false);
		
		Reporter.log("Step 4: verify above Created  Resouce Identity Pool displayed or not? :: Expected :should be dispalyed "+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText(resourcePoolName)).size()>0,"Resouce Pool "+resourcePoolName+" is deleted. ");		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		
		Reporter.log("Step 5: Select the Check box for above Created Resouce Idenity Pool and Selelct Option as 'Delete' in Dropdown Filed > Click on OK button"+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[1]/input").click();
				break;
			}
		}
		common.selectOption("select_options", "Delete");
		common.handleAlert(true);
		
		Reporter.log("Step 6: verify above Created  Resouce Identity Pool displayed or not? :: Expected :should not be dispalyed "+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText(resourcePoolName)).size()<=0,"Resouce Pool "+resourcePoolName+" is deleted. ");

		common.back();
		
		Reporter.log("Step 7: verify Page Title as 'New Resource Identity Pool' displayed  or not ?:: Expected : should be displayed "+"<br>");
		Assert.assertTrue(common.getObjectById("PageTitleTop").getText().equals("New Resource Identity Pool"),"New Resouce pool page not lacunched");
		
		Reporter.log("===============End testDeletingResourceIdentityPool_004========================"+"<br>");
	}
	  /*Step 1: Navigate to Resouce Identity Pool
	   *Step 2: Create Resouce Identity Pool
	   *Step 3: Click on 'ADD ID' link for  above  Resouce Identity Pool and Click on 'Cancel' button
	   *Step 4: Click on 'ADDID' link  for  above  Resouce Identity Pool & Add to ID
	   *Step 5: Click on 'ADDID' link > clear 'ID' & Replace same 'ID'  for  above  Resouce Identity Pool
	   *Step 6: Verify the Alert Message text  as '1 IDs already exist in this pool and were not added' displayed or not ? Expected : should be displayed
	   *Step 7: Click on   above  created  Resouce Identity Pool
	   *Step 8: Verify if above Created Resouce id is having :'ID','Status,Created','Last Modified By', 'Last Modified','Actions','Acquire ID','Edit ID' & 'Add IDs','Import IDs','Acquire Next ID','Edit Pool','List Pools'   Expeted : should be displayed "+"<br>
	   *Step 9: Verify Title as 'Resouce Identity Pools'  displayed or not ? Expected : should be displayed
	   *
	   */
	@Test(enabled = true, groups= {"ART"})
	public void testAddResouceIDToExistingPool_005(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235284  "+"<br>");
		Reporter.log("===============Start testAddResouceIDToExistingPool_005========================"+"<br>");
		
		Reporter.log("Step 1: Navigate to Resouce Identity Pool"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		Reporter.log("Step 2: Create Resouce Identity Pool"+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools();		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		Reporter.log("Step 3: Click on 'ADD ID' link for  above  Resouce Identity Pool and Click on 'Cancel' button"+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[1]").click();
				common.cancel();
				Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Did not lauch Resource Identity Pools page after cancel");
				break;
			}
		}
		
		
		String idName = common.generateRandomString();
		Reporter.log("Step 4: Click on 'ADDID' link  for  above  Resouce Identity Pool & Add to ID"+"<br>");
		NAUtils.addResourceIDsToPool(resourcePoolName, idName , null);
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		Reporter.log("Step 5: Click on 'ADDID' link > clear 'ID' & Replace same 'ID'  for  above  Resouce Identity Pool"+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[1]").click();
				break;
			}
		}
		
		common.getObjectByName("resourceIDNameValue(3)").sendKeys(idName);
		common.getObjectByName("resourceIDDescriptionValue(3)").sendKeys("Resouce id for testing");
		common.save();
		
		Reporter.log("Step 6: Verify the Alert Message text  as '1 IDs already exist in this pool and were not added' displayed or not ? Expected : should be displayed "+"<br>");
		Assert.assertTrue(driver.findElement(By.className("alert_2")).getText().startsWith("1 IDs already exist in this pool and were not added."),"Albe to add duplicate ID ");
		
		Reporter.log("Step 7: Click on   above  created  Resouce Identity Pool"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				break;
			}
		}
		Reporter.log("Step 8: Verify if above Created Resouce id is having :'ID','Status,Created','Last Modified By', 'Last Modified','Actions','Acquire ID','Edit ID' & 'Add IDs','Import IDs','Acquire Next ID','Edit Pool','List Pools'   Expeted : should be displayed "+"<br>");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[2]").getText().equals("ID"),"ID not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[3]").getText().equals("Status"),"Status not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[4]").getText().equals("Created By"),"Created By not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[5]").getText().equals("Last Modified By"),"Last Modified By not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[6]").getText().equals("Last Modified"),"Last Modified not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[7]").getText().equals("Actions"),"Actions not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[7]/a[1]").getText().equals("Acquire ID"),"Acquire ID not present for the ID"+idName);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[7]/a[2]").getText().equals("Edit ID"),"Edit ID not present for the ID"+idName);
		
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[1]").getText().equals("Add IDs"),"Add IDs not found in the page "+idName);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[2]").getText().equals("Import IDs"),"Import IDs not found in the page "+idName);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[3]").getText().equals("Acquire Next ID"),"Acquire Next ID not found in the page "+idName);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[4]").getText().equals("Edit Pool"),"Edit Pool not found in the page "+idName);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[5]").getText().equals("List Pools"),"List Pools not found in the page "+idName);
		
		
		common.back();
		
		Reporter.log("Step 9: Verify Title as 'Resouce Identity Pools'  displayed or not ? Expected : should be displayed "+"<br>");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		Reporter.log("===============End testAddResouceIDToExistingPool_005========================"+"<br>");
		
	}
	//open Resource identity pool > verify Existence of 'ID','Status,Created','Last Modified By', 'Last Modified','Actions','Acquire ID','Edit ID' & 'Add IDs','Import IDs','Acquire Next ID','Edit Pool','List Pools' . Also verify Acquired ID & Release ID links.
	@Test(enabled = true, groups= {"ART"})
	public void testViewResouceIDInResouceIdentiyPool_006(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235262  "+"<br>");
		Reporter.log("===============Start testViewResouceIDInResouceIdentiyPool_006========================"+"<br>");
		
		Reporter.log("Step 1: Navigate to ResourceIdentityPools"+"<br>");
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		String idName1 = common.generateRandomString();
		String idName2 = common.generateRandomString();
		Reporter.log("Step 2: Create  ResourceIdentityPool with Two Add ID's"+"<br>");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		NAUtils.addResourceIDsToPool(resourcePoolName,idName1,null);
		NAUtils.addResourceIDsToPool(resourcePoolName,idName2,null);
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		Reporter.log("Step 3: 'Click' on above  'Create  ResourceIdentityPool' "+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
				break;
			}
		}
		
				
	
		Reporter.log("Step 4: Verify if above Created Resouce id is having :'ID','Status,Created','Last Modified By', 'Last Modified','Actions','Acquire ID','Edit ID' & 'Add IDs','Import IDs','Acquire Next ID','Edit Pool','List Pools'   Expeted : should be displayed "+"<br>");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[2]").getText().equals("ID"),"ID not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[3]").getText().equals("Status"),"Status not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[4]").getText().equals("Created By"),"Created By not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[5]").getText().equals("Last Modified By"),"Last Modified By not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[6]").getText().equals("Last Modified"),"Last Modified not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[1]/td[7]").getText().equals("Actions"),"Actions not found in the page ");
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[7]/a[1]").getText().equals("Acquire ID"),"Acquire ID not present for the ID"+idName1);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr[2]/td[7]/a[2]").getText().equals("Edit ID"),"Edit ID not present for the ID"+idName1);
		
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[1]").getText().equals("Add IDs"),"Add IDs not found in the page "+idName1);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[2]").getText().equals("Import IDs"),"Import IDs not found in the page "+idName1);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[3]").getText().equals("Acquire Next ID"),"Acquire Next ID not found in the page "+idName1);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[4]").getText().equals("Edit Pool"),"Edit Pool not found in the page "+idName1);
		Assert.assertTrue(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/div[1]/a[5]").getText().equals("List Pools"),"List Pools not found in the page "+idName1);
		
		
		
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
		
		
		Reporter.log("Step 5: Click on 'Acquired ID' for 'idName1'  & Verify the 'pageinfbox'  Message  as 'You have acquired the following resource identity' "+"<br>");
		for(int i=2;i<=rows.size();i++){
			//System.out.println("value is : "+common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText()+" idname1 is : "+idName1);
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText().trim().equals(idName1)){
				//System.out.println("Into");
				common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[7]/a[1]").click();
				Assert.assertTrue(common.pageInfoBoxContains("You have acquired the following resource identity:"),"Not able to acquire ID ");
				break;
			}
		}
		Reporter.log("Step 6:  Verify ResourcIDSlist to check 'idName1' &' idName2' are displayed or not ? ::Expected :should be displayed   "+"<br>");
		common.selectOption("ResourceIDsList", "All");
		Assert.assertTrue(common.getObjectByLinkText(idName1).getText().equals(idName1),"Didnt show idName1 when clicking on All ");
		Assert.assertTrue(common.getObjectByLinkText(idName2).getText().equals(idName2),"Didnt show idName2 when clicking on ALl");
		
		Reporter.log("Step 7: Check if  'idName2' Status shows 'Available' or not ? :: Expected :should be Available' "+"<br>");
		common.selectOption("ResourceIDsList", "Available");
		Assert.assertTrue(common.getObjectByLinkText(idName2).getText().equals(idName2),"Didnt show idName2 when clicking on Available");
		
		Reporter.log("Step 8: Check if  'idName1' Status shows 'Available' or not ? :: Expected :should not be Available' "+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText(idName1)).size()<=0,"Didnt show idName1 when clicking on Available ");
		
		Reporter.log("Step 9: Check if  'idName1' Status shows 'In Use' or not ? :: Expected :should  be 'In use' "+"<br>");
		common.selectOption("ResourceIDsList", "In Use");
		Assert.assertTrue( common.getObjectByLinkText(idName1).getText().equals(idName1),"Didnt show idName1 when clicking on In Use");
		
		Reporter.log("Step 10: Check if  'idName2' Status shows 'In Use' or not ? :: Expected :should not be In Use' "+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText(idName2)).size()<=0,"Didnt show idName2 when clicking on In Use");
		
		Reporter.log("Step 11:  click on 'Release ID' for the 'IdName1' "+"<br>");
		common.getObjectByLinkText("Release ID").click();
		
		
		Reporter.log("Step 12:  Verify the 'idName1' Status shows ' Available' or not ? ::Expected : should be 'Available' "+"<br>");
		common.selectOption("ResourceIDsList", "Available");				
		Assert.assertTrue(common.getObjectByLinkText(idName1).getText().equals(idName1),"Didnt show idName1 when clicking on All ");
		
		Reporter.log("===============End testViewResouceIDInResouceIdentiyPool_006========================"+"<br>");
	}
	
	// Create Resource identity pool > Add two Resource Identity ID's to that pool > Delete the Two ID's 
	@Test(enabled = true, groups= {"ART"})
	public void testDeletingIDInResourceIdentityPool_007(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235294  "+"<br>");
		Reporter.log("===============Start testDeletingIDInResourceIdentityPool_007========================"+"<br>");
		
		Reporter.log("Step 1: Navigate to ResourceIdentityPools >  create Resouce identity pool > Add two Resource Identity ID's to that pool"+"<br>");
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		String idName1 = common.generateRandomString();
		String idName2 = common.generateRandomString();
		
	
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		NAUtils.addResourceIDsToPool(resourcePoolName,idName1,null);
		NAUtils.addResourceIDsToPool(resourcePoolName,idName2,null);
		
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		Reporter.log("Step 2:  'Click' on above created Resource Identity Pool  "+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
				break;
			}
		}
		
		
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
	
		
		Reporter.log("Step 3:   Click on 'Acquired ID' for 'idName1' & Verify the 'pageinfbox'  Message  as 'You have acquired the following resource identity' "+"<br>");
		for(int i=2;i<=rows.size();i++){
			//System.out.println("value is : "+common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText()+" idname1 is : "+idName1);
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText().trim().equals(idName1)){
				//System.out.println("Into");
				common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[7]/a[1]").click();
				Assert.assertTrue(common.pageInfoBoxContains("You have acquired the following resource identity:"),"Not able to acquire ID ");
				break;
			}
		}
		
		common.selectOption("ResourceIDsList", "All");
		
		Reporter.log("Step 6:   Navigate to Resource Identity Pools  "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		Reporter.log("Step 7:  'Click' on above created Resource Identity Pool  "+"<br>");
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
				break;
			}
		}
		
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
	
		Reporter.log("Step 8:  Select check box for 'idName1' &  Select Option to 'Delete' and verify success message "+"<br>");
		for(int i=2;i<=rows.size();i++){
			//System.out.println("value is : "+common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText()+" idname1 is : "+idName1);
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText().trim().equals(idName1)){
				//System.out.println("Into");
				common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[1]/input").click();
				break;
			}
		}
		
		common.selectOption("select_options", "Delete");
		Alert alert = driver.switchTo().alert();
		Assert.assertTrue(alert.getText().trim().equals("You are about to delete 1 IDs. This includes 1 IDs which are being used. Do you want to continue?"),"Message wrongly shown when deleting ID in Use");
		common.handleAlert(true);
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
				break;
			}
		}
		
		table = common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table");
		rows = table.findElements(By.tagName("tr"));
	
		
		Reporter.log("Step 9:  Select check box for 'idName2' &  Select Option to 'Delete' and verify success message "+"<br>");
		for(int i=2;i<=rows.size();i++){
			//System.out.println("value is : "+common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText()+" idname1 is : "+idName1);
			if(common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[2]").getText().trim().equals(idName2)){
				//System.out.println("Into");
				common.getObjectByXpath("html/body/table[1]/tbody/tr/td[2]/div[3]/form/table/tbody/tr["+i+"]/td[1]/input").click();
				break;
			}
		}
		
		common.selectOption("select_options", "Delete");
		common.handleAlert(true);
		
		Reporter.log("Step 10: Verify  message as 'Your search returned 0 results' displayed or not? ::Expected Should be displayed "+"<br>");
		Assert.assertTrue(common.pageAlert2BoxContains("Your search returned 0 results."),"Both the IDs are not deleted ");
				
		common.back();
		Reporter.log("Step 11: Verify Page title as 'Resource Identities in Pool' or not? ::Expected : Should be displayed "+"<br>");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
		
		Reporter.log("===============End testDeletingIDInResourceIdentityPool_007========================"+"<br>");
		
	}
	
	
	//Verify Acquire id functionality for two resource id's linked to same resource pool
	@Test(enabled = true, groups= {"ART"})
	public void testAcquiringIDInResouceIdentityPool_008(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235290 "+"<br>");
		Reporter.log("===============Start testAcquiringIDInResouceIdentityPool_008========================"+"<br>");
		
		Reporter.log("Step 1: Navigate to resouceIdentityPools and create Resouce identity pool > Add two Resource Identity ID's to that pool "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		String idName1 = common.generateRandomString();
		String idName2 = common.generateRandomString();
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		NAUtils.addResourceIDsToPool(resourcePoolName,idName1,null);
		NAUtils.addResourceIDsToPool(resourcePoolName,idName2,null);
		
		Reporter.log("Step 2: Click on 'Acquire Next ID'for the above created resoulce Identity pool & Verify Message text as 'You have acquired the following resource identity from the above created pool with 'idName1' "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[3]").click();
				System.out.println("alert 1 is "+driver.findElement(By.className("alert_1")).getText());
				Assert.assertTrue(driver.findElement(By.className("alert_1")).getText().contains("You have acquired the following resource identity from the \""+resourcePoolName+"\" pool."),"Next ID is not accquired ");
				break;
			}
		}
		
		Reporter.log("Step 3: Click on Back > Validate the page title as 'Resource Identities in Pool: "+resourcePoolName+"> 'Click' on the above Creted resouce Identity pool   "+"<br>");
		common.back();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
		
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				break;
			}
		}
		
		Reporter.log("Step 4: Filter with Status as 'Available' > Click' on 'Acquired ID '> Verify Message as 'You have acquired the following resource identity:" +idName2+"<br>");
		common.selectOption("ResourceIDsList", "Available");
		
		common.getObjectByLinkText("Acquire ID").click();
		Assert.assertTrue(driver.findElement(By.className("alert_1")).getText().startsWith("You have acquired the following resource identity:"),"Not able to acquire ID ");
		
		Reporter.log("Step 5: Validate the page title as 'Resource Identities in Pool:'"+resourcePoolName+"<br>"); 
		common.back();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
		
		
		Reporter.log("===============End testAcquiringIDInResouceIdentityPool_008========================"+"<br>");
	}
	//  Verify success messages after performing  Acquired ID & Release ID
	@Test(enabled = true, groups= {"ART"})
	public void testReleasingIDInResourceIdentityPool_009(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235295   "+"<br>");
		Reporter.log("===============Start testAcquiringIDInResouceIdentityPool_009========================"+"<br>");
		
		Reporter.log("Step 1: Navigate to resouceIdentityPools and create Resouce identity pool > Add one Resource Identity ID's to that pool"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resource Identity Pools page not launched");
		
		String idName = common.generateRandomString();
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		NAUtils.addResourceIDsToPool(resourcePoolName,idName,null);
		
		Reporter.log("Step 2: Click on "+resourcePoolName+" , 'Click' on 'Acquire ID' verify message text as 'You have acquired the following resource identity:' & 'Click' on 'Release ID' Verify Message text as'Released ID:'   "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").click();
				Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
				break;
			}
		}
		
		common.getObjectByLinkText("Acquire ID").click();
		Assert.assertTrue(driver.findElement(By.className("alert_1")).getText().startsWith("You have acquired the following resource identity:"),"Not able to acquire ID ");
		
		common.getObjectByLinkText("Release ID").click();
		Assert.assertTrue(driver.findElement(By.className("alert_1")).getText().startsWith("Released ID: "),"Not able to acquire ID ");
		
		Reporter.log("Step 3:  Click on Back > Validate the page title as 'Resource Identities in Pool: "+resourcePoolName+" "+"<br>"); 
		common.back();
		System.out.println("title is "+driver.getTitle());		
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"ID page not launched");
		
		Reporter.log("===============End testAcquiringIDInResouceIdentityPool_009========================"+"<br>");
	}
	
	// Verify Existence of the  Permissions like 'Acquire/Release/Edit',Add/Import,Delete,View, pool Manage, pool View in 'New User Role' page
	@Test(enabled = true , groups= {"ART"})
	public void testNewCommandPermissionAvailableOnWebUI_001(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235259   "+"<br>");
		Reporter.log("===============Start testNewCommandPermissionAvailableOnWebUI_001========================"+"<br>");
		Reporter.log("Step 1: Navigate > Admin > UserRolesAndPermissions > Click on 'New User Role'"+"<br>");
		Navigate.Admin.UserRolesAndPermissions();
		common.getObjectByLinkText("New User Role").click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New User Role"),"New User Role page not launched ");
		NewUserRole newUserRole = new NewUserRole();
		
		Reporter.log("Step 2: Verify Existence  of the  Permissions like 'Acquire/Release/Edit',Add/Import,Delete,View, pool Manage, pool View"+"<br>");
		Assert.assertTrue(common.getObjectByXpath(newUserRole.scriptPermissionTable+"/tbody/tr[15]/td[5]").getText().trim().equals("Resource Identity: Acquire/Release/Edit"),"Resource Identity: Acquire/Release/Edit not present in New User Role ");
		Assert.assertTrue(common.getObjectByXpath(newUserRole.scriptPermissionTable+"/tbody/tr[16]/td[5]").getText().trim().equals("Resource Identity: Add/Import"),"Resource Identity: Add/Import not present in New User Role ");
		Assert.assertTrue(common.getObjectByXpath(newUserRole.scriptPermissionTable+"/tbody/tr[17]/td[5]").getText().trim().equals("Resource Identity: Delete"),"Resource Identity: Delete not present in New User Role ");
		Assert.assertTrue(common.getObjectByXpath(newUserRole.scriptPermissionTable+"/tbody/tr[18]/td[5]").getText().trim().equals("Resource Identity: View"),"Resource Identity: View not present in New User Role ");
		Assert.assertTrue(common.getObjectByXpath(newUserRole.scriptPermissionTable+"/tbody/tr[19]/td[5]").getText().trim().equals("Resource Identity Pool: Manage"),"Resource Identity Pool: Manage not present in New User Role ");
		Assert.assertTrue(common.getObjectByXpath(newUserRole.scriptPermissionTable+"/tbody/tr[20]/td[5]").getText().trim().equals("Resource Identity Pool: View"),"Resource Identity Pool: View not present in New User Role ");
		
		Reporter.log("===============End testNewCommandPermissionAvailableOnWebUI_001========================"+"<br>");
	}
	
	// verify Edit pool & Delete pool functionality
	@Test(enabled = true, groups= {"ART"})
	public void testAdminUsersFullControlResouceIdentityManagementCRUD_Pools_002() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235266  "+"<br>");
		Reporter.log("===============Start testAdminUsersFullControlResouceIdentityManagement_002========================"+"<br>");
		
		Reporter.log("Step 1: Nevigate > Admin > newUser> create new user"+"<br>");
		Navigate.Admin.newUser();
		String adminUser = NAUtils.addUser(null, new String[]{"Administrator"});
		
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(adminUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(adminUser));

		//login.loginAsUser(adminUser);
		
		Reporter.log("Step 4 : Navigate to Resouce identity Pools  > Create Resource Identity pool   "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 5 : Click on 'Edit Pool' for "+resourcePoolName+" > clear the Name & Replace with same Name for that pool > click on 'save' "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));	
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[4]").click();
				break;
			}
		}
		resourcePoolName = common.generateRandomString();
		common.getObjectByName("resourceIDPoolName").clear();
		common.getObjectByName("resourceIDPoolName").sendKeys(resourcePoolName);
		common.save();
		
		Reporter.log("Step 6 : Select Check box for "+resourcePoolName+"  & 'Delete' pool   "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Assert.assertTrue(common.getObjectByLinkText(resourcePoolName).getText().trim().equals(resourcePoolName),"Edited resouce Pool not visible ");		
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));	
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[1]/input").click();
				break;
			}
		}
		
		common.selectOption("select_options", "Delete");
		common.handleAlert(true);
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Reporter.log("Step 7 : Verify if "+resourcePoolName+" displayed or not? :: Expected : should not be dispalyed "+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText(resourcePoolName)).size()<=0,resourcePoolName+ " not deleted");
		
			
		Reporter.log("===============End testAdminUsersFullControlResouceIdentityManagement_002========================"+"<br>");
	}
	
	// verify Edit resource ID & Delete resource ID functionality
	@Test(enabled = true, groups= {"ART"})
	public void testAdminUsersFullControlResouceIdentityManagementCRUD_IDs_003() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case:QCTP1B235275   "+"<br>");
		Reporter.log("===============Start testAdminUsersFullControlResouceIdentityManagementCRUD_IDs_003========================"+"<br>");

		Reporter.log("Step 1: Nevigate > Admin > newUser > Create new user"+"<br>");
		Navigate.Admin.newUser();
		String adminUser = NAUtils.addUser(null, new String[]{"Administrator"});
		
		
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(adminUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(adminUser));
		
		Reporter.log("Step 4 : Navigate to Resouce identity Pools  > create Resouce identity pool > Add one Resource Identity ID's to that pool    "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 4 : Navigate to Resouce identity Pools  > Click on "+resourcePoolName+"  > click on 'Edit ID' > clear the IDName & Replace with same IDName for that pool > Click on 'save'  "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"IDs page not launched ");
		
		common.getObjectByLinkText("Edit ID").click();
		
		idName = common.generateRandomString();
		common.getObjectByName("name").clear();
		common.getObjectByName("name").sendKeys(idName);
		common.save();
		
		Assert.assertTrue(common.pageInfoBoxContains("Edited ID: "+idName),"ID not edited ");
		Reporter.log("Step 5 : Clik on 'Check box' for "+idName+" &  Delete "+idName+" , Veirfy success message as '1 IDs deleted.'"+"<br>");
		common.getObjectByXpath("//input[@type='checkbox' and @name='resourceIdentityID']").click();
		common.selectOption("select_options", "Delete");
		common.handleAlert(true);
		Assert.assertTrue(common.pageInfoBoxContains("1 IDs deleted."),"ID not deleted ");
			
		Reporter.log("===============End testAdminUsersFullControlResouceIdentityManagementCRUD_IDs_003========================"+"<br>");
	}
	
	// Verify Acquire ID,Release ID links as user with the role 'Administrator'
	@Test(enabled = true, groups= {"ART"})
	public void testAdminUsersFullControlResouceIdentityManagementAcquireAndReleaseIDs_004() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case:QCTP1B235287   "+"<br>");
		Reporter.log("===============Start testAdminUsersFullControlResouceIdentityManagementAcquireAndReleaseIDs_004========================"+"<br>");

		Reporter.log("Step 1: Nevigate > Admin > newUser > Create new user"+"<br>");
		Navigate.Admin.newUser();
		String adminUser = NAUtils.addUser(null, new String[]{"Administrator"});
		
		
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(adminUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(adminUser));
		
		Reporter.log("Step 4 : Navigate to resouceIdntityPools  > Create Resource Identity pool > Add one Resource Identity ID's to that pool "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 5 : Check the functionality of Acquire ID,Release ID links    "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"IDs page not launched ");
		
		common.getObjectByLinkText("Acquire ID").click();
		Assert.assertTrue(driver.findElement(By.className("alert_1")).getText().startsWith("You have acquired the following resource identity:"),"Not able to acquire id "+idName);
		
		common.getObjectByLinkText("Release ID").click();
		Assert.assertTrue(common.pageInfoBoxContains("Released ID: "+idName),"Not able to release id "+idName);
		
		Reporter.log("===============End testAdminUsersFullControlResouceIdentityManagementAcquireAndReleaseIDs_004========================"+"<br>");
	}
	
	//verify functionality of Import IDs link loging as Administrator 
	@Test(enabled = true, groups= {"ART"})
	public void testAdminUsersFullControlResouceIdentityManagementImportIDs_005() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235243  "+"<br>");
		Reporter.log("===============Start testAdminUsersFullControlResouceIdentityManagementImportIDs_005========================"+"<br>");
		
		Reporter.log("Step 1: Nevigate > Admin > newUser > Create new user"+"<br>");
		Navigate.Admin.newUser();
		String adminUser = NAUtils.addUser(null, new String[]{"Administrator"});
		
		
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(adminUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(adminUser));
		
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		
		
		Reporter.log("Step 4 : Browser CSV File & Verify Import IDs Functionality "+"<br>");
		Assert.assertTrue(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\Import3ResouceIds.csv"),"Not able to import IDs to ResoucePool");
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName);
		
		String []allIDsInString = NAUtils.getAllIDsInPool(resourcePoolName);
		List<String> allIDs = Arrays.asList(allIDsInString);
		
		System.out.println("list size is "+allIDs.size());
		for(String id : allIDs){
			System.out.println("id value is "+id);
		}
		
		
		
		Assert.assertTrue(allIDs.contains("test1"),"Not able to find ID test 1 ");
		Assert.assertTrue(allIDs.contains("test2"),"Not able to find ID test 2 ");
		Assert.assertTrue(allIDs.contains("test3"),"Not able to find ID test 3 ");
		
		Assert.assertTrue(NAUtils.deleteIDs(resourcePoolName),"Not able to delete IDs");
		
		Reporter.log("===============End testAdminUsersFullControlResouceIdentityManagementImportIDs_005========================"+"<br>");
		
	}
	
	// Verify  Deletion of 'Resource Identity  pool' as 'PowerUser'
	@Test(enabled = true, groups= {"ART"})
	public void testPowerUsersFullControlResouceIdentityManagementCRUD_Pools_006() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235267  "+"<br>");
		Reporter.log("===============Start testPowerUsersFullControlResouceIdentityManagementCRUD_Pools_006========================"+"<br>");
		
		Reporter.log("Step 1 : Nevigate > Admin > newUser > Create new user with role as 'Power User'"+"<br>");
		Navigate.Admin.newUser();
		String powerUser = NAUtils.addUser(null, new String[]{"Power User"});
		
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(powerUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(powerUser));
						
		Reporter.log("Step 4 : Navigate to resouceIdntityPools  > Create Resource Identity pool"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 5 : Click on 'Edit Pool' >  clear the Name & Replace with same Name for that pool > Click on 'save' "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[4]").click();
				break;
			}
		}
		resourcePoolName = common.generateRandomString();
		common.getObjectByName("resourceIDPoolName").clear();
		common.getObjectByName("resourceIDPoolName").sendKeys(resourcePoolName);
		common.save();
		
		
		Reporter.log("Step 6 : Delete the Resource pool < "+resourcePoolName+" > "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Assert.assertTrue(common.getObjectByLinkText(resourcePoolName).getText().trim().equals(resourcePoolName),"Edited resouce Pool not visible ");
		
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().trim().equals(resourcePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[1]/input").click();
				break;
			}
		}
		
		common.selectOption("select_options", "Delete");
		common.handleAlert(true);
		
		Reporter.log("Step 6 : Verify  Resource pool < "+resourcePoolName+" > dispalyed or not? should not be displayed"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Assert.assertTrue(driver.findElements(By.linkText(resourcePoolName)).size()<=0,resourcePoolName+ " not deleted");
		
		
		Reporter.log("===============End testPowerUsersFullControlResouceIdentityManagementCRUD_Pools_006========================"+"<br>");
	}
	
	//verify Edit resource ID & Delete resource ID functionality as powerUser
	@Test(enabled = true, groups= {"ART"})
	public void testPowerUsersFullControlResouceIdentityManagementCRUD_IDs_007() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235246  "+"<br>");
		Reporter.log("===============Start testPowerUsersFullControlResouceIdentityManagementCRUD_IDs_007========================"+"<br>");
		
		Reporter.log("Step 1: Nevigate > Admin > newUser > Create new user with role as 'Power User'"+"<br>");
		Navigate.Admin.newUser();
		String powerUser = NAUtils.addUser(null, new String[]{"Power User"});
				
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(powerUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(powerUser));
		
		Reporter.log("Step 4 : Create Resource Identity pool > Add one Resource Identity ID's to that pool "+"<br>");
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 5 : Navigate to Resouce identity Pools  > Click on "+resourcePoolName+"  > click on 'Edit ID' > clear the IDName & Replace with same IDName for that pool > Click on 'save'  "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"IDs page not launched ");
		
		common.getObjectByLinkText("Edit ID").click();
		
		idName = common.generateRandomString();
		common.getObjectByName("name").clear();
		common.getObjectByName("name").sendKeys(idName);
		common.save();
		
		Reporter.log("Step 6 : Click on 'Check box' for "+idName+" &  Delete, Veirfy success message as '1 IDs deleted.'"+"<br>");
		Assert.assertTrue(common.pageInfoBoxContains("Edited ID: "+idName),"ID not edited ");
		common.getObjectByXpath("//input[@type='checkbox' and @name='resourceIdentityID']").click();
		common.selectOption("select_options", "Delete");
		common.handleAlert(true);
		
		Assert.assertTrue(common.pageInfoBoxContains("1 IDs deleted."),"ID not deleted ");
		
		Reporter.log("===============End testPowerUsersFullControlResouceIdentityManagementCRUD_IDs_007========================"+"<br>");
	}
	//Check the functionality of Acquire ID,Release ID links as powerUser
	@Test(enabled = true, groups= {"ART"})
	public void testPowerUsersFullControlResouceIdentityManagementAcquireAndReleaseIDs_008() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235288  "+"<br>");
		Reporter.log("===============Start testPowerUsersFullControlResouceIdentityManagementAcquireAndReleaseIDs_008========================"+"<br>");
		
		Reporter.log("Step 1: Nevigate > Admin > newUser > Create new user with role as 'Power User'"+"<br>");
		Navigate.Admin.newUser();
		String powerUser = NAUtils.addUser(null, new String[]{"Power User"});
		
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(powerUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(powerUser));
		
		Reporter.log("Step 4 : Create Resource Identity pool > Add one Resource Identity ID's to that pool "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 5 : Check the functionality of Acquire ID,Release ID links    "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identities in Pool: "+resourcePoolName),"IDs page not launched ");
		
		common.getObjectByLinkText("Acquire ID").click();
		Assert.assertTrue(driver.findElement(By.className("alert_1")).getText().startsWith("You have acquired the following resource identity:"),"Not able to acquire id "+idName);
		
		common.getObjectByLinkText("Release ID").click();
		Assert.assertTrue(common.pageInfoBoxContains("Released ID: "+idName),"Not able to release id "+idName);
		
		
		Reporter.log("===============End testPowerUsersFullControlResouceIdentityManagementAcquireAndReleaseIDs_008========================"+"<br>");
		
	}
	//Check the functionality of Import IDs link from Csv file login as 'Power User'
	@Test(enabled = true, groups= {"ART"})
	public void testPowerUsersFullControlResouceIdentityManagementImportIDs_009() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235252  "+"<br>");
		Reporter.log("===============Start testPowerUsersFullControlResouceIdentityManagementImportIDs_009========================"+"<br>");
		
		Reporter.log("Step 1: Nevigate > Admin > newUser > Create new user with role as 'Power User'"+"<br>");
		Navigate.Admin.newUser();
		String powerUser = NAUtils.addUser(null, new String[]{"Power User"});
		
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(powerUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(powerUser));
		
		Reporter.log("Step 4 : Create Resource Identity pool > Add one Resource Identity ID's to that pool "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		//common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		//String workingdirectory = System.getProperty("user.dir");
		Reporter.log("Step 5 : Browse CSV file & verify Import IDs  "+"<br>");
		
		Assert.assertTrue(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\Import3ResouceIds.csv"),"Not able to import IDs to ResoucePool");
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName);
		
		String []allIDsInString = NAUtils.getAllIDsInPool(resourcePoolName);
		List<String> allIDs = Arrays.asList(allIDsInString);
		
		System.out.println("list size is "+allIDs.size());
		for(String id : allIDs){
			System.out.println("id value is "+id);
		}
		
		
		
		Assert.assertTrue(allIDs.contains("test1"),"Not able to find ID test 1 ");
		Assert.assertTrue(allIDs.contains("test2"),"Not able to find ID test 2 ");
		Assert.assertTrue(allIDs.contains("test3"),"Not able to find ID test 3 ");
		
		Assert.assertTrue(NAUtils.deleteIDs(resourcePoolName),"Not able to delete IDs");
		
		Reporter.log("===============End testPowerUsersFullControlResouceIdentityManagementImportIDs_009========================"+"<br>");
	}
	//verify permission links as 'New Pool','Add IDs', 'Import IDs','Edit Pool' 'Edit ID'  with Login as 'fullAccessUser'.
	
	//suresh- need to check with 'devish' 
	@Test(enabled = true, groups= {"ART"})
	public void testFullAccessUsersPermissionToViewResouceIdentity_010() throws InterruptedException{
		
		Reporter.log("ALM Global ID For this test Case: QCTP1B235253   "+"<br>");
		Reporter.log("===============Start testFullAccessUsersPermissionToViewResouceIdentity_010========================"+"<br>");
		
		boolean isPresent = true;
		
		Reporter.log("Step 1 : Create Resource Identity pool > Add one Resource Identity ID's to that pool "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 2: Nevigate > Admin > newUser > Create new user with role as 'Full Access User"+"<br>");
		Navigate.Admin.newUser();
		String fullAccessUser = NAUtils.addUser(null, new String[]{"Full Access User"});
		
		Reporter.log("Step 3 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(fullAccessUser);
				
		Reporter.log("Step 4 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(fullAccessUser));
		//login.loginAsUser(fullAccessUser);
		
		
		Reporter.log("Step 5 : verify permission links as 'New Pool','Add IDs', 'Import IDs','Edit Pool'  displayed or not ? ::Expected : should not be displayed "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue( driver.findElements(By.linkText("New Pool")).size()<=0,"New Pool visible to the login user ");
		
		Assert.assertTrue(driver.findElements(By.linkText("Add IDs")).size()<=0,"ADD IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Import IDs")).size()<=0,"Import IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()<=0,"Edit Pool visible to the login user ");

		Select select = new Select(common.getObjectByName("select_options"));
		List<WebElement> options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertFalse(true,"Delete is visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(isPresent){
			Assert.assertTrue(true,"Delete visible for the user login");
		}
		
		Reporter.log("Step 5 : click on Resource idenity pool Name <"+resourcePoolName+"> & verify permission links as 'Edit ID' displayed or not ? ::Expected : should not be displayed "+"<br>");
		common.getObjectByLinkText(resourcePoolName).click();
		select = new Select(common.getObjectByName("select_options"));
		options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertFalse(true,"Delete is visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(isPresent){
			Assert.assertTrue(true,"Delete visible for the user login");
		}
		
		Assert.assertTrue(driver.findElements(By.linkText("Edit ID")).size()<=0,"Edit ID visible to the login user ");		
		
		Reporter.log("===============End testFullAccessUsersPermissionToViewResouceIdentity_010========================"+"<br>");
	}
	
	//Check the functionality of Acquire ID,Release ID links as Full Access User
	@Test(enabled = true, groups= {"ART"})
	public void testFullAccessUserPermissionToAcquireAndReleaseIDs_011() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235258   "+"<br>");
		Reporter.log("===============Start testFullAccessUserPermissionToAcquireAndReleaseIDs_011========================"+"<br>");
		
		Reporter.log("Step 1 : Create Resource Identity pool > Add one Resource Identity ID's to that pool "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 2: Nevigate > Admin > newUser > Create new user with role as Full Access User"+"<br>");
		Navigate.Admin.newUser();
		String fullAccessUser = NAUtils.addUser(null, new String[]{"Full Access User"});
		
		Reporter.log("Step 3 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(fullAccessUser);
				
		Reporter.log("Step 4 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(fullAccessUser));
		//login.loginAsUser(fullAccessUser);
		
		
		Reporter.log("Step 5 : Verify Acquire ID ,Release ID links "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		
		common.getObjectByLinkText(resourcePoolName).click();
		
		common.getObjectByLinkText("Acquire ID").click();
		Assert.assertTrue(driver.findElement(By.id("InfoBox")).getText().startsWith("You have acquired the following resource identity:"),"Not able to acquire id using the user login ");
		
		common.getObjectByLinkText("Release ID").click();
		Assert.assertTrue(common.pageInfoBoxContains("Released ID: "+idName),"Not able to release id using the login ");
		
		Reporter.log("Step 6 : Verify permission links as 'New Pool','Edit Pool' displayed or not ? ::Expected : should not be displayed "+"<br>");
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		Assert.assertTrue(driver.findElements(By.linkText("New Pool")).size()<=0,"New Pool visible to the login user ");
		
		Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()<=0,"Edit Pool visible to the login user ");
		
		
		
		Reporter.log("===============End testFullAccessUserPermissionToAcquireAndReleaseIDs_011========================"+"<br>");
	}
	
	
	//check the funtionality of 'Acquire ID','Edit ID',New Pool','Add IDs','Import IDs','Edit Pool','Delete' links as newUser  ('Command Permissions' as {'Resource Identity Pool: View'} and 'Partition Permission' as  "+securityPartition+"<br>");
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyCustomDefinedUserGroupWithViewResouceIdentityPoolPermission_012() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235291  "+"<br>");
		Reporter.log("===============Start testVerifyCustomDefinedUserGroupWithViewResouceIdentityPoolPermission_012========================"+"<br>");
		Reporter.log("Step 1 : Create Resource Identity pool  with Security Partition & Resource 'ID' "+"<br>");		
		boolean isPresent = true;
		String securityPartition = NAUtils.addNewSecurityPartition();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");		
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName,securityPartition,null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 2 : Add new User Group ('Command Permissions' as {'Resource Identity Pool: View'} and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity Pool: View"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		Reporter.log("Step 3: Create a New User with above created user Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 4: Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 5: login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 6 : Verify permission links as 'Acquire ID','Edit ID','Delete' displayed or not ? ::Expected : should not be displayed "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName).click();
		
		
		
		Assert.assertTrue( driver.findElements(By.linkText("Acquire ID")).size()<=0,"Acquire ID visible to the login user ");	
		Assert.assertTrue(driver.findElements(By.linkText("Edit ID")).size()<=0,"Edit ID visible to the login user ");	
		
		Select select = new Select(common.getObjectByName("select_options"));
		List<WebElement> options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertFalse(true,"Delete is visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(isPresent){
			Assert.assertTrue(true,"Delete visible for the user login");
		}
		Reporter.log("Step 6 : Verify permission links as 'New Pool','Add IDs','Import IDs','Edit Pool','Delete' displayed or not ? ::Expected : should not be displayed "+"<br>");
				
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Assert.assertTrue(driver.findElements(By.linkText("New Pool")).size()<=0,"New Pool visible to the login user ");
		
		Assert.assertTrue(driver.findElements(By.linkText("Add IDs")).size()<=0,"ADD IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Acquire Next ID")).size()<=0,"Acquire Next ID visible to the login user ");
		Assert.assertTrue( driver.findElements(By.linkText("Import IDs")).size()<=0,"Import IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()<=0,"Edit Pool visible to the login user ");

		select = new Select(common.getObjectByName("select_options"));
		options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertFalse(true,"Delete is visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(isPresent){
			Assert.assertTrue(true,"Delete visible for the user login");
		}
		
		
		Reporter.log("===============End testVerifyCustomDefinedUserGroupWithViewResouceIdentityPoolPermission_012========================"+"<br>");
	}
	
	//verify the 
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyCustomDefinedUserGroupWithAcquireAndRelease_013() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235257   "+"<br>");
		Reporter.log("===============Start testVerifyCustomDefinedUserGroupWithAcquireAndRelease_013========================"+"<br>");
		Reporter.log("Step 1 : Create Resource Identity pool  with Security Partition & Resource 'ID' "+"<br>");	
		
		boolean isPresent = true;
		String securityPartition = NAUtils.addNewSecurityPartition();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName,securityPartition,null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 2 : Add new User Group ('Command Permissions' as {'Resource Identity Pool: View','Resource Identity: Acquire/Release/Edit'} and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity Pool: View","Resource Identity: Acquire/Release/Edit"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);

		Reporter.log("Step 3: Create a New User with above created user Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		Reporter.log("Step 4: Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 5: login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 6 : Verify permission links as 'Acquire ID','Edit ID','Delete' displayed or not ? ::Expected : should be displayed "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		common.getObjectByLinkText(resourcePoolName).click();
		
		common.getObjectByLinkText("Acquire ID").click();
		Assert.assertTrue(driver.findElement(By.id("InfoBox")).getText().startsWith("You have acquired the following resource identity:"),"Not able to acquire id using the user login ");
		
		common.getObjectByLinkText("Release ID").click();
		Assert.assertTrue(common.pageInfoBoxContains("Released ID: "+idName),"Not able to release id using the login ");
		
		// Step 4
		System.out.println("***********Step 4**********");
		System.out.println("Edit ID visible to the user. Bug to be filed");
		//Assert.assertTrue("Edit ID visible to the login user ", driver.findElements(By.linkText("Edit ID")).size()<=0);	
		
		Select select = new Select(common.getObjectByName("select_options"));
		List<WebElement> options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertFalse(true,"Delete is visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(isPresent){
			Assert.assertTrue(true,"Delete visible for the user login");
		}
		
		Reporter.log("Step 6 : Verify permission links as 'New Pool','Add IDs','Import IDs','Edit Pool','Delete' displayed or not ? ::Expected : should not be displayed "+"<br>");	
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Assert.assertTrue(driver.findElements(By.linkText("New Pool")).size()<=0,"New Pool visible to the login user ");
		Assert.assertTrue( driver.findElements(By.linkText("Add IDs")).size()<=0,"ADD IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Import IDs")).size()<=0,"Import IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()<=0,"Edit Pool visible to the login user ");

		select = new Select(common.getObjectByName("select_options"));
		options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertFalse(true,"Delete is visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(isPresent){
			Assert.assertTrue(true,"Delete visible for the user login");
		}
		
		Reporter.log("===============End testVerifyCustomDefinedUserGroupWithAcquireAndRelease_013========================"+"<br>");
	}
	
	//verify Impotr IDs functionality  as newUser  ('Command Permissions' as {"Resource Identity Pool: View","Resource Identity: Add/Import","View Task"}; and 'Partition Permission' as  "+securityPartition");
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyCustomDefinedUserGroupWithImportID_014() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235248  "+"<br>");
		Reporter.log("===============Start testVerifyCustomDefinedUserGroupWithImportID_014========================"+"<br>");
		boolean isPresent = true;
		
		Reporter.log("Step 1 : Create Resource Identity pool  with Security Partition & Resource 'ID' "+"<br>");	
		String securityPartition = NAUtils.addNewSecurityPartition();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName,securityPartition,null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 2 : Add new User Group ('Command Permissions' as {'Resource Identity Pool: View','Resource Identity: Add/Import,View Task'} and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity Pool: View","Resource Identity: Add/Import","View Task"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);

		Reporter.log("Step 3: Create a New User with above created user Group"+"<br>");		
		String newUser = NAUtils.addUser(new String[]{userGroup});
		Reporter.log("Step 4: Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 5: login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 6 : Verify permission links as 'New Pool','Acquire Next ID','Import IDs','Edit Pool','Delete','Acquire ID','Edit ID' displayed or not ? ::Expected : should not be displayed "+"<br>");	
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Select select = new Select(common.getObjectByName("select_options"));
		List<WebElement> options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertFalse(true,"Delete is visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(!isPresent){
			Assert.assertTrue(true,"Delete is visible for the user login");
		}
		
		
		Assert.assertTrue(driver.findElements(By.linkText("New Pool")).size()<=0,"New Pool visible to the login user ");
		Assert.assertTrue( driver.findElements(By.linkText("Acquire Next ID")).size()<=0,"Acquire Next ID visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()<=0,"Edit Pool visible to the login user ");
		
		common.getObjectByLinkText(resourcePoolName).click();
		
		select = new Select(common.getObjectByName("select_options"));
		options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertFalse(true,"Delete is visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(!isPresent){
			Assert.assertTrue(true,"Delete is visible for the user login");
		}
				
		Assert.assertTrue(driver.findElements(By.linkText("Acquire ID")).size()<=0,"Acquire ID visible to the login user ");	
		Assert.assertTrue(driver.findElements(By.linkText("Edit ID")).size()<=0,"Edit ID visible to the login user ");	
		
		//String workingdirectory = System.getProperty("user.dir");
		Reporter.log("Step 7: Browser CSV file & verify import IDs functionality "+"<br>");
		Assert.assertTrue(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\Import3ResouceIds.csv"),"Not able to import IDs to ResoucePool");
		
		Reporter.log("===============End testVerifyCustomDefinedUserGroupWithImportID_014========================"+"<br>");
		
	}
	
	/*verify access to links 'Acquire ID','Edit ID',New Pool','Add IDs','Import IDs','Edit Pool','Delete' with New User ('Command Permissions' as {"Resource Identity: Add/Import","Resource Identity: Delete","Resource Identity: View","Resource Identity Pool: Manage","Resource Identity Pool: View","Resource Identity: Acquire/Release/Edit"} and 'Partition Permission' as  "+securityPartition*/
	
	
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyCustomDefinedUserGroupWithAllResourceIdentityPermission_015() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235254  "+"<br>");
		Reporter.log("===============Start testVerifyCustomDefinedUserGroupWithAllResourceIdentityPermission_015========================"+"<br>");
		
		boolean isPresent = true;
		Reporter.log("Step 1 : Create Resource Identity pool  with Security Partition & Resource 'ID' "+"<br>");	
		String securityPartition = NAUtils.addNewSecurityPartition();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName,securityPartition,null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
	
		Reporter.log("Step 2 : Add new User Group ('Command Permissions' as {'Resource Identity: Add/Import','Resource Identity: Delete','Resource Identity: View','Resource Identity Pool: Manage','Resource Identity Pool: View','Resource Identity: Acquire/Release/Edit'}; and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity: Add/Import","Resource Identity: Delete","Resource Identity: View","Resource Identity Pool: Manage","Resource Identity Pool: View","Resource Identity: Acquire/Release/Edit"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);

		Reporter.log("Step 4: Create a New User with above created user Group"+"<br>");		
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 5: Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 6: login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		Reporter.log("Step 6 : Verify permission links as 'New Pool','Add IDs','Import IDs','Edit Pool','Delete','Acquire ID','Edit ID' displayed or not ? ::Expected : should  be displayed "+"<br>");	
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		
		Assert.assertTrue(driver.findElements(By.linkText("New Pool")).size()>=0,"New Pool visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Add IDs")).size()>=0,"ADD IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Import IDs")).size()>=0,"Import IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Edit Pool")).size()>=0,"Edit Pool visible to the login user ");
		
		Select select = new Select(common.getObjectByName("select_options"));
		List<WebElement> options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertTrue(true,"Delete is not visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(!isPresent){
			Assert.assertFalse(true,"Delete is not visible for the user login");
		}
		
		
		common.getObjectByLinkText(resourcePoolName).click();
		
		Assert.assertTrue( driver.findElements(By.linkText("Acquire ID")).size()>=0,"Acquire ID visible to the login user ");	
		Assert.assertTrue( driver.findElements(By.linkText("Edit ID")).size()>=0,"Edit ID visible to the login user ");	
		
		select = new Select(common.getObjectByName("select_options"));
		options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertTrue(true,"Delete is not visible to the user login");
				isPresent = true;
				break;
			}else{
				isPresent = false;
			}
		}
		if(!isPresent){
			Assert.assertFalse(true,"Delete is not visible for the user login");
		}
		
		
		
		Reporter.log("===============End testVerifyCustomDefinedUserGroupWithAllResourceIdentityPermission_015========================"+"<br>");
	}
	// verify the page title  as 'Limited Access User'
	@Test(enabled = true, groups= {"ART"})
	public void testLimitedUserDoNotHaveAccessToResouceIdentityFeature_016() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235255   "+"<br>");
		Reporter.log("===============Start testLimitedUserDoNotHaveAccessToResouceIdentityFeature_016========================"+"<br>");
		
		Reporter.log("Step 1 : Create New User"+"<br>");
		Navigate.Admin.newUser();
		String limitedUser = NAUtils.addUser(null, new String[]{"Limited Access User"});
		
		Reporter.log("Step 2 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(limitedUser);
				
		Reporter.log("Step 3 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(limitedUser));

		Reporter.log("Step 4 : Verify the Page title as 'Resource Identity Pools'or not ? :: Expected : should  not be displayed "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		System.out.println("page title is "+driver.getTitle());
		Assert.assertFalse(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resouce Identity Page visible to the user");
		
		
		Reporter.log("===============End testLimitedUserDoNotHaveAccessToResouceIdentityFeature_016========================"+"<br>");
	}
	//verify access to menues like 'Resouce identity', 'Resource Identities','resource Identity Pools'  > import IDs Link  for 'Full Access User'
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIDsMenuAccessPermissionWithFullAccessUser_017() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235235  "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIDsMenuAccessPermissionWithFullAccessUser_017========================"+"<br>");
		
		Reporter.log("Step 1 : Create New User with All partitions "+"<br>");
		String fullAccessUser = NAUtils.addUser(new String[]{"Full Access User","View All Partitions"});
		
		Reporter.log("Step 2 : Create Resource Identity pool with  Resource 'ID' "+"<br>");	
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 3 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(fullAccessUser);
				
		Reporter.log("Step 4 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(fullAccessUser));

		//login.loginAsUser(fullAccessUser);
		
		Reporter.log("Step 5 : Navigate to Tasks > New Tasks  > import > ResourceIdentity , Verify access for the menu 'ResourceIdentities': Should not have access   "+"<br>");
		Navigate.Tasks.NewTasks.Import.ResouceIdentity();
		Assert.assertFalse(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Option is not greyed out ");
		
		
		common.home();
		
		Reporter.log("Step 6 : Navigate to Admin > SystemTasks> import > ResourceIdentity ,Verify access for the menu 'ResourceIdentities': Should not have access   "+"<br>");
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		Assert.assertFalse(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Option is not greyed out ");
		
		
		common.home();
		
		Reporter.log("Step 7 : Navigate to Devices > DeviceTools > ResourceIdentity , Click on resource Pool with the name <"+resourcePoolName+">  verify Import IDs  link  "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName).click();
		Assert.assertTrue( driver.findElements(By.linkText("Import IDs")).size()<=0,"Import IDs link visible for Full Access user");
		
		
		Reporter.log("===============End testVerifyImportResouceIDsMenuAccessPermissionWithFullAccessUser_017========================"+"<br>");
	}
	// //verify access to menues like 'Resouce identity', 'Resource Identities',  for  'Limited Access User'
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIDsMenuAccessPermissionWithLimitedUser_018() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235297  "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIDsMenuAccessPermissionWithLimitedUser_018========================"+"<br>");
		
		Reporter.log("Step 1 : Create New User "+"<br>");
		String limitedAccessUser = NAUtils.addUser(new String[]{"Limited Access User"});
		
		Reporter.log("Step 2 : Create Resource Identity pool with  Resource 'ID' "+"<br>");	
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 3 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(limitedAccessUser);
		
		Reporter.log("Step 4 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(limitedAccessUser));

		Reporter.log("Step 5 : Navigate to Tasks > New Tasks  > import > Verify access for the menu 'ResourceIdentity': Should not have access"+"<br>");
		Navigate.Tasks.NewTasks.Import.ResouceIdentity();
		Assert.assertFalse(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Option is not greyed out ");		
		common.home();
		
		Reporter.log("Step 6 : Navigate to Admin > SystemTasks> import > Verify access for the menu 'ResourceIdentities': Should not have access"+"<br>");
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		Assert.assertFalse(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Option is not greyed out ");
		common.home();
		
		Reporter.log("===============End testVerifyImportResouceIDsMenuAccessPermissionWithLimitedUser_018========================"+"<br>");
	}
	
	
	//verify access to menues like 'Resouce identity', 'Resource Identities', 'resource Identity Pools' for 'Power User'
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIDsMenuAccessPermissionWithPowerUser_019() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235263  "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIDsMenuAccessPermissionWithPowerUser_019========================"+"<br>");
		
		Reporter.log("Step 1 : Create New User "+"<br>");
		String powerUser = NAUtils.addUser(new String[]{"Power User"});
		
		Reporter.log("Step 2 : Create Resource Identity pool with  Resource 'ID' "+"<br>");	
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 3 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(powerUser);
				
		Reporter.log("Step 4 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(powerUser));

				
		Reporter.log("Step 5 : Navigate to Tasks > New Tasks  > import > ResourceIdentity ,Verify access for the menu 'ResourceIdentities': Should  have access   "+"<br>");
		Navigate.Tasks.NewTasks.Import.ResouceIdentity();
		Assert.assertTrue( common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Not able to open Import task page for power user ");
		
		// check with Niharika blank screen apprence when nevigating to Tasks > New Tasks  > import > ResourceIdentity
		Reporter.log("Step 6 : Navigate to Admin > SystemTasks> import > ResourceIdentity ,Verify access for the menu 'ResourceIdentities': Should  have access  "+"<br>");
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Not able to open Import task page for power user ");
		
		Reporter.log("Step 7 : Navigate to Resource identity click on 'Import IDs' link & verify the page title   "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText("Import IDs").click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Not able to open Import task page for power user ");
		
		Reporter.log("===============End testVerifyImportResouceIDsMenuAccessPermissionWithPowerUser_019========================"+"<br>");
	}
	
	/*verify access to menues like 'Resouce identity', 'Resource Identities', 'resource Identity Pools' for following users
			1. New User ('Command Permissions' as {'Resource Identity Pool: View,'Resource Identity: Add/Import} and 'Partition Permission' as Created Security Partition )
			2. admin user permissions as {"Resource Identity Pool: View"}
			3. New User
	*/
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIDsMenuAccessPermissionWithPowerUser_020() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235264   "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIDsMenuAccessPermissionWithPowerUser_020========================"+"<br>");
		
		Reporter.log("Step 1 : Create Resource Identity pool  with Security Partition & Resource 'ID' "+"<br>");	
		String securityPartition = NAUtils.addNewSecurityPartition();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName,securityPartition,null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 2 : Add new User Group ('Command Permissions' as {'Resource Identity Pool: View,'Resource Identity: Add/Import} and 'Partition Permission' as  "+securityPartition+"<br>");
		
		String[] customPermissions = {"Resource Identity Pool: View","Resource Identity: Add/Import"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		
		Reporter.log("Step 3 : Create a New User with above created user Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 4 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 5 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		
		Reporter.log("Step 6 : Navigate to Tasks > New Tasks  > import > ResourceIdentity ,verify the page title  "+"<br>");
		Navigate.Tasks.NewTasks.Import.ResouceIdentity();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Option is greyed out ");
		common.home();
		
		Reporter.log("Step 7 : Navigate to Admin > SystemTasks> import > ResourceIdentity ,verify the page title  "+"<br>");
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Option is greyed out ");
		common.home();
		
		Reporter.log("Step 8 : Navigate to Resource identity click on 'Import IDs' link & verify the page title   "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText("Import IDs").click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Import page not opening  ");
		common.home();
		
		
		login.loginAsUser("admin");
		
		Reporter.log("Step 9 : Add new User Group ('Command Permissions' as {'Resource Identity Pool: View,'Resource Identity: Add/Import} and 'Partition Permission' as  "+securityPartition+"<br>");
		customPermissions = new String[]{"Resource Identity Pool: View"};
		userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 10 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 11 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
		Reporter.log("Step 12 : Navigate to Tasks > New Tasks  > import > ResourceIdentity ,page title verification from home page  "+"<br>");
		Navigate.Tasks.NewTasks.Import.ResouceIdentity();
		Assert.assertFalse(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Option is not greyed out");
		common.home();
		
		Reporter.log("Step 13 : Navigate to Admin > SystemTasks> import > ResourceIdentity ,page title verification from home page  "+"<br>");
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		Assert.assertFalse(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Option is not greyed out");
		common.home();
		
		Reporter.log("Step 14 : Navigate to Resource identitypools & verify Import IDs displayed or not ? should not be displayed    "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Assert.assertTrue( driver.findElements(By.linkText("Import IDs")).size()<=0,"Import link is disabled ");		
		common.home();
		
		Reporter.log("===============End testVerifyImportResouceIDsMenuAccessPermissionWithPowerUser_020========================"+"<br>");
		
	}
	
	
	
	//verify access to menues like 'Resouce identity', 'Resource Identities', 'resource Identity Pools' for 'adminUser'
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIDsMenuAccessPermissionWithAdminUser_021() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235289  "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIDsMenuAccessPermissionWithAdminUser_021========================"+"<br>");
		
		Reporter.log("Step 1 : Create New user"+"<br>");
		String adminUser = NAUtils.addUser(new String[]{"Administrator"});
		
		Reporter.log("Step 2 : Create Resource Identity pool  with  Resource 'ID' "+"<br>");	
		String resourcePoolName = NAUtils.createResourceIdentityPools();
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 3 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(adminUser);
				
		Reporter.log("Step 4 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(adminUser));
		
		
		Reporter.log("Step 5 : Navigate to Tasks > New Tasks  > import > ResourceIdentity & verify page title  "+"<br>");
		Navigate.Tasks.NewTasks.Import.ResouceIdentity();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Not able to open Import task page for admin user ");
		
		
		Reporter.log("Step 6 : Navigate to Admin > SystemTasks> import > ResourceIdentity & verify page title  "+"<br>");
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		Assert.assertTrue( common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Not able to open Import task page for admin user ");
		
		Reporter.log("Step 7 : Navigate to Resource identity & verify page title   "+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText("Import IDs").click();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Not able to open Import task page for admin user ");
		
		
		Reporter.log("===============End testVerifyImportResouceIDsMenuAccessPermissionWithAdminUser_021========================"+"<br>");
		
	}
	//verify'New Pool','Edit Pool','Delete','Add IDs','Import IDs'  links as user with custom role ('Command Permissions' as {'Resource Identity Pool: View,Manage 'Resource Identity: Delete,} and 'Partition Permission' as Created partition
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyCustomerDefinedUserGroupWithDeleteResourceIdentityPermission_022() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235293 "+"<br>");
		Reporter.log("===============Start testVerifyCustomerDefinedUserGroupWithDeleteResourceIdentityPermission_022========================"+"<br>");
		
		boolean isPresent = true;
		
		Reporter.log("Step 1 : Create Resource Identity pool  with Security Partition & Resource 'ID' "+"<br>");	
		String securityPartition = NAUtils.addNewSecurityPartition();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName,securityPartition,null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 2 : Add new User Group ('Command Permissions' as {'Resource Identity Pool: View,Manage 'Resource Identity: Delete,} and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity: Delete","Resource Identity Pool: View","Resource Identity Pool: Manage"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		
		Reporter.log("Step 3 : Create a New User with above created user Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 4 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 5 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));

		Reporter.log("Step 6 : Verify permission links as 'New Pool','Edit Pool','Delete' displayed or not ? ::Expected : should  be displayed "+"<br>");	
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Assert.assertTrue( driver.findElements(By.linkText("New Pool")).size()>0,"New Pool visible to the login user ");
		Assert.assertTrue( driver.findElements(By.linkText("Edit Pool")).size()>0,"Edit Pool visible to the login user ");
		
		Reporter.log("Step 7 : Verify permission links as 'Add IDs','Import IDs' displayed or not ? ::Expected : should  not be displayed "+"<br>");	
		Assert.assertTrue(driver.findElements(By.linkText("Add IDs")).size()<=0,"ADD IDs visible to the login user ");
		Assert.assertTrue( driver.findElements(By.linkText("Import IDs")).size()<=0,"Import IDs visible to the login user ");
		
		
		Select select = new Select(common.getObjectByName("select_options"));
		List<WebElement> options = select.getOptions();
		System.out.println(options.size());
		for(WebElement option:options){
			if(option.getText().equals("Delete")){
				Assert.assertTrue(true,"Delete is visible to the user login");
				isPresent = true;
				Assert.assertTrue(common.selectOption("select_options", "Delete"),"Not able to delete the resouce identity pool ");
				break;
			}else{
				isPresent = false;
			}
		}
		if(!isPresent){
			Assert.assertTrue(false,"Delete not visible for the user login");
		}
				
		Reporter.log("===============End testVerifyCustomerDefinedUserGroupWithDeleteResourceIdentityPermission_022========================"+"<br>");
		
	}
	
	//Verify 'New Pool','Edit Pool','Add IDs','Import IDs','Acquire ID','Edit ID'  links as  NewUser
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyCustomerDefinedUserGroupWithManageResourceIdentityPermission_023() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235298   "+"<br>");
		Reporter.log("===============Start testVerifyCustomerDefinedUserGroupWithManageResourceIdentityPermission_023========================"+"<br>");
		
		Reporter.log("Step 1 : Create Resource Identity pool  with Security Partition & Add one Resource 'ID' "+"<br>");	
		String securityPartition = NAUtils.addNewSecurityPartition();
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.pageSizeOption("All");
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName,securityPartition,null);
		String idName = common.generateRandomString();
		Assert.assertTrue(NAUtils.addResourceIDsToPool(resourcePoolName, idName, null),"Resouce ID not added to resoucePool "+resourcePoolName);
		
		Reporter.log("Step 2 : Add new User Group ('Command Permissions' as {'Resource Identity Pool: View,Manage} and 'Partition Permission' as  "+securityPartition+"<br>");
		String[] customPermissions = {"Resource Identity Pool: Manage","Resource Identity Pool: View"};
		String userGroup = NAUtils.addnewUserGroup("custom", customPermissions, true, securityPartition);
		
		Reporter.log("Step 3 : Create New User with above created user Group"+"<br>");
		String newUser = NAUtils.addUser(new String[]{userGroup});
		
		Reporter.log("Step 4 : Reset Password for the above created New User"+"<br>");
		login.resetPassword(newUser);
				
		Reporter.log("Step 5 : login As New User"+"<br>");
		Assert.assertTrue(login.loginAsNewUser(newUser));
		
    	Reporter.log("Step 6 : Verify permission links as 'New Pool','Edit Pool' displayed or not ? ::Expected : should  be displayed "+"<br>");	
    	Navigate.Devices.DeviceTools.resourceIdentityPools();
    	Assert.assertTrue(driver.findElements(By.linkText("New Pool")).size()>=0,"New Pool is not visible to the login user ");
    	Assert.assertTrue( driver.findElements(By.linkText("Edit Pool")).size()>=0,"Edit Pool is not visible to the login user ");
    	
		Reporter.log("Step 7 : Verify permission links as 'Add IDs','Import IDs','Acquire Next ID' displayed or not ? ::Expected : should  not be displayed "+"<br>");				
		Assert.assertTrue( driver.findElements(By.linkText("Add IDs")).size()<=0,"ADD IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Import IDs")).size()<=0,"Import IDs visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Acquire Next ID")).size()<=0,"Acquire Next ID visible to the login user ");
				
		Reporter.log("Step 8 : Click on Resource Pool > Verify permission links as 'Acquire ID','Edit ID' displayed or not ? ::Expected : should  not be displayed "+"<br>");	
		common.getObjectByLinkText(resourcePoolName).click();
		
		Assert.assertTrue( driver.findElements(By.linkText("Acquire ID")).size()<=0,"Acquire ID visible to the login user ");
		Assert.assertTrue(driver.findElements(By.linkText("Edit ID")).size()<=0,"Edit ID visible to the login user ");
		
		
		Reporter.log("===============End testVerifyCustomerDefinedUserGroupWithManageResourceIdentityPermission_023========================"+"<br>");
		
	}
	
	
	//Browser CSV file & verify CustomfieldNames
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportWorksWithCSVFileWhichHasCustomAttributesDefined_001() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235268  "+"<br>");
		Reporter.log("===============Start testVerifyImportWorksWithCSVFileWhichHasCustomAttributesDefined_001========================"+"<br>");
		
		Reporter.log("Step 1: Create Resource Identity pool with Two customFields"+"<br>");
		prerequisites();
		
		String fieldName1 = "CustomField1";
		String fieldName2 = "CustomField2";
		
		NAUtils.deletePoolsWithIDsForImport(true);

		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true,fieldName1,true,null,false),"Not able to create custom Fields ");
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true,fieldName2,false,null,false),"Not able to create custom Fields ");
		
		String resourcePoolName = NAUtils.createResourceIdentityPools(new String[]{fieldName1,fieldName2});
		
		Reporter.log("Step 2: Navigate to Resource Identity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Reporter.log("Step 3:Browse  CSV file "+"<br>");
		Assert.assertTrue(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\importCustomResouceIds.csv"),"Not able to import custom IDs ");
		

		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName).click();
		
		Assert.assertTrue(driver.findElements(By.linkText("customFieldName1")).size()>0,"customFieldName1 not available after import");
		Assert.assertTrue(driver.findElements(By.linkText("customFieldName2")).size()>0,"customFieldName2 not available after import");
		Assert.assertTrue(driver.findElements(By.linkText("customFieldName3")).size()>0,"customFieldName3 not available after import");
		
		Reporter.log("===============End testVerifyImportWorksWithCSVFileWhichHasCustomAttributesDefined_001========================"+"<br>");
	}
	
	//Browse CSV file & Verify Task status message 1)First time 'Succeeded' 2) second time 'Failed'  
	@Test(enabled = true, groups= {"ART"})
	public void testImportResouceIdentityIntoResourceIdentityPoolCannotModifyExistingResouceIdentities_002() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235245   "+"<br>");
		Reporter.log("===============Start testImportResouceIdentityIntoResourceIdentityPoolCannotModifyExistingResouceIdentities_002========================"+"<br>");
		
		Reporter.log("Step 1: Create Resource Identity pool with Two customFields"+"<br>");
		
		String fieldName1 = "CustomField1";
		String fieldName2 = "CustomField2";
		
		NAUtils.deletePoolsWithIDsForImport(true);

		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true,fieldName1,true,null,false),"Not able to create custom Fields ");
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true,fieldName2,false,null,false),"Not able to create custom Fields ");
		
		String resourcePoolName = NAUtils.createResourceIdentityPools(new String[]{fieldName1,fieldName2});
		
		Reporter.log("Step 2: Navigate to Resource Identity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
	
		Reporter.log("Step 3: Browse CSV file & Verify Task status message as  'Succeeded'  "+"<br>");
		Assert.assertTrue(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\importCustomResouceIds.csv"),"Not able to import custom IDs ");
		
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		common.getObjectByLinkText(resourcePoolName).click();
		
		//Reporter.log("Step 4: Trying to Verify existence of upon imported step 3  'Import IDs' link  from CSV file  "+"<br>");
		Reporter.log("Step 4: Browse CSV file & Verify Task status message as  'Failed'  "+"<br>");
		Assert.assertFalse(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\importCustomResouceIds.csv"),"Not able to import custom IDs ");
		
		Reporter.log("===============End testImportResouceIdentityIntoResourceIdentityPoolCannotModifyExistingResouceIdentities_002========================"+"<br>");
		
	}
	// Try to import Resource IDs with invalid Custom field values in CSV file  
	@Test(enabled = true, groups= {"ART"})
	public void testImportResouceIdentityTaskWithInvalidValue_003() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235285   "+"<br>");
		Reporter.log("===============Start testImportResouceIdentityTaskWithInvalidValue_003========================"+"<br>");
		Reporter.log("Step 1: Create Resource Identity pool with Two customFields"+"<br>");
		prerequisites();
		
		String fieldName1 = "CustomField1";
		String fieldName2 = "CustomField2";
		
		NAUtils.deletePoolsWithIDsForImport(true);

		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true,fieldName1,true,null,false),"Not able to create custom Fields ");
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true,fieldName2,false,null,false),"Not able to create custom Fields ");
		
		String resourcePoolName = NAUtils.createResourceIdentityPools(new String[]{fieldName1,fieldName2});
		
		Reporter.log("Step 2: Navigate to Resource Identity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
			
		Reporter.log("Step 3:Try to import Resource IDs with invalid Custom field values in CSV file   "+"<br>");	
		Assert.assertFalse(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\importCustomResouceIdsInvalidStatus.csv"),"Not able to import custom IDs ");

		Reporter.log("===============End testImportResouceIdentityTaskWithInvalidValue_003========================"+"<br>");
		
	}
	
	// Try to import Resource IDs with invalid Custom field name in CSV file 
	@Test(enabled = true, groups= {"ART"})
	public void testImportResouceIdentityTaskWithInvalidEnchancedCustomFieldsColumn_004() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235234   "+"<br>");
		Reporter.log("===============Start testImportResouceIdentityTaskWithInvalidEnchancedCustomFieldsColumn_004========================"+"<br>");
		
		Reporter.log("Step 1: Create Resource Identity pool with Two customFields"+"<br>");
		String fieldName1 = "CustomField1";
		String fieldName2 = "CustomField2";
		
		NAUtils.deletePoolsWithIDsForImport(true);

		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true,fieldName1,true,null,false),"Not able to create custom Fields ");
		Assert.assertTrue(NAUtils.createCustomFieldsForResourceIDs(true,fieldName2,false,null,false),"Not able to create custom Fields ");
		
		String resourcePoolName = NAUtils.createResourceIdentityPools(new String[]{fieldName1,fieldName2});
		
		Reporter.log("Step 2: Navigate to Resource Identity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Reporter.log("Step 3:Try to import Resource IDs with invalid Custom field name in CSV file "+"<br>");	
		
		Assert.assertFalse(NAUtils.importIDs(resourcePoolName, inputDirectory+"\\importCustomResouceIdsInvalidColumn.csv"),"Not able to import custom IDs ");

		Reporter.log("===============End testImportResouceIdentityTaskWithInvalidEnchancedCustomFieldsColumn_004========================"+"<br>");
	}
	
	// Click on 'Import IDs' link & Verify Resource ID CSV template link 
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyResouceIDCSV_001(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235286   "+"<br>");
		Reporter.log("===============Start testVerifyResouceIDCSV_001========================"+"<br>");
		
		Reporter.log("Step 1: Create Resource Identity pool "+"<br>");
		String resouceIdentityPool = NAUtils.createResourceIdentityPools();
		
		
		Reporter.log("Step 2: Navigate to Resource Identity pools"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resouce Identity Pools Page not launched ");
		
		// Step 3
		System.out.println("***********Step 3**********");
		common.getObjectByLinkText(resouceIdentityPool).click();
		common.getObjectByLinkText("Import IDs").click();
		
		Reporter.log("Step 3: Verify Resource ID CSV template"+"<br>");
		Assert.assertTrue(driver.findElements(By.linkText("Resource ID CSV Template")).size()>0,"Resouce ID CSV link doesnt exist ");
		
		
		Reporter.log("===============End testVerifyResouceIDCSV_001========================"+"<br>");
		
	}
	
	//verify Mandatory Fields in ( Navigate > Tasks >New Tasks > Import > Resource Identities)
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIDsToExistingResouceIdentityPools_002() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235244  "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIDsToExistingResouceIdentityPools_002========================"+"<br>");
		
		Reporter.log("Step 1: Create Resource Identity pool "+"<br>");
		String resoucePoolName = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 2: Navigate > Tasks >New Tasks > Import > Resource Identity "+"<br>");
		Navigate.Tasks.NewTasks.Import.ResouceIdentity();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Import Resouce Identity Page not loaded ");
		

		Reporter.log("Step 3: verify MandatoryItems (Task Priority,Partition,Resource Identity Pool,Import File) are available or not :: Expected should be displayed "+"<br>");
		List<WebElement> mandatoryItems = driver.findElements(By.xpath("//*[contains(@class,'required_box')]"));
		System.out.println("size is "+mandatoryItems.size());
		List<String> mandatoryItemsAvailable = new ArrayList<String>();
		
		for(WebElement mandatoryItem : mandatoryItems){
			mandatoryItemsAvailable.add(mandatoryItem.getText().trim());
		}
		
		Assert.assertTrue( mandatoryItemsAvailable.contains("Task Priority"),"Task Priority is not a mandatory Field ");
		Assert.assertTrue(mandatoryItemsAvailable.contains("Partition"),"Partition is not a mandatory Field ");
		Assert.assertTrue(mandatoryItemsAvailable.contains("Resource Identity Pool"),"Resource Identity Pool is not a mandatory Field ");
		Assert.assertTrue(mandatoryItemsAvailable.contains("Import File"),"Import File is not a mandatory Field ");
		
		Reporter.log("Step 3: Verify Functionality of CSV file  "+"<br>");
		Assert.assertTrue(NAUtils.importIDs(resoucePoolName, inputDirectory+"\\Import3ResouceIds.csv"),"Not able to import IDs");
		
		Reporter.log("===============End testVerifyImportResouceIDsToExistingResouceIdentityPools_002========================"+"<br>");
		
	}
	
	// Browse CSV file & Verify resource Identity pools(Navigate > Tasks >New Tasks > Import > Resource Identities)
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIDsToDifferentResouceIdentityPoolsWithSameResouceIds_003() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235233   "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIDsToDifferentResouceIdentityPoolsWithSameResouceIds_003========================"+"<br>");
		
		Reporter.log("Step 1: Create Two Resource Identity pools "+"<br>");
		String resouceIdentityPool1 = NAUtils.createResourceIdentityPools();
		String resouceIdentityPool2 = NAUtils.createResourceIdentityPools();
		
		NAUtils.deletePoolsWithIDsForImport(true);
		Reporter.log("Step 2: Navigate > Tasks >New Tasks > Import > Resource Identity & verify  title "+"<br>");
		
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Import Resouce Identity Page not loaded ");
		
				
		Reporter.log("Step 4 : Select  Resource Identity pools & browser CSV file for two times    "+"<br>");
		Assert.assertTrue(NAUtils.importIDs(resouceIdentityPool1, inputDirectory+"\\Import3ResouceIds.csv"),"Not able to import IDs");
		Assert.assertTrue(NAUtils.importIDs(resouceIdentityPool2, inputDirectory+"\\Import3ResouceIds.csv"),"Not able to import IDs");
		
		Reporter.log("===============End testVerifyImportResouceIDsToDifferentResouceIdentityPoolsWithSameResouceIds_003========================"+"<br>");
		
	}
	// Before Browsing  CSV file  Selected  ResourceIdentityPoolin (Navigate > Admin > New SystemTasks > Import > Resource Identities) 
	
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIDsToAnExistingResouceIdentityPoolSystemTasks_004(){
		Reporter.log("ALM Global ID For this test Case:  QCTP1B235251  "+"<br>");
		
		Reporter.log("===============Start testVerifyImportResouceIDsToAnExistingResouceIdentityPoolSystemTasks_004========================"+"<br>");
		
		Reporter.log("Step 1: Create Two Resource Identity pools "+"<br>");
		String resouceIdentityPool = NAUtils.createResourceIdentityPools();
		
		NAUtils.deletePoolsWithIDsForImport(true);
		
		Reporter.log("Step 2: Navigate > Admin > New SystemTasks > Import > Resource Identities"+"<br>");
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		common.selectOption("resourceIdentityPoolID", resouceIdentityPool);
		

		Reporter.log("Step 4 : Browse CSV file & Click on 'Save'"+"<br>");
		common.getObjectByName("localFile").sendKeys(inputDirectory+"\\Import3ResouceIds.csv");
		common.save();
		//Assert.assertTrue("Message is not saved ", common.pageInfoBoxContains("Successfully saved task"));
		
		
		while(common.getObjectById("task_status").getText().trim().equals("Running") || common.getObjectById("task_status").getText().trim().equals("Pending")){
			System.out.println("task status is "+common.getObjectById("task_status").getText());
			common.sleepInSeconds(2);
		}
		System.out.println("task status is ---"+common.getObjectById("task_status").getText()+"----");
		
		if(common.getObjectById("task_status").getText().trim().equals("Succeeded")){	
			Assert.assertTrue(true,"Import task failed");
		}else if(common.getObjectById("task_status").getText().trim().equals("Failed")){
			Assert.assertTrue(false,"Import task failed");
		}else{
			Assert.assertTrue(false,"Import task failed");
		}
		
		Assert.assertTrue(driver.findElements(By.xpath("//a[contains(text(),'import_log_')]")).size()>0,"Log file is missing ");
		Reporter.log("===============End testVerifyImportResouceIDsToAnExistingResouceIdentityPoolSystemTasks_004========================"+"<br>");
	}
	
	// verify Error message displayed upon click on 'save' with out  browsering csv file)
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIdsToAResouceIdenityPoolViaImportResouceIDsLink_005(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235232   "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIdsToAResouceIdenityPoolViaImportResouceIDsLink_005========================"+"<br>");
		
		Reporter.log("Step 1: Create  Resource Identity pool "+"<br>");
		String resoucePoolName = NAUtils.createResourceIdentityPools();
				
		Reporter.log("Step 2: Navigate to  Resource Identities"+"<br>");
		
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resouce Identity Pools page not opened");
		
		
		ResourceIdentityPoolsPage resourceIdentityPoolsPage = new ResourceIdentityPoolsPage();
		Reporter.log("Step 3: Click on 'Import IDS ' link  , Click on  'save' & Verify  'Error' message  "+"<br>");
		
		common.pageSizeOption("All");
		table = common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable);
		rows = table.findElements(By.tagName("tr"));
		
		for(int i=2;i<=rows.size();i++){
			System.out.println("i value is "+i);
			if(common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[2]/a").getText().equals(resoucePoolName)){
				common.getObjectByXpath(resourceIdentityPoolsPage.poolsAvailableWebTable+"/tbody/tr["+i+"]/td[8]/a[2]").click();
				break;
			}
		}
		
		
		common.save();
		Assert.assertTrue( driver.findElement(By.xpath("html/body/table[1]/tbody/tr/td[2]/div[3]")).getText().trim().equals("Please enter a valid and existing import file name"),"Mandatory options error not shown ");
		
		Reporter.log("Step 4 : Browse CSV file & Click on 'Save'"+"<br>");
		common.selectOption("resourceIdentityPoolID", resoucePoolName);
		common.getObjectByName("localFile").sendKeys(inputDirectory+"\\Import3ResouceIds.csv");
		
		
		common.save();
		
		while(common.getObjectById("task_status").getText().trim().equals("Running") || common.getObjectById("task_status").getText().trim().equals("Pending")){
			System.out.println("task status is "+common.getObjectById("task_status").getText());
			common.sleepInSeconds(2);
		}
		System.out.println("task status is ---"+common.getObjectById("task_status").getText()+"----");
		
		if(common.getObjectById("task_status").getText().trim().equals("Succeeded")){	
			Assert.assertTrue(true,"Import task failed");
		}else if(common.getObjectById("task_status").getText().trim().equals("Failed")){
			Assert.assertTrue(false,"Import task failed");
		}else{
			Assert.assertTrue(false,"Import task failed");
		}
		
		Assert.assertTrue(driver.findElements(By.xpath("//a[contains(text(),'import_log_')]")).size()>0,"Log file is missing ");
		
		
		Reporter.log("===============End testVerifyImportResouceIdsToAResouceIdenityPoolViaImportResouceIDsLink_005========================"+"<br>");
		
	}
	
	// Browse same Csv file & verify success and failed messages 
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportExistingResouceIdsToResouceIdentityPool_006() throws InterruptedException{
		Reporter.log("ALM Global ID For this test Case: QCTP1B235260  "+"<br>");
		System.out.println("===============Start testVerifyImportExistingResouceIdsToResouceIdentityPool_006========================"+"<br>");
		
		Reporter.log("Step 1: Create Two Resource Identity pools "+"<br>");
		String resourcePool = NAUtils.createResourceIdentityPools();
		
		Reporter.log("Step 2: Navigate to  Resource Identities"+"<br>");
		Navigate.Devices.DeviceTools.resourceIdentityPools();
		Assert.assertTrue(common.checkTitle("HP Network Automation: Resource Identity Pools"),"Resouce Identity Pools page not opened");
		
		Reporter.log("Step 3: Open created 'Resource Idenity pool' & Click on 'Import IDs' "+"<br>");
		common.getObjectByLinkText(resourcePool).click();
		
		
		common.getObjectByLinkText("Import IDs").click();
		
		Reporter.log("Step 4 : Browse CSV file & Click on 'Save'"+"<br>");
		common.selectOption("resourceIdentityPoolID", resourcePool);
		common.getObjectByName("localFile").sendKeys(inputDirectory+"\\Import3ResouceIds.csv");
		common.save();
		
		while(common.getObjectById("task_status").getText().trim().equals("Running") || common.getObjectById("task_status").getText().trim().equals("Pending")){
			System.out.println("task status is "+common.getObjectById("task_status").getText());
			common.sleepInSeconds(2);
		}
		System.out.println("task status is ---"+common.getObjectById("task_status").getText()+"----");
		
		if(common.getObjectById("task_status").getText().trim().equals("Succeeded")){	
			Assert.assertTrue(true,"Import task failed");
		}else if(common.getObjectById("task_status").getText().trim().equals("Failed")){
			Assert.assertTrue(false,"Import task failed");
		}else{
			Assert.assertTrue(false,"Import task failed");
		}
		
		Reporter.log("Step 5: Trying to import same CSV file  :: Expected : should be failed    "+"<br>");
		Assert.assertFalse(NAUtils.importIDs(resourcePool, inputDirectory+"\\Import3ResouceIds.csv"),"Not able to import IDs");
		
		System.out.println("===============End testVerifyImportExistingResouceIdsToResouceIdentityPool_006========================"+"<br>");
	}
	
	// Browse CSV file ( Resource identity pool with security partition)  
	@Test(enabled = true, groups= {"ART"})
	public void testVerifyImportResouceIdsTaskPageForRequiredFields_007(){
		Reporter.log("ALM Global ID For this test Case: QCTP1B235277   "+"<br>");
		Reporter.log("===============Start testVerifyImportResouceIdsTaskPageForRequiredFields_007========================"+"<br>");
		
		Reporter.log("Step 1: Create Two securityPartitions  "+"<br>");
		String securityPartition1 =  NAUtils.addNewSecurityPartition();
		String securityPartition2 = NAUtils.addNewSecurityPartition();
		
		Reporter.log("Step 2: Create Resource identity pool with  securityPartition 1  "+"<br>");
		String resourcePoolName = common.generateRandomString();
		NAUtils.createResourceIdentityPools(resourcePoolName, securityPartition1, null);
		
		Reporter.log("Step 3: Navigate > Admin > New SystemTasks > Import > Resource Identities"+"<br>");
		Navigate.Admin.SystemTasks.Import.ResourceIdentities();
		Assert.assertTrue(common.checkTitle("HP Network Automation: New Task/Template - Import Resource Identities into Resource Identity Pool"),"Import Resouce Identity Page not loaded ");
		
		
		common.selectOption("resourceIdentityPoolID", resourcePoolName);
		common.selectOption("siteID", securityPartition1);
		common.save();
		Assert.assertTrue(driver.findElement(By.xpath("html/body/table[1]/tbody/tr/td[2]/div[3]")).getText().trim().equals("Please enter a valid and existing import file name"),"Mandatory options error not shown ");
		
		Reporter.log("Step 4 : Browse CSV file & Click on 'Save'"+"<br>");
		common.selectOption("siteID", securityPartition2);
		common.getObjectByName("localFile").sendKeys(inputDirectory+"\\Import3ResouceIds.csv");
		common.save();
		
		while(common.getObjectById("task_status").getText().trim().equals("Running") || common.getObjectById("task_status").getText().trim().equals("Pending")){
			System.out.println("task status is "+common.getObjectById("task_status").getText());
			common.sleepInSeconds(2);
		}
		System.out.println("task status is ---"+common.getObjectById("task_status").getText()+"----");
		
		if(common.getObjectById("task_status").getText().trim().equals("Succeeded")){	
			Assert.assertTrue(false,"Import task is successful");
		}else if(common.getObjectById("task_status").getText().trim().equals("Failed")){
			Assert.assertTrue(true,"Import task did not fail");
		}else{
			Assert.assertTrue(false,"Import task failed");
		}
		
		
		Reporter.log("===============End testVerifyImportResouceIdsTaskPageForRequiredFields_007========================"+"<br>");
		
	}
	
				
	
	public void prerequisites(){
		
		Reporter.log("===============Executing prerequisite for the test ========================"+"<br>");
		Reporter.log("Navigate to Admin > AdminSettings > User Interface "+"<br>");
		Navigate.Admin.AdminSettings.userInterface();
		Reporter.log("Selecting the Check Box - Enable enhanced custom fields for some data sets."+"<br>");
		if(!common.getObjectByName("metadata/enabled").isSelected()){
			common.getObjectByName("metadata/enabled").click();
			common.getObjectByXpath("//input[@value='Save' and @class='FormButton']").click();
			Assert.assertTrue(common.pageInfoBoxContains("Setting values have been saved."));
		}
		Reporter.log("Navigate to Admin > EnhancedCustomerFieldSetup > Deleting all Existing CustomIDs"+"<br>");
		NAUtils.deleteAllCustomIDs();
		Reporter.log("===============Completed executing prerequisite for the test ========================"+"<br>");
	}
	
	
   @AfterMethod(enabled = true, groups = {"BAT", "ART"})
	  public void logout()
	  {
	  	try {
			login.logOut();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	  
	  	driver.quit();
	  	driver=null;
	  	
	  }

	
}
